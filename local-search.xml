<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>每日checklist（07.01-10.08）</title>
    <link href="/2022/11/13/%E6%AF%8F%E6%97%A5checklist%EF%BC%8807.01-10.08%EF%BC%89/"/>
    <url>/2022/11/13/%E6%AF%8F%E6%97%A5checklist%EF%BC%8807.01-10.08%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="2022-07-01"><a href="#2022-07-01" class="headerlink" title="2022.07.01"></a>2022.07.01</h3><p>开始了新的一段技术学习，从校园生活转变成为职场生活，正式入职某厂，所以继续开始技术学习之路。把之前看到的文章没来得及整理的就直接整理到这天，所以内容可能会比较多，但是并不代表这天就看了这么多内容。</p><p>1、某老牌反作弊产品分析（存在加密漏洞可被中间人攻击）</p><p><a href="https://mp.weixin.qq.com/s/HSBxc2O-GG5V1c84-CMlIg">https://mp.weixin.qq.com/s/HSBxc2O-GG5V1c84-CMlIg</a></p><p><a href="https://mp.weixin.qq.com/s/4Yj6Ec-ktM0tEfpOasHnLQ">https://mp.weixin.qq.com/s/4Yj6Ec-ktM0tEfpOasHnLQ</a></p><p>2、应用eBPF技术的开源项目</p><p><a href="https://ebpf.io/projects/">https://ebpf.io/projects/</a></p><p>3、当xiaomi12遇上eBPF</p><p><a href="https://mp.weixin.qq.com/s/h_ixxr1WZ8VqYt-zMrwSDA">https://mp.weixin.qq.com/s/h_ixxr1WZ8VqYt-zMrwSDA</a></p><p>4、CS自学指南</p><p><a href="https://csdiy.wiki/">https://csdiy.wiki/</a></p><p>5、浅谈pyd文件逆向</p><p><a href="https://tttang.com/archive/1641/">https://tttang.com/archive/1641/</a></p><p>6、flanker的android CVE分享</p><p><a href="https://github.com/flankerhqd/vendor-android-cves">https://github.com/flankerhqd/vendor-android-cves</a></p><p>7、Akamai保护的相关网站（IHG，TI）学习记录</p><p><a href="https://mp.weixin.qq.com/s/fqHB-2VkbUlsmZ-nf3ZV9A">https://mp.weixin.qq.com/s/fqHB-2VkbUlsmZ-nf3ZV9A</a></p><p>8、人均瑞数系列，瑞数 4 代 JS 逆向分析</p><p><a href="https://mp.weixin.qq.com/s/0uzPRiPdSargFlDM-TwAWw">https://mp.weixin.qq.com/s/0uzPRiPdSargFlDM-TwAWw</a></p><h3 id="2022-07-04"><a href="#2022-07-04" class="headerlink" title="2022.07.04"></a>2022.07.04</h3><p>1、Flutter APP逆向实践-初级篇</p><p><a href="https://bbs.pediy.com/thread-273545.htm">https://bbs.pediy.com/thread-273545.htm</a></p><h3 id="2022-07-05"><a href="#2022-07-05" class="headerlink" title="2022.07.05"></a>2022.07.05</h3><p>1、React Native Hermes逆向实战</p><p><a href="https://bbs.pediy.com/thread-273544.htm">https://bbs.pediy.com/thread-273544.htm</a></p><p>2、过去十年汽车漏洞研究</p><p><a href="https://schmiedecker.net/talks/2022-06-30_Troopers22.pdf">https://schmiedecker.net/talks/2022-06-30_Troopers22.pdf</a></p><p>3、google公开了2022的赛题</p><p><a href="https://github.com/google/google-ctf/tree/master/2022">https://github.com/google/google-ctf/tree/master/2022</a></p><p>4、一款kernel级别的调试器 hyperdbg，开放了设计文档</p><p><a href="https://hyperdbg.org/">https://hyperdbg.org/</a></p><p><a href="https://research.hyperdbg.org/assets/documents/kernel-debugger-design-1st-edition.pdf">https://research.hyperdbg.org/assets/documents/kernel-debugger-design-1st-edition.pdf</a></p><h3 id="2022-07-06"><a href="#2022-07-06" class="headerlink" title="2022.07.06"></a>2022.07.06</h3><p>1、在android使用iptables实现翻墙</p><p><a href="https://limbo.moe/posts/2012/gotunnel-on-android">https://limbo.moe/posts/2012/gotunnel-on-android</a></p><p>重点在于要root的设备，并且是需要DNS解析的</p><h3 id="2022-07-07"><a href="#2022-07-07" class="headerlink" title="2022.07.07"></a>2022.07.07</h3><p>1、antiantiFrida脚本</p><p><a href="https://github.com/apkunpacker/AntiFrida_Bypass">https://github.com/apkunpacker/AntiFrida_Bypass</a></p><p>对那些检测frida的场景做bypass，这个脚本公开，相应的检测frida又有模板来反了</p><p>2、Frida inlinehook原理和简单设计一款inlinehook工具</p><p><a href="https://mp.weixin.qq.com/s/vn0LKlO86VplCSuUetOkCA">https://mp.weixin.qq.com/s/vn0LKlO86VplCSuUetOkCA</a></p><p>3、SVC的TraceHook沙箱的实现&amp;无痕Hook实现思路</p><p><a href="https://bbs.pediy.com/thread-273160.htm">https://bbs.pediy.com/thread-273160.htm</a></p><h3 id="2022-07-08"><a href="#2022-07-08" class="headerlink" title="2022.07.08"></a>2022.07.08</h3><p>1、MLOPs 机器学习操作是一个新兴的方向</p><p><a href="https://github.com/dair-ai/MLOPs-Primer">https://github.com/dair-ai/MLOPs-Primer</a></p><p>只能说这里面关于机器学习的教程和文章是真的丰富并且大量的人在使用</p><p>2、免费的讲解浏览器fuzz的课程</p><p><a href="https://academy.fuzzinglabs.com/view/courses/introduction-browser-fuzzing">https://academy.fuzzinglabs.com/view/courses/introduction-browser-fuzzing</a></p><p>3、Andrind 内核缓解机制漏洞影响（The Android kernel mitigations obstacle race）</p><p>CVE-2022-22057（Qualcomm gpu 内核驱动程序中的 use-after-free）从三星 Z Flip 3 上不受信任的应用程序沙箱中获取 root 权限并禁用 SELinux</p><p><a href="https://github.blog/2022-06-16-the-android-kernel-mitigations-obstacle-race/">https://github.blog/2022-06-16-the-android-kernel-mitigations-obstacle-race/</a></p><p>4、以太坊区块链安全</p><p>以太坊安全相关的checklist：<a href="https://github.com/bkrem/awesome-solidity">https://github.com/bkrem/awesome-solidity</a></p><p>智能合约编程语言：<a href="https://github.com/ethereum/solidity">https://github.com/ethereum/solidity</a></p><p>以太坊协议的官方Go实现：<a href="https://github.com/ethereum/go-ethereum">https://github.com/ethereum/go-ethereum</a></p><p>区块链课程：<a href="https://github.com/smartcontractkit/full-blockchain-solidity-course-py">https://github.com/smartcontractkit/full-blockchain-solidity-course-py</a></p><p>合约编程solidity的静态分析框架：<a href="https://github.com/crytic/slither%EF%BC%8C%E8%AE%B2%E8%A7%A3%E8%AF%BE%E7%A8%8B%EF%BC%9Ahttps://www.youtube.com/watch?v=s3FL5caAy5w">https://github.com/crytic/slither，讲解课程：https://www.youtube.com/watch?v=s3FL5caAy5w</a></p><p>5、DroidGuard：深入了解 SafetyNet</p><p><a href="https://www.romainthomas.fr/publication/22-sstic-blackhat-droidguard-safetynet/">https://www.romainthomas.fr/publication/22-sstic-blackhat-droidguard-safetynet/</a></p><p>这个主题值得深入研究</p><p>6、Android 101 讲解Android系统知识</p><p><a href="https://secrary.com/android-reversing/android101/">https://secrary.com/android-reversing/android101/</a></p><h3 id="2022-07-09"><a href="#2022-07-09" class="headerlink" title="2022.07.09"></a>2022.07.09</h3><p>1、magisk集成环境，开箱即用</p><p><a href="https://github.com/cxf-boluo/magisk_All">https://github.com/cxf-boluo/magisk_All</a></p><p>2、机器学习出名的python库 sk-learn的众多实现案例</p><p><a href="https://scikit-learn.org/stable/auto_examples/index.html">https://scikit-learn.org/stable/auto_examples/index.html</a></p><p>3、一个二进制安全的博客，涉及到x64和arm64安全</p><p><a href="https://valsamaras.medium.com/">https://valsamaras.medium.com/</a></p><h3 id="2022-07-11"><a href="#2022-07-11" class="headerlink" title="2022.07.11"></a>2022.07.11</h3><p>1、android so文件攻防实战-libDexHelper.so反混淆</p><p><a href="https://bbs.pediy.com/thread-273614.htm">https://bbs.pediy.com/thread-273614.htm</a></p><h3 id="2022-07-14"><a href="#2022-07-14" class="headerlink" title="2022.07.14"></a>2022.07.14</h3><p>1、棒棒加固分析</p><p><a href="https://bbs.pediy.com/thread-273650.htm">https://bbs.pediy.com/thread-273650.htm</a></p><p>2、AFL 流程原理以及afl-fuzz.c源码解析</p><p><a href="https://bbs.pediy.com/thread-273639.htm">https://bbs.pediy.com/thread-273639.htm</a></p><p>3、MIT 6.S192: Deep Learning for Art, Aesthetics, and Creativity</p><p><a href="https://ali-design.github.io/deepcreativity/">https://ali-design.github.io/deepcreativity/</a></p><h3 id="2022-07-17"><a href="#2022-07-17" class="headerlink" title="2022.07.17"></a>2022.07.17</h3><p>1、今天发现findder不能抓小程序的包了，发现了一个不错的工具可以直接在电脑端抓到包</p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1371328&amp;highlight=HTTP+Debugger+Pro">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1371328&amp;highlight=HTTP%2BDebugger%2BPro</a></p><h3 id="2022-07-18"><a href="#2022-07-18" class="headerlink" title="2022.07.18"></a>2022.07.18</h3><p>1、使用恶意第三方应用程序利用Android漏洞</p><p><a href="https://medium.com/@as3ng/exploiting-android-vulnerabilities-with-malicious-third-party-apps-featuring-oversecured-apk-adea3241ce49">https://medium.com/@as3ng/exploiting-android-vulnerabilities-with-malicious-third-party-apps-featuring-oversecured-apk-adea3241ce49</a></p><p>相关的漏洞靶场案例：<a href="https://github.com/oversecured/ovaa">https://github.com/oversecured/ovaa</a></p><p>2、一个讲解Android漏洞的博客</p><p><a href="https://blog.oversecured.com/">https://blog.oversecured.com/</a></p><p>3、讲解IOS逆向、ROP、还有UAF，总共三篇文章</p><p><a href="https://www.inversecos.com/2022/06/how-to-reverse-engineer-and-patch-ios.html">https://www.inversecos.com/2022/06/how-to-reverse-engineer-and-patch-ios.html</a></p><p><a href="https://www.inversecos.com/2022/06/guide-to-reversing-and-exploiting-ios.html">https://www.inversecos.com/2022/06/guide-to-reversing-and-exploiting-ios.html</a></p><p><a href="https://www.inversecos.com/2022/07/heap-overflows-on-ios-arm64-heap.html">https://www.inversecos.com/2022/07/heap-overflows-on-ios-arm64-heap.html</a></p><p>4、构建第一个LLVM混淆器</p><p><a href="https://polarply.medium.com/build-your-first-llvm-obfuscator-80d16583392b">https://polarply.medium.com/build-your-first-llvm-obfuscator-80d16583392b</a></p><h3 id="2022-07-20"><a href="#2022-07-20" class="headerlink" title="2022.07.20"></a>2022.07.20</h3><p>1、Binary Ninja Personal v3.1.3469</p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1663077">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1663077</a></p><p>2、机器学习书籍推荐</p><p><a href="https://github.com/dair-ai/ML-Notebooks">https://github.com/dair-ai/ML-Notebooks</a></p><p>3、使用符号执行来解决经过tigress混淆的challenge</p><p><a href="https://github.com/0xfuckoff/VM-Challenge">https://github.com/0xfuckoff/VM-Challenge</a></p><p>4、逆向C++的一门开放的课程</p><p><a href="https://p.ost2.fyi/courses/course-v1:OpenSecurityTraining2+RE3011_re_cpp+2022_v1/course/">https://p.ost2.fyi/courses/course-v1:OpenSecurityTraining2+RE3011_re_cpp+2022_v1/course/</a></p><h3 id="2022-07-21"><a href="#2022-07-21" class="headerlink" title="2022.07.21"></a>2022.07.21</h3><p>1、跟我一起学习makefile,非常不错的学习文档</p><p><a href="https://chegva.com/3761.html">https://chegva.com/3761.html</a></p><p>2、Android逆向学习笔记项目</p><p><a href="https://github.com/JnuSimba/AndroidSecNotes">https://github.com/JnuSimba/AndroidSecNotes</a></p><p>3、frida的使用各种脚本收集</p><p><a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a></p><p>4、IOS逆向：美团逆向分析</p><p><a href="https://chenqi.app/Meituan-iOS-Reverse-Engineering/">https://chenqi.app/Meituan-iOS-Reverse-Engineering/</a></p><p>5、一款针对AndroidARThook的框架</p><p><a href="https://github.com/PAGalaxyLab/YAHFA">https://github.com/PAGalaxyLab/YAHFA</a></p><p>6、IOS逆向博客</p><p><a href="https://www.odszz.com/tags/ios/">https://www.odszz.com/tags/ios/</a></p><p>7、CVE-2022-34918 Linux防火墙的一个漏洞</p><p><a href="https://www.randorisec.fr/crack-linux-firewall/">https://www.randorisec.fr/crack-linux-firewall/</a></p><p>8、智能合约以太坊的fuzz</p><p><a href="https://fuzzinglabs.com/wp-content/uploads/2022/07/EthCC5_Fuzzinglabs_State_of_the_Art_of_Ethereum_Smart_Contract_Fuzzing_in_2022.pdf">https://fuzzinglabs.com/wp-content/uploads/2022/07/EthCC5_Fuzzinglabs_State_of_the_Art_of_Ethereum_Smart_Contract_Fuzzing_in_2022.pdf</a></p><p>9、go 语言汇编</p><p><a href="https://github.com/loov/lensm">https://github.com/loov/lensm</a></p><p>10、编写自己的虚拟机</p><p><a href="https://www.jmeiners.com/lc3-vm/">https://www.jmeiners.com/lc3-vm/</a></p><h3 id="2022-07-22"><a href="#2022-07-22" class="headerlink" title="2022.07.22"></a>2022.07.22</h3><p>1、穷人的混淆器</p><p><a href="https://www.romainthomas.fr/publication/22-pst-the-poor-mans-obfuscator/">https://www.romainthomas.fr/publication/22-pst-the-poor-mans-obfuscator/</a></p><p><a href="https://github.com/romainthomas/the-poor-mans-obfuscator">https://github.com/romainthomas/the-poor-mans-obfuscator</a></p><p>2、一个可以用来解析Android OAT、DEX、VDEX、ART并提供友好的API接口</p><p><a href="https://github.com/lief-project/LIEF">https://github.com/lief-project/LIEF</a></p><h3 id="2022-07-25"><a href="#2022-07-25" class="headerlink" title="2022.07.25"></a>2022.07.25</h3><p>1、静态分析C源码的框架</p><p><a href="https://github.com/SVF-tools/SVF">https://github.com/SVF-tools/SVF</a></p><p>2、绕过IOS基于svc 0x80 ptracefan反调试</p><p><a href="https://bbs.pediy.com/thread-273796.htm">https://bbs.pediy.com/thread-273796.htm</a> </p><p>3、机器学习研究主题小卡片，可用来快速过ML知识</p><p><a href="https://github.com/b7leung/MLE-Flashcards">https://github.com/b7leung/MLE-Flashcards</a></p><p>4、ARM汇编书，一位94年博士的讲课笔记</p><p><a href="http://www.rigwit.co.uk/ARMBook/ARMBook.pdf">http://www.rigwit.co.uk/ARMBook/ARMBook.pdf</a></p><p>5、使用完整系统模拟器的逆向工具</p><p><a href="https://github.com/mfthomps/RESim">https://github.com/mfthomps/RESim</a></p><h3 id="2022-07-26"><a href="#2022-07-26" class="headerlink" title="2022.07.26"></a>2022.07.26</h3><p>1、简单的JS逆向配合opencv来过顶象滑块，为哈没有被风控拦截</p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1665936">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1665936</a></p><p>2、使用AFL复现历史CVE</p><p><a href="https://bbs.pediy.com/thread-273810.htm">https://bbs.pediy.com/thread-273810.htm</a></p><h3 id="2022-08-01"><a href="#2022-08-01" class="headerlink" title="2022.08.01"></a>2022.08.01</h3><p>1、Android简单加密壳</p><p><a href="https://bbs.pediy.com/thread-273880.htm">https://bbs.pediy.com/thread-273880.htm</a></p><p>2、flutter安全防护，对抗逆向</p><p><a href="https://bbs.pediy.com/thread-273852.htm">https://bbs.pediy.com/thread-273852.htm</a></p><p>3、IOS游戏抓包和逆向</p><p><a href="https://bbs.pediy.com/thread-273849.htm">https://bbs.pediy.com/thread-273849.htm</a></p><p>4、移动安全攻击面</p><p><a href="https://engineering.mercari.com/en/blog/entry/20220729-the-mobile-attack-surface/">https://engineering.mercari.com/en/blog/entry/20220729-the-mobile-attack-surface/</a></p><p>5、一款好用且免费的hex阅读工具</p><p><a href="https://github.com/WerWolv/ImHex">https://github.com/WerWolv/ImHex</a></p><h3 id="2022-08-02"><a href="#2022-08-02" class="headerlink" title="2022.08.02"></a>2022.08.02</h3><p>1、一篇文章带你读懂 HTTP Smuggling 攻击</p><p><a href="https://blog.zeddyu.info/2019/12/05/HTTP-Smuggling/">https://blog.zeddyu.info/2019/12/05/HTTP-Smuggling/</a></p><p>2、fuzz  js引擎</p><p><a href="https://0xninja.fr/bggp3/">https://0xninja.fr/bggp3/</a></p><p>3、ARM64汇编：数据处理</p><p><a href="https://valsamaras.medium.com/arm-64-assembly-series-data-processing-part-1-b6f6f877c56b">https://valsamaras.medium.com/arm-64-assembly-series-data-processing-part-1-b6f6f877c56b</a></p><h3 id="2022-08-08"><a href="#2022-08-08" class="headerlink" title="2022.08.08"></a>2022.08.08</h3><p>1、Flutter Snapshot(快照文件) 解析器开发(1)-Snapshot的加载</p><p><a href="https://bbs.pediy.com/thread-273923.htm">https://bbs.pediy.com/thread-273923.htm</a></p><p>2、编写一个简单的Linux kernel rootkit</p><p><a href="https://bbs.pediy.com/thread-273962.htm">https://bbs.pediy.com/thread-273962.htm</a></p><p>3、totolink路由器漏洞挖掘</p><p><a href="https://bbs.pediy.com/thread-273945.htm">https://bbs.pediy.com/thread-273945.htm</a></p><p>4、对一个随身WIFI设备的漏洞挖掘尝试</p><p><a href="https://bbs.pediy.com/thread-273940.htm">https://bbs.pediy.com/thread-273940.htm</a></p><p>5、Fuzzing Paper</p><p><a href="https://wcventure.github.io/FuzzingPaper/">https://wcventure.github.io/FuzzingPaper/</a></p><p>6、使用rust编写嵌入式操作系统</p><p><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials">https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials</a></p><p>7、Rust入门文档</p><p><a href="https://bbs.pediy.com/thread-273939.htm">https://bbs.pediy.com/thread-273939.htm</a></p><h3 id="2022-08-09"><a href="#2022-08-09" class="headerlink" title="2022.08.09"></a>2022.08.09</h3><p>1、使用frida来进行fuzz，AFL++开启的Frida_mode模式</p><p><a href="https://github.com/AFLplusplus/AFLplusplus/tree/stable/frida_mode">https://github.com/AFLplusplus/AFLplusplus/tree/stable/frida_mode</a></p><p>2、基于QEMU的符号执行模拟器，没记错好像是挖了一个三星的CVE</p><p><a href="https://www.s3.eurecom.fr/docs/ndss21_symqemu.pdf">https://www.s3.eurecom.fr/docs/ndss21_symqemu.pdf</a></p><p>3、CVE-2022-1215 nday漏洞复现</p><p><a href="https://blog.coffinsec.com/nday/2022/08/04/CVE-2022-1215-libinput-fmt-canary-leak.html">https://blog.coffinsec.com/nday/2022/08/04/CVE-2022-1215-libinput-fmt-canary-leak.html</a></p><p>4、CVE-2022-29582漏洞分析</p><p><a href="https://ruia-ruia.github.io/2022/08/05/CVE-2022-29582-io-uring/">https://ruia-ruia.github.io/2022/08/05/CVE-2022-29582-io-uring/</a></p><h3 id="2022-08-15"><a href="#2022-08-15" class="headerlink" title="2022.08.15"></a>2022.08.15</h3><p>1、数美滑块</p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1674986">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1674986</a></p><p>2、二进制修改打包软件</p><p><a href="https://github.com/redballoonsecurity/ofrak">https://github.com/redballoonsecurity/ofrak</a></p><p>3、完全docker化的Linux kernel 调试器</p><p><a href="https://github.com/0xricksanchez/like-dbg">https://github.com/0xricksanchez/like-dbg</a></p><p>4、车联网安全，车联网渗透</p><p><a href="https://programmingwithstyle.com/">https://programmingwithstyle.com/</a></p><p>5、使用等饱和度改进MBA反混淆</p><p><a href="https://secret.club/2022/08/08/eqsat-oracle-synthesis.html">https://secret.club/2022/08/08/eqsat-oracle-synthesis.html</a></p><h3 id="2022-08-22"><a href="#2022-08-22" class="headerlink" title="2022.08.22"></a>2022.08.22</h3><p>1、Android 10属性系统原理,检测与定制源码反检测</p><p><a href="https://bbs.pediy.com/thread-274100.htm">https://bbs.pediy.com/thread-274100.htm</a></p><p>2、使用Frida来拦截flutter stl应用流量</p><p><a href="https://blog.nviso.eu/2022/08/18/intercept-flutter-traffic-on-ios-and-android-http-https-dio-pinning/">https://blog.nviso.eu/2022/08/18/intercept-flutter-traffic-on-ios-and-android-http-https-dio-pinning/</a></p><p>3、一个研究hypervisor的教程</p><p><a href="https://github.com/SinaKarvandi/Hypervisor-From-Scratch">https://github.com/SinaKarvandi/Hypervisor-From-Scratch</a></p><p>4、Docker for Codeql</p><p><a href="https://github.com/j3ssie/codeql-docker">https://github.com/j3ssie/codeql-docker</a></p><h3 id="2022-08-31"><a href="#2022-08-31" class="headerlink" title="2022.08.31"></a>2022.08.31</h3><p>1、SingPass RASP 分析，一个IOSapp 分析，带有一定的混淆</p><p><a href="https://www.romainthomas.fr/post/22-08-singpass-rasp-analysis/">https://www.romainthomas.fr/post/22-08-singpass-rasp-analysis/</a></p><p>2、Gridra 的python支持</p><p><a href="https://github.com/mandiant/Ghidrathon">https://github.com/mandiant/Ghidrathon</a></p><p>3、Linksys E1200 路由器的缓冲区溢出漏洞</p><p><a href="https://github.com/xxy1126/Vuln/tree/main/1">https://github.com/xxy1126/Vuln/tree/main/1</a></p><p>4、pwn.college</p><p><a href="https://www.youtube.com/watch?v=o_kSgUPJk4c">https://www.youtube.com/watch?v=o_kSgUPJk4c</a></p><h3 id="2022-09-05"><a href="#2022-09-05" class="headerlink" title="2022.09.05"></a>2022.09.05</h3><p>1、tiktok app 漏洞分析</p><p><a href="https://www.microsoft.com/security/blog/2022/08/31/vulnerability-in-tiktok-android-app-could-lead-to-one-click-account-hijacking/">https://www.microsoft.com/security/blog/2022/08/31/vulnerability-in-tiktok-android-app-could-lead-to-one-click-account-hijacking/</a></p><p>2、CVE-2022-32250 UAF in nf_ables</p><p><a href="https://research.nccgroup.com/2022/09/01/settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250/">https://research.nccgroup.com/2022/09/01/settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250/</a></p><p>3、 Looking for Remote Code Execution bugs in the Linux kernel  fuzz</p><p><a href="https://xairy.io/articles/syzkaller-external-network">https://xairy.io/articles/syzkaller-external-network</a></p><p>4、LLVM pass pwn 总结</p><p><a href="https://bbs.pediy.com/thread-274259.htm">https://bbs.pediy.com/thread-274259.htm</a></p><p>5、某通VPN逆向破解</p><p><a href="https://bbs.pediy.com/thread-274253.htm">https://bbs.pediy.com/thread-274253.htm</a></p><p>6、讲解xss、csrf原理的演讲</p><p><a href="https://speakerdeck.com/aszx87410/front-end-security-that-front-end-developers-dont-know">https://speakerdeck.com/aszx87410/front-end-security-that-front-end-developers-dont-know</a></p><h3 id="2022-09-13"><a href="#2022-09-13" class="headerlink" title="2022.09.13"></a>2022.09.13</h3><p>1、unidbg 调用 sgmain.so的<strong>doCommandNative生成encryptR_client参数</strong></p><p><a href="https://www.52pojie.cn/thread-1680816-1-1.html">https://www.52pojie.cn/thread-1680816-1-1.html</a></p><p>2、CMU的NLP课程</p><p><a href="https://phontron.com/class/anlp2022/index.html">https://phontron.com/class/anlp2022/index.html</a></p><p>3、snapfuzz 一个网络fuzz框架</p><p><a href="https://github.com/srg-imperial/SnapFuzz/">https://github.com/srg-imperial/SnapFuzz/</a></p><p>4、silifuzz 一个CPU fuzz框架</p><p><a href="https://github.com/google/silifuzz">https://github.com/google/silifuzz</a></p><p>5、firecracker一款开源的虚拟化技术方案，能够支持在ARM64下进行运行，基于KVM</p><p><a href="https://github.com/firecracker-microvm/firecracker">https://github.com/firecracker-microvm/firecracker</a></p><p>6、攻击fireceacker ：用 Rust 编写的 AWS 的 microVM 监视器</p><p><a href="https://www.graplsecurity.com/post/attacking-firecracker">https://www.graplsecurity.com/post/attacking-firecracker</a></p><h3 id="2022-10-08"><a href="#2022-10-08" class="headerlink" title="2022.10.08"></a>2022.10.08</h3><p>没想到这么久都没开始看这块内容了，感觉最近没找到计较适合的学习文章。</p><p>1、fuzz 学习 30天</p><p><a href="https://github.com/u1f383/fuzzing-learning-in-30-days">https://github.com/u1f383/fuzzing-learning-in-30-days</a></p><p>2、sandhook 研究</p><p><a href="https://tugohost.github.io/2021/09/09/%E7%A0%94%E7%A9%B6SandHook/">https://tugohost.github.io/2021/09/09/%E7%A0%94%E7%A9%B6SandHook/</a></p><p>3、定制bcc/ebpf在android平台上实现基于dwarf的用户态栈回溯</p><p><a href="https://bbs.pediy.com/thread-274546.htm">https://bbs.pediy.com/thread-274546.htm</a></p><p>4、ollvm混淆与反混淆</p><p><a href="https://bbs.pediy.com/thread-274532.htm">https://bbs.pediy.com/thread-274532.htm</a></p><p>5、Lsposed技术原理探讨和安装使用</p><p><a href="https://bbs.pediy.com/thread-274572.htm">https://bbs.pediy.com/thread-274572.htm</a></p><p>6、画图表的工具</p><p><a href="https://github.com/shubhamgrg04/awesome-diagramming">https://github.com/shubhamgrg04/awesome-diagramming</a></p><p>7、破解TMNF</p><p><a href="https://blog.bricked.tech/posts/tmnf/part1/">https://blog.bricked.tech/posts/tmnf/part1/</a></p><p><a href="https://blog.bricked.tech/posts/tmnf/part2/">https://blog.bricked.tech/posts/tmnf/part2/</a></p><p>8、radare2的可视化界面版本</p><p><a href="https://github.com/radareorg/iaito">https://github.com/radareorg/iaito</a></p><p>9、恶意软件开发合集</p><p><a href="https://0xpat.github.io/">https://0xpat.github.io/</a></p><p>10、浏览器中的x86虚拟化</p><p><a href="https://github.com/copy/v86">https://github.com/copy/v86</a></p><p>11、能将shellcode注入但是不改变应用的md5值</p><p><a href="https://github.com/DavidBuchanan314/monomorph">https://github.com/DavidBuchanan314/monomorph</a></p><p>12、DNS reaper 子域名挖掘机</p><p><a href="https://github.com/punk-security/dnsReaper">https://github.com/punk-security/dnsReaper</a></p><p>13、控制流展开之旅</p><p><a href="https://eshard.com/posts/D810-a-journey-into-control-flow-unflattening">https://eshard.com/posts/D810-a-journey-into-control-flow-unflattening</a></p><p>14、piexl6 漏洞挖掘分析</p><p><a href="https://eshard.com/posts/pixel6_bootloader">https://eshard.com/posts/pixel6_bootloader</a></p><p><a href="https://eshard.com/posts/pixel6bootloader-2">https://eshard.com/posts/pixel6bootloader-2</a></p><p>15、IOS应用混淆之旅</p><p><a href="https://www.romainthomas.fr/post/22-08-ios-obfuscation/">https://www.romainthomas.fr/post/22-08-ios-obfuscation/</a></p><p>16、fuzzable 静态分析模糊测试框架</p><p><a href="https://github.com/ex0dus-0x/fuzzable">https://github.com/ex0dus-0x/fuzzable</a></p><p>17、http 的fuzz 工具</p><p><a href="https://github.com/epi052/feroxfuzz">https://github.com/epi052/feroxfuzz</a></p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>名校课程学习指南</title>
    <link href="/2022/09/05/%E5%90%8D%E6%A0%A1%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <url>/2022/09/05/%E5%90%8D%E6%A0%A1%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>！！！详细内容请直接访问语雀文档：</strong></p><p><a href="https://www.yuque.com/docs/share/9f2e6bb6-2d2a-46f8-9a69-376963e96a45#">https://www.yuque.com/docs/share/9f2e6bb6-2d2a-46f8-9a69-376963e96a45?#</a> 《名校课程学习指南》</p><p>该项目主要用来记录名校课程的学习指南，发现国内外名校的资源确实非常的不错，能够从中学习到很多很有意思的知识点。国内对计算机的开源程度也是越来越开放，涌现了大量非常不错的课程内容。</p><p>目前只收集国内外大学课程，不收录培训班的课程</p><p>参考资源</p><blockquote><p>1、CS自学指南：<a href="https://csdiy.wiki/">https://csdiy.wiki/</a></p><p>2、漏洞挖掘指南：<a href="https://www.theseus.top/2021/12/24/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8C%87%E5%8D%97/">https://www.theseus.top/2021/12/24/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8C%87%E5%8D%97/</a></p></blockquote><p>为了能够更加好的利用这些资源，在这里对这些内容进行汇总，同时也是对自己的一种计划。希望能够将这项目推动下去，能够坚持的写笔记，成体系的去学习感兴趣的计算机课程。</p><p><strong>为了能够及时的获取到更新的内容，这里采用语雀文档来进行更新。</strong></p><p><a href="https://www.yuque.com/docs/share/9f2e6bb6-2d2a-46f8-9a69-376963e96a45#">https://www.yuque.com/docs/share/9f2e6bb6-2d2a-46f8-9a69-376963e96a45?#</a> 《名校课程学习指南》</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>我相信还有很多优秀的课程可以学习，当然上图中的这些课程也仅仅是一家之言，并不一定适合所有人，如果你有更加好的课程，可以在评论中告诉我或者直接联系我也是ok，我们共同努力完善该内容。</p>]]></content>
    
    
    <categories>
      
      <category>CS学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>Android安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对大学四年的总结</title>
    <link href="/2022/06/13/%E5%AF%B9%E5%A4%A7%E5%AD%A6%E5%9B%9B%E5%B9%B4%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2022/06/13/%E5%AF%B9%E5%A4%A7%E5%AD%A6%E5%9B%9B%E5%B9%B4%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大学四年匆匆而过，我相信本科四年应该是很多人难以忘怀的时光，因为这是一条从校园踏入社会分水岭。有些人带着高中时候的梦想、带着进入这所大学的不甘毅然决然的选择考研，我很敬佩这些人，有着对梦想追逐的勇气，有着明确的人生目标。同样有些人坚定踏入社会，进入企业或者体制内，这些人也是值得敬佩，水流终入大海。当然还会存在一部分人是受挫之人，考研或者保研落榜，工作未定，这部分人我想也同样值得尊敬，至少都为之拼搏过。</p><p>PS：由于在看了南京大学李樾老师的课程之后，我想我还是记录一下我的大学，希望能够对学弟学妹们有一点鼓舞吧。</p><p>课程地址：《<a href="https://www.bilibili.com/video/BV1uR4y167pA/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&vd_source=0c2e3bdd58a415cb8c7419923bf45050">大学除了学习专业知识，我们还应该学习什么</a>》</p><p>这里我记录一下李樾老师对大学除了专业知识，还应该学习什么的总结：</p><p>1、汲取知识并化为己用的能力</p><p>2、面对困难压力迷茫时，有积极应对的态度和勇气</p><p>3、理解他人、包容他人、博爱之心</p><p>4、学会原谅自己、爱自己</p><p>5、be different，be the one</p><p>知难而进，贵在坚持；省察体悟，贵在改过。</p><p><img src="https://cdn.jsdelivr.net/gh/These-us/PIC@master/uPic/image-20221219223316100.png" alt="image-20221219223316100"></p><h3 id="第一章-大一"><a href="#第一章-大一" class="headerlink" title="第一章 大一"></a>第一章 大一</h3><p>用时间的顺序来记录这个故事获取会更加的有意义，同时也能够更好的讲清楚整个来龙去脉。大一进入的专业是志愿填报的第一个专业，而最后毕业的专业是志愿填报的第二个专业。是的没错，在大学我从软件工程专业转向了信息安全专业。</p><p>和大多数人一样，我是在进入大学才开始接触计算机的，也会在大学才开始拥有自己的电脑。大一的课程应该全国都挺类似的，高数线代等基础学科，专业课我记得就只有C语言程序设计。软件工程专业事先也是有所了解，在填报志愿后也去了解了相关专业的就业方向，所以对该专业接下来需要学习的内容是有大致的方向。很多大学的计算机类专业课都会从C语言开始学习，可能当时并不是很理解为什么需要从这门在今后工作很少用到的编程语言学起，不过后来我很感谢学习了这门编程语言，给我后来的很多学习提供了比较不错的编程思想。</p><h4 id="专业课如何学习呢？"><a href="#专业课如何学习呢？" class="headerlink" title="专业课如何学习呢？"></a>专业课如何学习呢？</h4><p>大一我能接触到最多的专业课就是《C语言程序设计》，很多高校都会采用谭浩强的《C程序设计教程》，我个人是不太喜欢这本教程书的，总觉得这本书内容讲解得过于细致但又没有体现出编程思维，从C语言入门计算机，给最大的好处就是让我明白什么是编程，怎么实现编程，相比Java、Python更加底层的角度来讲解编程思想，这是给我最大的收益。</p><p>机缘巧合之下，我发现了一门比较不错的课程：浙江大学翁凯老师的《程序设计入门》，翁凯老师能够由浅入深、循序渐进的给你讲解C语言的各种语法，并且是引发式的带动你去学习C语言。看完老师的课程，有种醍醐灌顶之感，也是因为这门课让我喜欢上了编程。大一期间，在专业课上我总是领先于课堂的学习，很早便完成了大一C语言学分所要求的知识点。</p><h4 id="在学习专业课之余做了什么？"><a href="#在学习专业课之余做了什么？" class="headerlink" title="在学习专业课之余做了什么？"></a>在学习专业课之余做了什么？</h4><p>实际上对我来讲，进入大学学习，最重要的是能够找到自己热爱并且自己擅长的方向进行学习。大学不同于高中，在大学里最忌讳的便是随波逐流和缺乏职业规划。大一我游荡在不同学院的实验室招新宣讲中，去过控制学院学习单片机、去过网安学院学习CTF、去过ACM训练营学习算法。第一次在控制学院自己动手做了一个手控灯（为我后面实习提供勇气）；打过一场校级的ACM比赛（没啥成绩），玩了一下校内CTF萌新赛（很菜）。除了学习之外，还参加了志愿者活动、辩论赛。现在回顾起来，这些经历在今后的实习过程中都是有所帮助的，学焊接，在我第一段实习过程中接触到了，辩论赛的临场发挥能力，在我面对业界大佬面试过程得到的帮助，同时也让我后来能够拿下offer打下基础。CTF比赛成为了我大学生涯参与最多的比赛，ACM尽管后面没有参与，但是跟着学长学习了ACM算法知识，在后续编码过程中提供了很不错的灵感。</p><p>在我看来，大一最重要的还是寻找到<strong>自己最感兴趣，最想学习的东西</strong>（啊哈哈，前提是转专业相比较容易），学习下去。</p><h4 id="转折"><a href="#转折" class="headerlink" title="转折"></a>转折</h4><p>经历了半学期的游荡，也对专业的未来就业情况做了比以往更加深入的调研。基于之前对校内各个专业实验室的了解，原本并未打算换专业，无奈本专业实验室大多数都是老师带队，很少有学生自主领导。机缘巧合之下，了解到网安有学生自己的实验室，并且在开放招生，学长手把手教网安知识。经过层层选拔，成功加入实验室并且有自己独立的学习空间和一群志同道合的伙伴。（实际上能够加入并不是我当时能力出众，而是当时能坚持下来的人太少，所以我进了）</p><p>大一下主要的目标就是空闲之余学习如何打比赛、定研究方向。实际上在选择方向过程中，完全是凭借着兴趣爱好，当时对病毒、游戏外挂还有破解非常感兴趣，觉得听炫酷的一件事，于是就入门了二进制安全。至于如何学习二进制安全，可以参考我其他的博文，大一阶段主要还是学习常见的分析工具和基础入门书籍。</p><h3 id="第二章-大二"><a href="#第二章-大二" class="headerlink" title="第二章 大二"></a>第二章 大二</h3><p>经历了转专业之后，除了要比原专业的同学补修大一未修的学分外，平时关注最多的便是打比赛，尽管个人并不是很喜欢CTF比赛，但是也随着团队走过很多场比赛。个人不喜欢CTF比赛的原因有如下几点：</p><p>1、大型比赛往往都是几十人群战模式，对于单兵作战的不是很合适；</p><p>2、国内部分CTF比赛逐渐娱乐化，氛围不再是纯技术PK；</p><p>3、我想学习的方向在CTF比赛过程并不占优势。</p><p>基于这些原因，我更多的是关注在技术的本身，大二上学习开始面试病毒分析岗位（360），从面试过程中进行查漏补缺，记得当时还做过一个比较简单的记录（<a href="https://www.yuque.com/theseus/vr1cie/mm2gg4%EF%BC%89%EF%BC%8C%E5%BE%88%E9%81%97%E6%86%BE%EF%BC%8C%E4%B8%80%E9%9D%A2%E5%B0%B1%E4%BB%A5%E5%A4%B1%E8%B4%A5%E5%91%8A%E7%BB%88%E3%80%82%E4%B8%8D%E8%BF%87%E8%BF%99%E6%AC%A1%E9%9D%A2%E8%AF%95%E8%AE%A9%E6%88%91%E5%AD%A6%E5%88%B0%E4%BA%86%E5%BE%88%E5%A4%9A%E4%B8%9C%E8%A5%BF%EF%BC%8C%E7%AE%97%E6%98%AF%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%A6%E9%9D%A2%E8%AF%95%EF%BC%8C%E9%9D%A2%E8%AF%95%E5%AE%98%E5%BE%88%E8%B4%9F%E8%B4%A3%EF%BC%8C%E5%9C%A8%E9%9D%A2%E8%AF%95%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%8F%90%E5%88%B0%E4%BA%86%E5%BE%88%E5%A4%9A%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E5%B2%97%E4%BD%8D%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E8%83%BD%EF%BC%8C%E8%AE%A9%E6%88%91%E5%8F%97%E7%9B%8A%E5%8C%AA%E6%B5%85%E3%80%82%E4%BB%8E%E6%95%B4%E4%B8%AA%E5%A4%A7%E5%AD%A6%E5%88%B0%E6%9C%80%E5%90%8E%E7%9A%84%E7%A7%8B%E6%8B%9B%EF%BC%8C%E6%88%91%E4%B8%AA%E4%BA%BA%E8%AE%A4%E4%B8%BA%E5%A4%9A%E9%9D%A2%E8%AF%95%E6%9C%89%E9%9D%9E%E5%B8%B8%E5%A4%A7%E7%9A%84%E5%A5%BD%E5%A4%84%EF%BC%8C%E5%8E%9F%E5%9B%A0%E5%A6%82%E4%B8%8B%EF%BC%9A">https://www.yuque.com/theseus/vr1cie/mm2gg4），很遗憾，一面就以失败告终。不过这次面试让我学到了很多东西，算是人生中第一次接触面试，面试官很负责，在面试过程中提到了很多关于这个岗位需要用到的技能，让我受益匪浅。从整个大学到最后的秋招，我个人认为多面试有非常大的好处，原因如下：</a></p><p>1、尽可能早的面试，能够让你了解到这个行业这个岗位所需要的能力</p><p>2、能够锻炼人沟通能力和临场发挥能力</p><p>3、能够积累尽可能多的面试经验、面试技巧</p><h4 id="又一次转折"><a href="#又一次转折" class="headerlink" title="又一次转折"></a>又一次转折</h4><p>面试失败之后，明白自身还有很多技能需要学习，非常幸运的是学长们邀请我参与作品开发赛，开发一个完整的产品出来，这是非常有趣的也是非常重要的。<strong>学习网络安全不仅仅是需要学习网络安全知识，也是需要有扎实的编程功底和开发能力。</strong>同学长们一起做产品设计、项目规划，写项目书并分工进行开发，实际上在当时我从来没有做过开发工作，跟着一起边学边做，解决项目中的bug，最终完成整个比赛，整个开发周期长达4个月之久，其中还面临着开发组中的学长准备毕业设计，最终拿下全国二等奖。</p><p>为什么会把这次作为一个转折呢，是因为后续拿到各个大厂Offer都离不开这个项目经验，这个项目也存放在我的简历中，并且在后续的每一次面试过程中都会被问到，也正是因为这个项目，在大二下学期顺利拿到了腾讯的实习Offer。</p><h4 id="平时如何平衡比赛和校内学习呢？"><a href="#平时如何平衡比赛和校内学习呢？" class="headerlink" title="平时如何平衡比赛和校内学习呢？"></a>平时如何平衡比赛和校内学习呢？</h4><p>在这一年，第一次外出打比赛是全体飞往广州，参加网络安全线下赛并且拿下比较不错的成绩。一周之内飞往三个城市进行比赛，由于经费有限，机场过夜比较正常但又非常开心。</p><img src="https://cdn.jsdelivr.net/gh/These-us/PIC@master/uPic/IMG_BD9356782F35-1.jpeg" alt="IMG_BD9356782F35-1" style="zoom: 25%;" /><img src="https://cdn.jsdelivr.net/gh/These-us/PIC@master/uPic/image-20230107155526844.png" alt="image-20230107155526844" style="zoom: 25%;" />]]></content>
    
    
    <categories>
      
      <category>人生与成长</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活记录</tag>
      
      <tag>年度总结</tag>
      
      <tag>职业规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日checklist（2.20-4.26）</title>
    <link href="/2022/05/12/%E6%AF%8F%E6%97%A5checklist%EF%BC%882.20-4.26%EF%BC%89/"/>
    <url>/2022/05/12/%E6%AF%8F%E6%97%A5checklist%EF%BC%882.20-4.26%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="2022-02-20"><a href="#2022-02-20" class="headerlink" title="2022.02.20"></a>2022.02.20</h3><p>已经入职字节三天啦，差不多算是投入又一段工作之中，所以就干脆划分了一个新的文档来记录每天看到的有意思的知识点。</p><p>1、吾爱破解 2022 春节红包题目的题解</p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1588907">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1588907</a></p><p>2、学习GNN的一个学习计划路径</p><p><a href="https://github.com/dair-ai/GNNs-Recipe">https://github.com/dair-ai/GNNs-Recipe</a></p><p>3、rust fuzz相关的教程</p><p><a href="https://rust-fuzz.github.io/book/introduction.html">https://rust-fuzz.github.io/book/introduction.html</a></p><p>4、WIFI Security: From 0 To 1 - Sili Luo</p><p><a href="https://www.youtube.com/watch?v=MIbPKLq2AYQ">https://www.youtube.com/watch?v=MIbPKLq2AYQ</a></p><p>5、Awesome Executable Packing 讲解可执行文件的包</p><p><a href="https://github.com/dhondta/awesome-executable-packing">https://github.com/dhondta/awesome-executable-packing</a></p><p>6、一个关于pwn的（exploiting binary files）的课程</p><p><a href="https://github.com/rosehgal/BinExp">https://github.com/rosehgal/BinExp</a></p><p>7、Android加壳脱壳学习——动态加载和类加载机制详解</p><p><a href="https://bbs.pediy.com/thread-271538.htm">https://bbs.pediy.com/thread-271538.htm</a></p><p>8、exploiting CVE-2019-2215</p><p><a href="https://cutesmilee.github.io/kernel/linux/android/2022/02/17/cve-2019-2215_writeup.html">https://cutesmilee.github.io/kernel/linux/android/2022/02/17/cve-2019-2215_writeup.html</a></p><p>9、简单完善了arm64 ollvm去混淆机制</p><p><a href="https://bbs.pediy.com/thread-271557.htm">https://bbs.pediy.com/thread-271557.htm</a></p><p>10、通过抖音学习QUIC协议</p><p><a href="https://bbs.pediy.com/thread-271566.htm">https://bbs.pediy.com/thread-271566.htm</a></p><p>11、快手sig3 48位算法逆向分析</p><p><a href="https://bbs.pediy.com/thread-271489.htm">https://bbs.pediy.com/thread-271489.htm</a></p><h3 id="2022-02-21"><a href="#2022-02-21" class="headerlink" title="2022.02.21"></a>2022.02.21</h3><p>1、线性的MBA混淆的LLVM pass</p><p><a href="https://bbs.pediy.com/thread-271574.htm">https://bbs.pediy.com/thread-271574.htm</a></p><p>2、BeaconFuzz，关于区块链的fuzz</p><p><a href="https://fuzzinglabs.com/wp-content/uploads/2022/02/Beaconfuzz_OffensiveCon2022_patrick_ventuzelo.pdf">https://fuzzinglabs.com/wp-content/uploads/2022/02/Beaconfuzz_OffensiveCon2022_patrick_ventuzelo.pdf</a></p><h3 id="2022-02-25"><a href="#2022-02-25" class="headerlink" title="2022.02.25"></a>2022.02.25</h3><p>1、深度剖析ja3指纹及突破</p><p><a href="https://mp.weixin.qq.com/s/-i730kN_f5sIvh6kj7k5JQ">https://mp.weixin.qq.com/s/-i730kN_f5sIvh6kj7k5JQ</a></p><p>2、一个非常不错的Android逆向｜JS逆向的实战博客</p><p><a href="https://www.qinless.com/all">https://www.qinless.com/all</a></p><p>3、Android奇艺技巧系列的博客，是非常不错的学android逆向的博客</p><p><a href="https://www.cnblogs.com/theseventhson/p/">https://www.cnblogs.com/theseventhson/p/</a></p><p>4、头条系列使用的开源的网络协议框架的wiki</p><p><a href="https://github.com/hanpfei/chromium-net/wiki">https://github.com/hanpfei/chromium-net/wiki</a></p><h3 id="2022-03-06"><a href="#2022-03-06" class="headerlink" title="2022.03.06"></a>2022.03.06</h3><p>1、一款基于LLVM的混淆工具</p><p><a href="https://github.com/bluesadi/Pluto-Obfuscator">https://github.com/bluesadi/Pluto-Obfuscator</a></p><p>2、对AFL的讲解论文</p><p><a href="https://www.s3.eurecom.fr/docs/fuzzing22_fioraldi_report.pdf">https://www.s3.eurecom.fr/docs/fuzzing22_fioraldi_report.pdf</a></p><p>3、Reverse Engineering a Street Fighter Two Cabinet，关于IOT的逆向</p><p><a href="https://wrongbaud.github.io/sf-slides/#1">https://wrongbaud.github.io/sf-slides/#1</a></p><h3 id="2022-03-09"><a href="#2022-03-09" class="headerlink" title="2022.03.09"></a>2022.03.09</h3><p>1、一个cs video的清单</p><p><a href="https://github.com/Developer-Y/cs-video-courses">https://github.com/Developer-Y/cs-video-courses</a></p><h3 id="2022-03-16"><a href="#2022-03-16" class="headerlink" title="2022.03.16"></a>2022.03.16</h3><p>1、基于llvm的变量轮转混淆pass实现</p><p><a href="https://bbs.pediy.com/thread-271867.htm">https://bbs.pediy.com/thread-271867.htm</a></p><p>2、angr符号转LLVM-IR</p><p><a href="https://bbs.pediy.com/thread-271866.htm">https://bbs.pediy.com/thread-271866.htm</a></p><p>3、对蛋蛋模拟器的分析（7.7版本）so解密、vmp还原</p><p><a href="https://bbs.pediy.com/thread-271879.htm">https://bbs.pediy.com/thread-271879.htm</a></p><p>4、一个通用了Android SVC跟踪以及hook方案——Frida-Seccomp</p><p><a href="https://bbs.pediy.com/thread-271815.htm">https://bbs.pediy.com/thread-271815.htm</a></p><p>5、一款IDA插件来发掘漏洞——VulFi</p><p><a href="https://github.com/Accenture/VulFi">https://github.com/Accenture/VulFi</a></p><p>6、mathematic for mamachine Learning PDF</p><p><a href="https://mml-book.github.io/book/mml-book.pdf">https://mml-book.github.io/book/mml-book.pdf</a></p><p>7、Arbiter: Bridging the Static and Dynamic Divide in Vulnerability Discovery on Binary Programs</p><p><a href="https://www.s3.eurecom.fr/docs/usenixsec22_arbiter.pdf">https://www.s3.eurecom.fr/docs/usenixsec22_arbiter.pdf</a></p><p><a href="https://mp.weixin.qq.com/s/DZ2Nd5sIjWOuAGwLzBEQGQ">https://mp.weixin.qq.com/s/DZ2Nd5sIjWOuAGwLzBEQGQ</a></p><p>8、理解系统调用流程</p><p><a href="https://de-engineer.github.io/Understanding-booting-process-and-writing-own-os/">Understanding the booting process of a computer and trying to write own operating system.</a></p><p>9、IOS hacking：A guide to hacking IOS’s APP</p><p><a href="https://martabyte.github.io/ios/hacking/2022/03/13/ios-hacking-en.html">https://martabyte.github.io/ios/hacking/2022/03/13/ios-hacking-en.html</a></p><p>10、introduction to Deep Learning MIT s191</p><p><a href="http://introtodeeplearning.com/">http://introtodeeplearning.com/</a></p><p>11、fuzz Arm and mips binary using QEMU mode with AFL++</p><p><a href="https://www.youtube.com/watch?v=0iyviukkANY">https://www.youtube.com/watch?v=0iyviukkANY</a></p><h3 id="2022-03-22"><a href="#2022-03-22" class="headerlink" title="2022.03.22"></a>2022.03.22</h3><p>1、一款关于LLVM相关的项目搜集文档</p><p><a href="https://github.com/These-us/awesome-llvm-security">https://github.com/These-us/awesome-llvm-security</a></p><p>2、Linux-kernel-wiki 一个总结的不错的项目</p><p><a href="https://github.com/0voice/linux_kernel_wiki">https://github.com/0voice/linux_kernel_wiki</a></p><h3 id="2022-03-24"><a href="#2022-03-24" class="headerlink" title="2022.03.24"></a>2022.03.24</h3><p>1、piexl6 root exp工具</p><p><a href="https://github.com/polygraphene/DirtyPipe-Android">https://github.com/polygraphene/DirtyPipe-Android</a></p><p>2、一款IDA 插件来去除ollvm混淆</p><p><a href="https://github.com/obpo-project/obpo-plugin">https://github.com/obpo-project/obpo-plugin</a></p><p>3、关于deeplearning最新的课程</p><p><a href="https://github.com/dair-ai/ML-Course-Notes">https://github.com/dair-ai/ML-Course-Notes</a></p><p>4、关于 anti-frida 和 anti-hook</p><p><a href="https://github.com/apkunpacker/Frida-Detection">https://github.com/apkunpacker/Frida-Detection</a></p><p>5、codeql学习资源</p><p><a href="https://github.com/ASTTeam/CodeQL#01-CodeQL%E8%B5%84%E6%BA%90">https://github.com/ASTTeam/CodeQL#01-CodeQL%E8%B5%84%E6%BA%90</a></p><h3 id="2022-03-26"><a href="#2022-03-26" class="headerlink" title="2022.03.26"></a>2022.03.26</h3><p>1、算法还原文章开源</p><p><a href="https://github.com/YotaGit/AlgorithmRestore">https://github.com/YotaGit/AlgorithmRestore</a></p><p>2、一款工具ebuf +hook实现免证书抓包</p><p><a href="https://github.com/ehids/ecapture">https://github.com/ehids/ecapture</a></p><h3 id="2022-03-28"><a href="#2022-03-28" class="headerlink" title="2022.03.28"></a>2022.03.28</h3><p>1、对flutter开发的某APP逆向分析</p><p><a href="https://mp.weixin.qq.com/s/pXpfXK-Ez0n70f3bqFuuFg">https://mp.weixin.qq.com/s/pXpfXK-Ez0n70f3bqFuuFg</a></p><p>对应的APP:tech.echoing.kuril</p><h3 id="2022-03-29"><a href="#2022-03-29" class="headerlink" title="2022.03.29"></a>2022.03.29</h3><p>1、android so 文件解析</p><p><a href="https://bbs.pediy.com/thread-272077.htm">https://bbs.pediy.com/thread-272077.htm</a></p><h3 id="2022-03-31"><a href="#2022-03-31" class="headerlink" title="2022.03.31"></a>2022.03.31</h3><p>1、一个专注于LLVM安全的一个博客</p><p><a href="https://maskray.me/blog/">https://maskray.me/blog/</a></p><p>2、一个针对android保护的一个演讲，主要是去讲解如何绕过对逆向工具的检测</p><p><a href="https://github.com/FrenchYeti/unrasp/blob/main/Slides/Forging_golden_hammer_against_android_app_protections_INSO22_FINAL.pdf">https://github.com/FrenchYeti/unrasp/blob/main/Slides/Forging_golden_hammer_against_android_app_protections_INSO22_FINAL.pdf</a></p><p>3、CTF中Linux内核态漏洞挖掘与利用</p><p><a href="https://www.anquanke.com/post/id/270917">https://www.anquanke.com/post/id/270917</a></p><p>4、京东算法分析</p><p><a href="https://bbs.pediy.com/thread-272100.htm">https://bbs.pediy.com/thread-272100.htm</a></p><p>5、CTF中glibc堆利用及IO_FILE总结</p><p><a href="https://bbs.pediy.com/thread-272098.htm">https://bbs.pediy.com/thread-272098.htm</a></p><h3 id="2022-04-02"><a href="#2022-04-02" class="headerlink" title="2022.04.02"></a>2022.04.02</h3><p>1、angr来对抗控制流混淆</p><p>[<a href="https://research.openanalysis.net/angr/symbolic%20execution/deobfuscation/research/2022/03/26/angr_notes.html]">https://research.openanalysis.net/angr/symbolic%20execution/deobfuscation/research/2022/03/26/angr_notes.html]</a>(<a href="https://research.openanalysis.net/angr/symbolic">https://research.openanalysis.net/angr/symbolic</a> execution/deobfuscation/research/2022/03/26/angr_notes.html)</p><p>2、基于符号执行的漏洞挖掘</p><p><a href="https://docs.google.com/presentation/d/1E3uE-4mYpenw0s40rtMbIdxj3fJgC79aHCeiIlJSY5Y/edit#slide=id.g114834d1ad4_1_727">https://docs.google.com/presentation/d/1E3uE-4mYpenw0s40rtMbIdxj3fJgC79aHCeiIlJSY5Y/edit#slide=id.g114834d1ad4_1_727</a></p><h3 id="2022-04-03"><a href="#2022-04-03" class="headerlink" title="2022.04.03"></a>2022.04.03</h3><p>1、一个爬取安全圈大佬们的榜单</p><p><a href="https://github.com/firmianay/SecurityDalao">https://github.com/firmianay/SecurityDalao</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2022-04-05"><a href="#2022-04-05" class="headerlink" title="2022.04.05"></a>2022.04.05</h3><p>1、一个学习go语言的开源书籍</p><p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md</a></p><p>2、App逆向百例</p><p><a href="https://mp.weixin.qq.com/mp/homepage?__biz=MzUxMjU3ODc1MA==&amp;hid=4&amp;sn=9ecf0ec80803784b36319cc6747d1f6a&amp;scene=18#wechat_redirect">https://mp.weixin.qq.com/mp/homepage?__biz=MzUxMjU3ODc1MA==&amp;hid=4&amp;sn=9ecf0ec80803784b36319cc6747d1f6a&amp;scene=18#wechat_redirect</a></p><h3 id="2022-04-06"><a href="#2022-04-06" class="headerlink" title="2022.04.06"></a>2022.04.06</h3><p>1、Android native hook讲解：got、inline hook</p><p><a href="https://blog.csdn.net/spinchao/article/details/108300557">https://blog.csdn.net/spinchao/article/details/108300557</a></p><p>2、知乎分析</p><p><a href="https://bbs.pediy.com/thread-272184.htm">https://bbs.pediy.com/thread-272184.htm</a></p><p>3、能够直接运行Android的dex文件的模拟器工具 appdbg</p><p><a href="https://github.com/asmjmp0/appdbg">https://github.com/asmjmp0/appdbg</a></p><p>4、Frida Internal - Part 1: 架构、Gum 与 V8</p><p><a href="https://mp.weixin.qq.com/s/P6WGhDL3b4qB-edyc4hpXg">https://mp.weixin.qq.com/s/P6WGhDL3b4qB-edyc4hpXg</a></p><h3 id="2022-04-07"><a href="#2022-04-07" class="headerlink" title="2022.04.07"></a>2022.04.07</h3><p>1、对某火APP的算法逆向和还原</p><p><a href="https://bbs.pediy.com/thread-272202.htm">https://bbs.pediy.com/thread-272202.htm</a></p><h3 id="2022-04-08"><a href="#2022-04-08" class="headerlink" title="2022.04.08"></a>2022.04.08</h3><p>1、So逆向 某狗音乐登陆算法逆向 </p><p><a href="https://mp.weixin.qq.com/s/amtCCf7-A4XtdTyfVaqgIA">https://mp.weixin.qq.com/s/amtCCf7-A4XtdTyfVaqgIA</a></p><p>2、Linux中基于eBPF的恶意利用与监测机制</p><p><a href="https://mp.weixin.qq.com/s/SQ-3fO5ZInqB5aeKCPpluw">https://mp.weixin.qq.com/s/SQ-3fO5ZInqB5aeKCPpluw</a></p><p>3、sgmain 6.4.x加密算法还原 天猫8.1</p><p><a href="https://mp.weixin.qq.com/s/w5RM4UrJ5_xK22y5JxtADg">https://mp.weixin.qq.com/s/w5RM4UrJ5_xK22y5JxtADg</a></p><h3 id="2022-04-09"><a href="#2022-04-09" class="headerlink" title="2022.04.09"></a>2022.04.09</h3><p>1、爱加密加固产品原理分析-定制版</p><p><a href="https://mp.weixin.qq.com/s/mbqQbQZDIj5trfwVYmQoqQ">https://mp.weixin.qq.com/s/mbqQbQZDIj5trfwVYmQoqQ</a></p><p>2、frida internal -part2：核心组件 frida-core</p><p><a href="https://mp.weixin.qq.com/s/TJkGsm9UaSkC4AFXj9fGHw">https://mp.weixin.qq.com/s/TJkGsm9UaSkC4AFXj9fGHw</a></p><p>3、学习Java、android项目必备的打包插件gradle，看官方文档更加容易理解</p><p><a href="https://docs.gradle.org/7.4.2/userguide/userguide.html">https://docs.gradle.org/7.4.2/userguide/userguide.html</a></p><h3 id="2022-04-10"><a href="#2022-04-10" class="headerlink" title="2022.04.10"></a>2022.04.10</h3><p>1、某度魔改base64算法还原</p><p><a href="https://mp.weixin.qq.com/s/Ejf5QTO2dd0LaZqnvcIKXg">https://mp.weixin.qq.com/s/Ejf5QTO2dd0LaZqnvcIKXg</a></p><p>2、快手花指令</p><p><a href="https://mp.weixin.qq.com/s/3k7_OiThHLpsMkhqtymeQA">https://mp.weixin.qq.com/s/3k7_OiThHLpsMkhqtymeQA</a></p><h3 id="2022-04-12"><a href="#2022-04-12" class="headerlink" title="2022.04.12"></a>2022.04.12</h3><p>1、Android13 深度剖析</p><p><a href="https://blog.esper.io/android-13-deep-dive/#qr_code_shortcut">https://blog.esper.io/android-13-deep-dive/#qr_code_shortcut</a></p><p>2、一款基于Frida的系统调用hook脚本</p><p><a href="https://github.com/apkunpacker/SyscallHooks/">https://github.com/apkunpacker/SyscallHooks/</a></p><h3 id="2022-04-13"><a href="#2022-04-13" class="headerlink" title="2022.04.13"></a>2022.04.13</h3><p>1、基于LLVM编译器的IDA自动结构体分析插件</p><p><a href="https://bbs.pediy.com/thread-272289.htm">https://bbs.pediy.com/thread-272289.htm</a></p><p>2、maat 一个开源的动态符号执行二进制分析框架，同样<a href="https://github.com/JonathanSalwan/Triton">triton</a>也是新晋的分析工具</p><p><a href="https://github.com/trailofbits/maat">https://github.com/trailofbits/maat</a></p><h3 id="2022-04-17"><a href="#2022-04-17" class="headerlink" title="2022.04.17"></a>2022.04.17</h3><p>1、微软公布的学习机器学习的指南</p><p><a href="https://github.com/microsoft/ML-For-Beginners">https://github.com/microsoft/ML-For-Beginners</a></p><p>2、11个挑战，对Qiling Framework框架入门</p><p><a href="https://bbs.pediy.com/thread-268989.htm">https://bbs.pediy.com/thread-268989.htm</a></p><p>3、使用Qiling IDA插件解密Mirai病毒数据</p><p><a href="https://bbs.pediy.com/thread-262073.htm">https://bbs.pediy.com/thread-262073.htm</a></p><p>4、浅析不同情况下的docker逃逸方法</p><p><a href="https://bbs.pediy.com/thread-272324.htm">https://bbs.pediy.com/thread-272324.htm</a></p><h3 id="2022-04-22"><a href="#2022-04-22" class="headerlink" title="2022.04.22"></a>2022.04.22</h3><p>1、科恩开源的静态分析的工具</p><p><a href="https://github.com/KeenSecurityLab/BinAbsInspector">https://github.com/KeenSecurityLab/BinAbsInspector</a></p><p><a href="https://keenlab.tencent.com/zh/2022/04/20/2022-BinAbsInspector-public-release/">https://keenlab.tencent.com/zh/2022/04/20/2022-BinAbsInspector-public-release/</a></p><p>2、how2heap深入浅出学习堆</p><p><a href="https://bbs.pediy.com/thread-272416.htm">https://bbs.pediy.com/thread-272416.htm</a></p><h3 id="2022-04-25"><a href="#2022-04-25" class="headerlink" title="2022.04.25"></a>2022.04.25</h3><p>1、基于xpoasd/Edxp hooklinker实现的So脱壳机</p><p><a href="https://bbs.pediy.com/thread-272438.htm">https://bbs.pediy.com/thread-272438.htm</a></p><p>2、Android APP漏洞之战（10）——调试与反调试详解</p><p><a href="https://bbs.pediy.com/thread-272452.htm">https://bbs.pediy.com/thread-272452.htm</a></p><p>3、Attacking javascript engines in 2022</p><p><a href="https://saelo.github.io/presentations/offensivecon_22_attacking_javascript_engines.pdf">https://saelo.github.io/presentations/offensivecon_22_attacking_javascript_engines.pdf</a></p><p><a href="https://www.youtube.com/watch?v=FK2-1FAbbXA">https://www.youtube.com/watch?v=FK2-1FAbbXA</a></p><p>4、awesome-hardware-tools</p><p><a href="https://github.com/aolofsson/awesome-hardware-tools">https://github.com/aolofsson/awesome-hardware-tools</a></p><p>5、ROP challenges 用来学习ROP</p><p><a href="https://ropemporium.com/index.html">https://ropemporium.com/index.html</a></p><p>6、frida手册</p><p><a href="https://learnfrida.info/">https://learnfrida.info/</a></p><h3 id="2022-04-26"><a href="#2022-04-26" class="headerlink" title="2022.04.26"></a>2022.04.26</h3><p>1、云安全资源汇总</p><p><a href="https://github.com/teamssix/awesome-cloud-security">https://github.com/teamssix/awesome-cloud-security</a></p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日checklist（2022.01.01-02.12）</title>
    <link href="/2022/02/12/%E6%AF%8F%E6%97%A5checklist%EF%BC%882022.01.01-02.12%EF%BC%89/"/>
    <url>/2022/02/12/%E6%AF%8F%E6%97%A5checklist%EF%BC%882022.01.01-02.12%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="2022-01-02"><a href="#2022-01-02" class="headerlink" title="2022.01.02"></a>2022.01.02</h3><p>1、paper with Code上2021的总结，总结了很多优秀的项目</p><p><a href="https://medium.com/paperswithcode/papers-with-code-2021-a-year-in-review-de75d5a77b8b">https://medium.com/paperswithcode/papers-with-code-2021-a-year-in-review-de75d5a77b8b</a></p><p>2、关于graph ML的一个教程，讲解GNN，图神经</p><p><a href="https://towardsdatascience.com/graph-ml-in-2022-where-are-we-now-f7f8242599e0">https://towardsdatascience.com/graph-ml-in-2022-where-are-we-now-f7f8242599e0</a></p><p>3、图神经网络的工作原理：从头开始介绍图卷积神经</p><p><a href="https://theaisummer.com/graph-convolutional-networks/">https://theaisummer.com/graph-convolutional-networks/</a></p><p>4、pwn2own Safari漏洞 CVE-2021-30734分析与利用</p><p><a href="https://paper.seebug.org/1804/">https://paper.seebug.org/1804/</a></p><p>5、一款用与研究的IOS内存可视化工具</p><p><a href="https://bellis1000.medium.com/a-memory-visualiser-tool-for-ios-security-research-bd8bb8c334c6">https://bellis1000.medium.com/a-memory-visualiser-tool-for-ios-security-research-bd8bb8c334c6</a></p><p>6、一款链接器，比llvm更加快，值得看的项目</p><p><a href="https://github.com/rui314/mold">https://github.com/rui314/mold</a></p><p>7、2021安全相关的论文合集</p><p><a href="https://mp.weixin.qq.com/s/zOSSwAl-Ax41Kx6OB_-6vQ">https://mp.weixin.qq.com/s/zOSSwAl-Ax41Kx6OB_-6vQ</a></p><h3 id="2022-01-06"><a href="#2022-01-06" class="headerlink" title="2022.01.06"></a>2022.01.06</h3><p>1、一行代码检测xp、root、多开等等</p><p><a href="https://github.com/lamster2018/EasyProtector">https://github.com/lamster2018/EasyProtector</a></p><p>2、最新的验证码识别框架库</p><p><a href="https://github.com/sml2h3/ddddocr">https://github.com/sml2h3/ddddocr</a></p><p>3、人工智能比赛，预测泰坦尼克号沉没概率</p><p><a href="https://bbs.pediy.com/thread-271063.htm">https://bbs.pediy.com/thread-271063.htm</a></p><h3 id="2022-01-07"><a href="#2022-01-07" class="headerlink" title="2022.01.07"></a>2022.01.07</h3><p>1、年轻人如何挖掘第一个RCE</p><p><a href="https://mp.weixin.qq.com/s/3phgI8yaPns3Dx5oSkdeYg">https://mp.weixin.qq.com/s/3phgI8yaPns3Dx5oSkdeYg</a></p><p>2、DP的虚拟机逃逸 pwn2own上的漏洞演讲</p><p><a href="https://zerodayengineering.com/projects/slides/ZDE2021_AdvancedEasyPwn2Own2021.pdf">https://zerodayengineering.com/projects/slides/ZDE2021_AdvancedEasyPwn2Own2021.pdf</a></p><p>3、对go 的fuzz</p><p><a href="https://github.com/thepudds/fzgen">https://github.com/thepudds/fzgen</a></p><p>4、OLLVM-plus 应该是实现了不同的pass</p><p><a href="https://github.com/bluesadi/OLLVM-plusplus">https://github.com/bluesadi/OLLVM-plusplus</a></p><p>5、使用trace算法进行逆向分析和还原</p><p><a href="https://bbs.pediy.com/thread-270529.htm">https://bbs.pediy.com/thread-270529.htm</a></p><p>6、使用trace进行算法还原</p><p><a href="https://bbs.pediy.com/thread-270078.htm">https://bbs.pediy.com/thread-270078.htm</a></p><p>7、大猿搜题 sign so 加密参数分析｜unidbg</p><p><a href="https://mp.weixin.qq.com/s/UwIYnr5V79lkMSsLSRKJ2A">https://mp.weixin.qq.com/s/UwIYnr5V79lkMSsLSRKJ2A</a></p><h3 id="2022-01-08"><a href="#2022-01-08" class="headerlink" title="2022.01.08"></a>2022.01.08</h3><p>1、Android风险环境监测，监测xposed、多开</p><p><a href="https://bbs.pediy.com/thread-271082.htm">https://bbs.pediy.com/thread-271082.htm</a></p><p><a href="https://github.com/liwugang/RiskEnvDetection">https://github.com/liwugang/RiskEnvDetection</a></p><p>2、Linux内核监控在Android攻防中的应用</p><p><a href="https://bbs.pediy.com/thread-271043.htm">https://bbs.pediy.com/thread-271043.htm</a></p><h3 id="2022-01-10"><a href="#2022-01-10" class="headerlink" title="2022.01.10"></a>2022.01.10</h3><p>1、fuzzing 101 for LibAFL 第四篇</p><p><a href="https://epi052.gitlab.io/notes-to-self/blog/2021-11-26-fuzzing-101-with-libafl-part-4/">https://epi052.gitlab.io/notes-to-self/blog/2021-11-26-fuzzing-101-with-libafl-part-4/</a></p><p>2、Android security workshop 里面存在多个安全相关的PPT</p><p><a href="https://valsamaras.medium.com/android-security-workshop-5eadeb50fba">https://valsamaras.medium.com/android-security-workshop-5eadeb50fba</a></p><p>3、x64 Linux binary Exploitation part1</p><p><a href="https://valsamaras.medium.com/introduction-to-x64-linux-binary-exploitation-part-1-14ad4a27aeef">https://valsamaras.medium.com/introduction-to-x64-linux-binary-exploitation-part-1-14ad4a27aeef</a></p><p>4、内核、容器与eBPF攻防初探</p><p><a href="https://bbs.pediy.com/thread-271107.htm">https://bbs.pediy.com/thread-271107.htm</a></p><p>5、anti_android 保护Android应用程序的抵抗任何攻击</p><p><a href="https://github.com/TUGOhost/anti_Android">https://github.com/TUGOhost/anti_Android</a></p><p>6、xposed框架定制</p><p><a href="https://bbs.pediy.com/thread-269627.htm">https://bbs.pediy.com/thread-269627.htm</a></p><p>7、Android APP漏洞之战</p><p>含有多个部分，不过选择其中比较优秀的文章</p><p>content provider漏洞详解</p><p><a href="https://bbs.pediy.com/thread-269447.htm">https://bbs.pediy.com/thread-269447.htm</a></p><p>http/https通信漏洞详解</p><p><a href="https://bbs.pediy.com/thread-270634.htm">https://bbs.pediy.com/thread-270634.htm</a></p><p>信息泄露漏洞详解</p><p><a href="https://bbs.pediy.com/thread-271122.htm">https://bbs.pediy.com/thread-271122.htm</a></p><p>8、《最强Android书架构大剖析》的作者出书的通知</p><p><a href="http://newandroidbook.com/">http://newandroidbook.com/</a></p><h3 id="2022-01-11"><a href="#2022-01-11" class="headerlink" title="2022.01.11"></a>2022.01.11</h3><p>1、函数抽取壳的实现</p><p><a href="https://mp.weixin.qq.com/s/lcDKHUKYq9W7-wm-vdaZdQ">https://mp.weixin.qq.com/s/lcDKHUKYq9W7-wm-vdaZdQ</a></p><p>2、使用magisk+riru实现全局改机</p><p><a href="https://mp.weixin.qq.com/s/DPZ0i9hUtvv8aD2ZVO9ZzQ">https://mp.weixin.qq.com/s/DPZ0i9hUtvv8aD2ZVO9ZzQ</a></p><h3 id="2022-01-12"><a href="#2022-01-12" class="headerlink" title="2022.01.12"></a>2022.01.12</h3><p>1、南京大学《软件分析》课程的书稿</p><p><a href="https://spa-book.pblo.gq/">https://spa-book.pblo.gq/</a></p><p>还有实验笔记：<a href="https://github.com/RicoloveFeng/SPA-Freestyle-Guidance">https://github.com/RicoloveFeng/SPA-Freestyle-Guidance</a></p><p>2、两个web应用fuzz工具</p><p>wfuzz：<a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a></p><p>ffuf：<a href="https://github.com/ffuf/ffuf">https://github.com/ffuf/ffuf</a></p><p>到底哪一个fuzz更加快：<a href="https://www.youtube.com/watch?v=QBW70TdxzKo">https://www.youtube.com/watch?v=QBW70TdxzKo</a></p><p>3、Linux内核利用与开发和逆向工程</p><p><a href="https://breaking-bits.gitbook.io/breaking-bits/">https://breaking-bits.gitbook.io/breaking-bits/</a></p><p>4、LoRaWAN’s Protocol Stacks: The Forgotten Targets at Risk</p><p><a href="https://documents.trendmicro.com/images/TEx/pdf/Technical-Brief---LoRaWANs-Protocol-Stacks-The-Forgotten-Targets-at-Risk.pdf">https://documents.trendmicro.com/images/TEx/pdf/Technical-Brief---LoRaWANs-Protocol-Stacks-The-Forgotten-Targets-at-Risk.pdf</a></p><p>5、Xposed的新打开方式–Xpatch工作流程分析</p><p><a href="https://bbs.pediy.com/thread-251422.htm">https://bbs.pediy.com/thread-251422.htm</a></p><h3 id="2022-01-13"><a href="#2022-01-13" class="headerlink" title="2022.01.13"></a>2022.01.13</h3><p>1、学习一年的SSRF总结</p><p><a href="https://www.anquanke.com/post/id/262430">https://www.anquanke.com/post/id/262430</a></p><p>2、针对Android App隐私信息检测</p><p><a href="https://www.cnblogs.com/Tu9oh0st/p/15749246.html">https://www.cnblogs.com/Tu9oh0st/p/15749246.html</a></p><p>3、将frida内置进AOSP中</p><p><a href="https://www.cnblogs.com/Tu9oh0st/p/15391266.html">https://www.cnblogs.com/Tu9oh0st/p/15391266.html</a></p><p>4、Android Syscall-Logger，基本上就是修改AOSP的来获取日志</p><p><a href="https://github.com/Ackvincent/Android-Syscall-Logger">https://github.com/Ackvincent/Android-Syscall-Logger</a></p><h3 id="2022-01-14"><a href="#2022-01-14" class="headerlink" title="2022.01.14"></a>2022.01.14</h3><p>1、profuzzbench 一款fuzz协议的工具 TLS、SSH、SMTP、FTP、SIP</p><p><a href="https://github.com/profuzzbench/profuzzbench">https://github.com/profuzzbench/profuzzbench</a></p><p>2、对《漏洞战争》非常详细的复现</p><p><a href="https://bbs.pediy.com/user-600394.htm">https://bbs.pediy.com/user-600394.htm</a></p><p>3、一款分析智能合约和二进制文件的符号执行工具</p><p><a href="https://github.com/trailofbits/manticore">https://github.com/trailofbits/manticore</a></p><p>4、2021年物联网CVE天梯榜</p><p><a href="https://www.anquanke.com/post/id/266061">https://www.anquanke.com/post/id/266061</a></p><p>5、TetCTF2022一道代码混淆题分析——crackme_pls</p><p><a href="https://bbs.pediy.com/thread-271164.htm">https://bbs.pediy.com/thread-271164.htm</a></p><p>6、PLCT实验室的公开演讲的PPT</p><p><a href="https://github.com/plctlab/PLCT-Open-Reports">https://github.com/plctlab/PLCT-Open-Reports</a></p><h3 id="2022-01-15"><a href="#2022-01-15" class="headerlink" title="2022.01.15"></a>2022.01.15</h3><p>1、适用于Android的ADOBE ACROBAT READER 中的 RCE (CVE-2021-40724)</p><p><a href="https://hulkvision.github.io/blog/post1/">https://hulkvision.github.io/blog/post1/</a></p><h3 id="2022-01-17"><a href="#2022-01-17" class="headerlink" title="2022.01.17"></a>2022.01.17</h3><p>1、Android JNI-trace工具开源</p><p><a href="https://github.com/xbyl1234/android_analysis">https://github.com/xbyl1234/android_analysis</a></p><p>2、二进制漏洞靶场，将真实的bug抽象出来进行练习</p><p><a href="https://github.com/StarCrossPortal/bug-hunting-101">https://github.com/StarCrossPortal/bug-hunting-101</a></p><h3 id="2022-01-18"><a href="#2022-01-18" class="headerlink" title="2022.01.18"></a>2022.01.18</h3><p>1、一款ROP gadget工具</p><p><a href="https://github.com/0vercl0k/rp">https://github.com/0vercl0k/rp</a></p><p>2、一门关于统计学的课程，统计学是机器学习的基础 Statistical Rethinking 2022</p><p><a href="https://www.youtube.com/playlist?list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN">https://www.youtube.com/playlist?list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN</a></p><p>并且有github开放ppt ：<a href="https://github.com/rmcelreath/stat_rethinking_2022">https://github.com/rmcelreath/stat_rethinking_2022</a></p><p>3、Android10内核编译并使用AndroidSyscallLogger</p><p><a href="http://www.juziss.cn/2021/05/22/Android10%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%B9%B6%E4%BD%BF%E7%94%A8AndroidSyscallLogger/">http://www.juziss.cn/2021/05/22/Android10%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%B9%B6%E4%BD%BF%E7%94%A8AndroidSyscallLogger/</a></p><h3 id="2022-01-20"><a href="#2022-01-20" class="headerlink" title="2022.01.20"></a>2022.01.20</h3><p>1、错误：BadAlloc！- 内存分配器损坏导致数百万易受攻击的物联网和嵌入式设备</p><p>一个在blackhat上的演讲，讲解IOT中的视频</p><p><a href="https://www.youtube.com/watch?v=lSvygMc8uc0">https://www.youtube.com/watch?v=lSvygMc8uc0</a></p><p>2、杀手锏级设备指纹-通过Netlink获取网卡Mac地址</p><p><a href="https://mp.weixin.qq.com/s/aEPesWhd47f5bzJUhWSnVg">https://mp.weixin.qq.com/s/aEPesWhd47f5bzJUhWSnVg</a></p><h3 id="2022-01-21"><a href="#2022-01-21" class="headerlink" title="2022.01.21"></a>2022.01.21</h3><p>1、参与unicorn开发的演讲PPT</p><p><a href="https://github.com/wtdcode/mytalks">https://github.com/wtdcode/mytalks</a></p><p>2、从chrome的沙箱中逃逸</p><p><a href="https://starlabs.sg/blog/2022/01/the-cat-escaped-from-the-chrome-sandbox/">https://starlabs.sg/blog/2022/01/the-cat-escaped-from-the-chrome-sandbox/</a></p><p>3、ARM64汇编学习（站在编译器的角度）</p><p><a href="https://github.com/nzcv/note">https://github.com/nzcv/note</a></p><h3 id="2022-01-22"><a href="#2022-01-22" class="headerlink" title="2022.01.22"></a>2022.01.22</h3><p>1、一款基于frida的系统调用的trace工具</p><p><a href="https://github.com/FrenchYeti/interruptor">https://github.com/FrenchYeti/interruptor</a></p><p>2、代码安全审计之道</p><p><a href="https://mp.weixin.qq.com/s/1mnlMddHzZHMfmfpE5-yhw">https://mp.weixin.qq.com/s/1mnlMddHzZHMfmfpE5-yhw</a></p><h3 id="2022-01-24"><a href="#2022-01-24" class="headerlink" title="2022.01.24"></a>2022.01.24</h3><p>1、一些阅读源码和fuzzing的经验</p><p><a href="https://github.com/lcatro/Source-and-Fuzzing">https://github.com/lcatro/Source-and-Fuzzing</a></p><p>2、libfuzzer bindings for Unicorn</p><p><a href="https://github.com/wtdcode/fuzzercorn">https://github.com/wtdcode/fuzzercorn</a></p><h3 id="2022-01-26"><a href="#2022-01-26" class="headerlink" title="2022.01.26"></a>2022.01.26</h3><p>1、深挖Linux内核新特性，算是一个学习指南</p><p><a href="https://github.com/0voice/kernel_new_features">https://github.com/0voice/kernel_new_features</a></p><p>2、复现基于eBPF实现的Docker逃逸</p><p><a href="https://drivertom.blogspot.com/2022/01/ebpfdocker.html">https://drivertom.blogspot.com/2022/01/ebpfdocker.html</a></p><p>3、Qiling Sandbox Escape</p><p><a href="https://www.kalmarunionen.dk/writeups/2022/rwctf/qlaas/">https://www.kalmarunionen.dk/writeups/2022/rwctf/qlaas/</a></p><p>4、一种将LLVM pass集成到NDK的通用方法</p><p><a href="https://bbs.pediy.com/thread-271271.htm">https://bbs.pediy.com/thread-271271.htm</a></p><p>5、Triton 是一个动态二进制分析 (DBA) 框架</p><p><a href="https://github.com/JonathanSalwan/Triton">https://github.com/JonathanSalwan/Triton</a></p><h3 id="2022-01-27"><a href="#2022-01-27" class="headerlink" title="2022.01.27"></a>2022.01.27</h3><p>1、一个native层的安全防护</p><p><a href="https://github.com/uestccokey/EZProtect">https://github.com/uestccokey/EZProtect</a></p><h3 id="2022-01-28"><a href="#2022-01-28" class="headerlink" title="2022.01.28"></a>2022.01.28</h3><p>1、apache CVE-2021-44790 RCE漏洞分析</p><p><a href="https://www.zerodayinitiative.com/blog/2022/1/25/cve-2021-44790-code-execution-on-apache-via-an-integer-underflow">https://www.zerodayinitiative.com/blog/2022/1/25/cve-2021-44790-code-execution-on-apache-via-an-integer-underflow</a></p><p>2、stdfuzzer是LibAFL的参考实现</p><p><a href="https://github.com/AFLplusplus/StdFuzzer">https://github.com/AFLplusplus/StdFuzzer</a></p><p>3、RESTler 是第一个有状态的 REST API 模糊测试工具</p><p><a href="https://github.com/microsoft/restler-fuzzer">https://github.com/microsoft/restler-fuzzer</a></p><p>4、pwnkit 针对CVE-2021-4034的独立漏洞利用</p><p><a href="https://github.com/ly4k/PwnKit">https://github.com/ly4k/PwnKit</a></p><p>5、codeql提升篇</p><p><a href="https://tttang.com/archive/1415/">https://tttang.com/archive/1415/</a></p><p>6、从Challenge42看Linux提权基本技巧</p><p><a href="https://tttang.com/archive/1414/">https://tttang.com/archive/1414/</a></p><p>7、一款web应用的fuzz工具</p><p><a href="https://github.com/shfz/shfz">https://github.com/shfz/shfz</a></p><p>8、使用qiling框架进行二进制分析的几个tips</p><p><a href="https://github.com/qilingframework/qiling/discussions/1083">https://github.com/qilingframework/qiling/discussions/1083</a></p><p>9、stanford 的深度多任务和元学习 CS330 深度学习进阶课程</p><p><a href="https://cs330.stanford.edu/">https://cs330.stanford.edu/</a></p><h3 id="2022-01-29"><a href="#2022-01-29" class="headerlink" title="2022.01.29"></a>2022.01.29</h3><p>1、The Resources about PL and Compiler</p><p><a href="https://github.com/shining1984/PL-Compiler-Resource">https://github.com/shining1984/PL-Compiler-Resource</a></p><h3 id="2022-02-01"><a href="#2022-02-01" class="headerlink" title="2022.02.01"></a>2022.02.01</h3><p>1、FartExt超进化之奇奇怪怪的新ROM工具MikRom</p><p><a href="https://bbs.pediy.com/thread-271358.htm">https://bbs.pediy.com/thread-271358.htm</a></p><p>2、CVE-2021-0928 Android 12 上的exp</p><p><a href="https://github.com/michalbednarski/ReparcelBug2">https://github.com/michalbednarski/ReparcelBug2</a></p><p>3、how Android updates work：A peek behind the curtains from an insider</p><p><a href="https://medium.com/@Za_Raczke/how-android-updates-work-a-peek-behind-the-curtains-from-an-insider-1d8e1a48ec0b">https://medium.com/@Za_Raczke/how-android-updates-work-a-peek-behind-the-curtains-from-an-insider-1d8e1a48ec0b</a></p><h3 id="2022-02-06"><a href="#2022-02-06" class="headerlink" title="2022.02.06"></a>2022.02.06</h3><p>1、paper上面有一系列的v8利用教程，值得推荐</p><p><a href="https://paper.seebug.org/1825/">https://paper.seebug.org/1825/</a></p><p>2、命令行中的数据科学</p><p><a href="https://datascienceatthecommandline.com/2e/chapter-1-introduction.html">https://datascienceatthecommandline.com/2e/chapter-1-introduction.html</a></p><h3 id="2022-02-07"><a href="#2022-02-07" class="headerlink" title="2022.02.07"></a>2022.02.07</h3><p>1、soot食用笔记</p><p><a href="https://github.com/PL-Ninja/MySootScript">https://github.com/PL-Ninja/MySootScript</a></p><p>2、2021交大程序安全课程</p><p><a href="https://github.com/u1f383/Software-Security-2021">https://github.com/u1f383/Software-Security-2021</a></p><p>3、java安全</p><p><a href="https://github.com/SummerSec/JavaLearnVulnerability">https://github.com/SummerSec/JavaLearnVulnerability</a></p><p>4、easy-android-pwn</p><p><a href="https://github.com/ntiger1024/easy-android-pwn">https://github.com/ntiger1024/easy-android-pwn</a></p><p>5、codeql_compile</p><p><a href="https://github.com/ice-doom/codeql_compile">https://github.com/ice-doom/codeql_compile</a></p><h3 id="2022-02-12"><a href="#2022-02-12" class="headerlink" title="2022.02.12"></a>2022.02.12</h3><p>1、字节开源的Android的inline hook框架</p><p><a href="https://github.com/bytedance/android-inline-hook">https://github.com/bytedance/android-inline-hook</a></p><p>2、glibc中偏门利用技巧</p><p><a href="https://tttang.com/archive/1429/">https://tttang.com/archive/1429/</a></p><p>3、针对peloton Bike（以及未打补丁的Android设备）零点击RCE漏洞</p><p><a href="https://www.nowsecure.com/blog/2022/02/09/a-zero-click-rce-exploit-for-the-peloton-bike-and-also-every-other-unpatched-android-device/?utm_source=twitter&amp;utm_medium=social">https://www.nowsecure.com/blog/2022/02/09/a-zero-click-rce-exploit-for-the-peloton-bike-and-also-every-other-unpatched-android-device/?utm_source=twitter&amp;utm_medium=social</a></p><p>4、Codeql数据流分析/污点分析</p><p><a href="https://eternalsakura13.com/2022/02/08/codeql_flow_analyze/">https://eternalsakura13.com/2022/02/08/codeql_flow_analyze/</a></p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022论文阅读计划——2月</title>
    <link href="/2022/02/12/2022%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92%E2%80%94%E2%80%942%E6%9C%88/"/>
    <url>/2022/02/12/2022%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92%E2%80%94%E2%80%942%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<h5 id="Kasper：扫描Linux内核中的广义瞬态执行小工具（KASPER-Scanning-for-Generalized-Transient-Execution-Gadgets-in-the-Linux-Kernel）"><a href="#Kasper：扫描Linux内核中的广义瞬态执行小工具（KASPER-Scanning-for-Generalized-Transient-Execution-Gadgets-in-the-Linux-Kernel）" class="headerlink" title="Kasper：扫描Linux内核中的广义瞬态执行小工具（KASPER: Scanning for Generalized Transient Execution Gadgets in the Linux Kernel）"></a>Kasper：扫描Linux内核中的广义瞬态执行小工具（KASPER: Scanning for Generalized Transient Execution Gadgets in the Linux Kernel）</h5><p>工具的github地址：<a href="https://github.com/vusec/kasper">https://github.com/vusec/kasper</a></p><blockquote><p>在本文中，我们放弃了模式扫描，而采用一种对投机执行攻击中使用的基本步骤建模的方法，允许我们找到更通用的小工具——远远超出现有扫描仪的范围。特别地，我们提出了KASPER，一种投机性执行小工具扫描器，它使用污染分析策略来建模攻击者，能够利用瞬态路径上的任意软件/硬件漏洞来控制数据(例如，通过内存按摩或LVI)，访问秘密（例如，通过越界或免费使用后访问），并泄漏这些秘密(例如，通过基于缓存、基于mds或基于端口竞争的秘密通道)。</p></blockquote><h5 id="利用最后一根破坏Android系统的稻草（Exploit-the-Last-Straw-That-Breaks-Android-Systems）"><a href="#利用最后一根破坏Android系统的稻草（Exploit-the-Last-Straw-That-Breaks-Android-Systems）" class="headerlink" title="利用最后一根破坏Android系统的稻草（Exploit the Last Straw That Breaks Android Systems）"></a>利用最后一根破坏Android系统的稻草（Exploit the Last Straw That Breaks Android Systems）</h5><blockquote><p>然后，我们提出了一种新颖的指导模糊的基于模糊的方法，称为StrawFuzzer，自动禁止侵入秸秆漏洞的所有系统服务。草莓余额平衡路径勘探和脆弱性剥削之间的权衡。通过使用最新安全更新的三个Android系统上应用草脂蛋白，我们确定了35个独特的秸秆脆弱性，影响了77个系统服务的474个接口，并成功生成了相应的漏洞，可用于进行各种永久/临时DOS攻击。我们已经报告了我们的调查结果，建议修复对应供应商的漏洞。到目前为止，谷歌已将漏洞评为高严重程度。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>论文计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Protection android app with multiDEX and SO files from reverseengineering</title>
    <link href="/2022/01/14/Protection-android-app-with-multiDEX-and-SO-files-from-reverseengineering/"/>
    <url>/2022/01/14/Protection-android-app-with-multiDEX-and-SO-files-from-reverseengineering/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文是论文《Protection android app with multiDEX and SO files from reverseengineering》的阅读笔记，经过了自己的阅读该论文，发现其技术是很前言，并且在作者的对比测试中，结果也是比较喜人。实现了多层VMP保护技术，讲DEX转换成Native层的保护，从而能够成功对抗对dex的提取工具。不仅如此，其中还提出混淆的策略，针对So的混淆，并未采用大家熟知的OLLVM混淆，而是自己提出的一种基于多种语义等价的混淆模式，不同模式的选择是通过分发器进行控制，可以有效的抵御重复执行的到VMP中的信息。</p><p>理论和技术方案确实是不错，并且是目前前言的技术。在论文中尽管使用的动态分析技术，并未对加固的强度进行测试，并且作对比的测试工具也是与论文发布实现有大约3-4年的时间间隔，可以说并未的到很好的对比分析，也没有深入的分析动态调试技术是否能够抵挡。或许这就是这个论文的增长点，如果能够使用更多的技术来衡量加固强度，那么这论文应该是可以再完美一些。同样可惜的是作者并未开源这个加固框架，核心原理在论文中也只是提到一些概念性的东西。</p><p>增长点</p><blockquote><p>1、使用现在比较成熟的VMP分析技术来衡量这个技术方案的强度</p><p>2、更多的探索这个技术方案的核心原理，如何实现多个VM来加固</p><p>3、在混淆方面是否能够有更加好的技术手段来对抗论文中提出的方案</p><p>4、寻找论文相识的样本，在最新的爱加密壳中基本上是出现了双重VMP的保护机制</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>论文计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android安全</tag>
      
      <tag>论文阅读</tag>
      
      <tag>VMP</tag>
      
      <tag>Dex2C</tag>
      
      <tag>Android加固</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>置顶列表</title>
    <link href="/2022/01/11/%E7%BD%AE%E9%A1%B6%E5%88%97%E8%A1%A8/"/>
    <url>/2022/01/11/%E7%BD%AE%E9%A1%B6%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="你能在这里看到的优秀文章导航"><a href="#你能在这里看到的优秀文章导航" class="headerlink" title="你能在这里看到的优秀文章导航"></a>你能在这里看到的优秀文章导航</h3><h4 id="漏洞挖掘指南"><a href="#漏洞挖掘指南" class="headerlink" title="漏洞挖掘指南"></a><a href="https://www.theseus.top/2021/12/24/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8C%87%E5%8D%97/">漏洞挖掘指南</a></h4><h4 id="2021论文阅读计划——12月"><a href="#2021论文阅读计划——12月" class="headerlink" title="2021论文阅读计划——12月"></a><a href="https://www.theseus.top/2021/12/24/2021%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92%E2%80%94%E2%80%9412%E6%9C%88/">2021论文阅读计划——12月</a></h4><h4 id="2022论文阅读计划——1月"><a href="#2022论文阅读计划——1月" class="headerlink" title="2022论文阅读计划——1月"></a><a href="https://www.theseus.top/2022/01/10/2022%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92%E2%80%94%E2%80%941%E6%9C%88/">2022论文阅读计划——1月</a></h4><h4 id="技术学习专题"><a href="#技术学习专题" class="headerlink" title="技术学习专题"></a><a href="https://www.theseus.top/2022/01/11/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/">技术学习专题</a></h4><h4 id="优秀项目收集"><a href="#优秀项目收集" class="headerlink" title="优秀项目收集"></a><a href="https://www.theseus.top/2021/12/24/%E4%BC%98%E7%A7%80%E9%A1%B9%E7%9B%AE%E6%94%B6%E9%9B%86/">优秀项目收集</a></h4><h4 id="机器学习指南"><a href="#机器学习指南" class="headerlink" title="机器学习指南"></a><a href="https://www.theseus.top/2021/12/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/">机器学习指南</a></h4><h3 id="如果你想看更多的学习资料，不妨看看下面的文档"><a href="#如果你想看更多的学习资料，不妨看看下面的文档" class="headerlink" title="如果你想看更多的学习资料，不妨看看下面的文档"></a>如果你想看更多的学习资料，不妨看看下面的文档</h3><table><thead><tr><th align="center">文档标题</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center"><a href="https://www.theseus.top/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%8820.10.09-21.01.23%EF%BC%89/">每日Checklist（2020.10.09-2021.03.23）</a></td><td align="center">完结</td></tr><tr><td align="center"><a href="https://www.theseus.top/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%883.27-4.19%EF%BC%89/">每日Checklist（2021.03.27-2021.04.19）</a></td><td align="center">完结</td></tr><tr><td align="center"><a href="https://www.theseus.top/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%884.23-6.04%EF%BC%89/">每日Checklist（2021.04.23-2021.06.04）</a></td><td align="center">完结</td></tr><tr><td align="center"><a href="https://www.theseus.top/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%886.05-7.30%EF%BC%89/">每日Checklist（2021.06.05-2021.07.30）</a></td><td align="center">完结</td></tr><tr><td align="center"><a href="https://www.theseus.top/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%888.02-10.06%EF%BC%89/">每日Checklist（2021.08.02-2021.10.06）</a></td><td align="center">完结</td></tr><tr><td align="center"><a href="https://www.theseus.top/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%8810.06-11.14%EF%BC%89/">每日Checklist（2021.10.06-2021.11.06）</a></td><td align="center">完结</td></tr><tr><td align="center"><a href="https://www.theseus.top/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%8811.12-12.31%EF%BC%89/">每日Checklist（2021.11.06-2021.12.31）</a></td><td align="center">完结</td></tr><tr><td align="center"><a href="https://www.theseus.top/2022/02/12/%E6%AF%8F%E6%97%A5checklist%EF%BC%882022.01.01-02.12%EF%BC%89/">每日Checklist（2022.01.01-2022.02.19）</a></td><td align="center">完结</td></tr><tr><td align="center"><a href="https://www.theseus.top/2022/05/12/%E6%AF%8F%E6%97%A5checklist%EF%BC%882.20-4.26%EF%BC%89/">每日Checklist（2022.02.20-2022.04.26）</a></td><td align="center">完结</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技术学习专题</title>
    <link href="/2022/01/11/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/"/>
    <url>/2022/01/11/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E4%B8%93%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个文案主要是记录自己在技术学习的技术专题，专题是平时学习总结，同时也是自己系统学习的计划，这样可以让自己的学习更加系统，并且可以把平时所学的归纳。这样可以写入文章中。</p><h3 id="小专题"><a href="#小专题" class="headerlink" title="小专题"></a>小专题</h3><h4 id="1、Socket抓包通杀专题"><a href="#1、Socket抓包通杀专题" class="headerlink" title="1、Socket抓包通杀专题"></a>1、Socket抓包通杀专题</h4><p>主要是分析android下如何实现通杀，学习网络协议的分析和溯源</p><p>目前完成度：80%</p><h4 id="2、github上优秀的frida工具分析"><a href="#2、github上优秀的frida工具分析" class="headerlink" title="2、github上优秀的frida工具分析"></a>2、github上优秀的frida工具分析</h4><p>主要的目的是学习frida更多的高级技巧同时也是学习优秀工具的开发原理</p><p>目前完成度：10%</p><h4 id="3、模拟执行so，最高目标对抗混淆"><a href="#3、模拟执行so，最高目标对抗混淆" class="headerlink" title="3、模拟执行so，最高目标对抗混淆"></a>3、模拟执行so，最高目标对抗混淆</h4><p>主要是学习各种模拟执行框架，在不依靠真机的情况下，模拟出so中的函数，达到溯源的目的。同时也是为分析类似于ollvm这类强混淆做准备。</p><p>①、ExAndroidNativeEmu</p><p>②、unicorn</p><p>③、unidbg</p><p>目前完成度：5%</p><h4 id="4、新提上一个专题：各种汇编反汇编器的使用研究"><a href="#4、新提上一个专题：各种汇编反汇编器的使用研究" class="headerlink" title="4、新提上一个专题：各种汇编反汇编器的使用研究"></a>4、新提上一个专题：各种汇编反汇编器的使用研究</h4><p>主要是针对现在市场上出来挺多的汇编与反汇编器的产品，有开源免费使用的，有商用的，主要的目的是研究各个软件的优势，同时也是可以起到研究反编译原理。</p><p>目前完成度：1%（目前仅仅收集了一些工具而已）</p><p>专题需要分析的工具如下：</p><p>高级反汇编器：IDA、JEB、Ghidra</p><p>基础利器：Capstore（编译器）、Keysotre（反汇编器）</p><p>新晋反汇编器：Radare2、binary ninja、Cutter</p><h4 id="5、OLLVM混淆与去混淆对抗"><a href="#5、OLLVM混淆与去混淆对抗" class="headerlink" title="5、OLLVM混淆与去混淆对抗"></a>5、OLLVM混淆与去混淆对抗</h4><p>主要是针对OLLVM这类混淆做出可行性的方案来对抗，主要是的目标还是学习对抗方案和原理，OLLVM的独特性，不同的开发者会加入不同pass，所以很难达到通用的去除办法，开这个研究可以的目的在于总结对抗的通用做法以及辅助分析OLLVM的手段，尽可能的削弱该混淆对逆向分析的阻碍。</p><p>研究大致路径</p><p>①、正向开发研究，手动实现标准开源的OLLVM混淆（demo实现）</p><p>②、剖析OLLVM混淆的实现原理，同时学习LLVM编译器的原理（创新改进，增加pass）</p><p>③、演习对抗方案</p><p>大致可能会涉及到</p><p>1、unidbg模拟执行去混淆</p><p>2、IDA python脚本去混淆</p><p>3、基于frida hook的方式辅助分析</p><p>4、基于angr的方式去混淆（符号执行）</p><p>5、手动patch</p><p>目前完成度 5%（目前仅仅收集了文章，以前有实现但是是基于Linux的）</p><h4 id="6、NDK开发技术与加固壳的研究"><a href="#6、NDK开发技术与加固壳的研究" class="headerlink" title="6、NDK开发技术与加固壳的研究"></a>6、NDK开发技术与加固壳的研究</h4><p>NDK开发已经是Android平台下用的非常多的技术了，很多有效的保护都会是用NDK开发技术，讲重要的代码写在Native层进行保护，ELF的加固手段在已经是很成熟的技术，可以拓展应用到Android平台之上。Native层也可以反射调用java层函数，可以做一些签名校验。</p><p>所以NDK开发是学习写壳的必经之路，写加固很多也是在so层做对抗。</p><p>1、NDK基础开发知识</p><p>2、指令抽取壳的原理与实现</p><p>3、vmp壳的实现</p><p>4、java2C的实现</p><h4 id="7、移动端各种Hook技术研究"><a href="#7、移动端各种Hook技术研究" class="headerlink" title="7、移动端各种Hook技术研究"></a>7、移动端各种Hook技术研究</h4><p>Android下实际上存在很对hook方案很多，同时也涉及到很多hook框架，比较热门的框架如frida、xposed框架，这两个框架在hook世界中运行是非常高频。</p><p>除此之外，很涉及到一下的hook方案</p><p>1、inline hook</p><p>2、got表动态链接库 hook</p><p>3、zygote hook</p><p>4、Unidbg内嵌了多种Hook工具，目前主要是四种</p><ul><li><p>Dobby</p></li><li><p>HookZz</p></li><li><p>xHook</p></li><li><p>Whale</p></li></ul><p>这些hook 在写加固中很常用，同时在分析特定的情况也是很重要的手段，在游戏安全、加固、脱壳等等方面都有很重要的使用价值。因此开设这样一个专题来进行研究hook技术，实际上很对hook框架都是基于底层基础的inline、got等hook技术。</p><h4 id="8、密码学原理研究和魔改，自动化识别算法"><a href="#8、密码学原理研究和魔改，自动化识别算法" class="headerlink" title="8、密码学原理研究和魔改，自动化识别算法"></a>8、密码学原理研究和魔改，自动化识别算法</h4><p>之所以想要系统的研究密码学的知识，主要目的就是如何破译，同时如何快速识别逆向过程中出现的密码学算法，这是理论的研究。之所以研究魔改，意图是提高安全性，对算法的魔改可以在一定程度上阻隔解密的脚步。</p><p>学习的基本要求：</p><ul><li><p>了解基本的原理，学习和阅读相关密码学算法的paper，从数学理论研究到代码实现（Java、C++）</p></li><li><p>寻找各个算法的特征，研究如何自动化识别算法，比如IDA插件findcrypt3、<a href="https://github.com/Pr0214/findhash">findhash</a>、<a href="https://github.com/Pr0214/Unidbg_FindKey">unidbug_findKey</a></p></li><li><p>魔改算法，提高安全性能</p></li><li><p>逆向分析Android系统密码学库，逆向有代表性的APP实战</p></li></ul><p>常见的算法</p><p>单向散列加密</p><ul><li><p>SHA-1 安全散列算法</p></li><li><p>MD5 信息摘要算法</p></li><li><p>RIPEMD 基于MD4设计</p></li><li><p>BASE64 编码</p></li><li><p>SHA256 主流加密</p></li><li><p>HMAC 是秘钥相关的哈希运算消息认证码</p></li></ul><p>对称加密</p><ul><li><p>DES Data Encryption Standard</p></li><li><p>3DES 三重DES</p></li><li><p>AES Advanced Encryption Standard</p></li></ul><p>非对称加密</p><ul><li><p>RSA 一种早期非对称算法</p></li><li><p>DSA Digital Signature Algorithm 只用作签名验证</p></li><li><p>ECC 椭圆加密</p></li></ul><h2 id="大专题研究项目"><a href="#大专题研究项目" class="headerlink" title="大专题研究项目"></a>大专题研究项目</h2><h3 id="VMP-java2C等脱壳保护对抗研究"><a href="#VMP-java2C等脱壳保护对抗研究" class="headerlink" title="VMP/java2C等脱壳保护对抗研究"></a>VMP/java2C等脱壳保护对抗研究</h3><h4 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h4><p>这个项目主要是基于主动调用解决掉指令抽取加固后，针对重要方法实现了VMP、java2C加固方案的修复或者自动化的研究。同时该项目也肩负着加壳与脱壳的前沿技术对抗，如何实现尽可能更多的自动化技术。为了完成这个专题的研究，会专门在此文章中收集加固相关的文章作为技术研究支撑。</p><h4 id="论文-文章-paper-收集"><a href="#论文-文章-paper-收集" class="headerlink" title="论文/文章/paper 收集"></a>论文/文章/paper 收集</h4><h4 id="研究路径或者产出文章记录"><a href="#研究路径或者产出文章记录" class="headerlink" title="研究路径或者产出文章记录"></a>研究路径或者产出文章记录</h4><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h3 id="Android自动化漏洞检测引擎"><a href="#Android自动化漏洞检测引擎" class="headerlink" title="Android自动化漏洞检测引擎"></a>Android自动化漏洞检测引擎</h3><h4 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h4><p>这个研究专题目前是紧接着以往的作品开发赛进行延伸，实质上只是技术上的延伸，作品在目前看来框架都是不重要的，重点在于核心检测引擎。自动检测目前实际上开源的挺多的项目，但是不是效果不太明显，就是时效性，项目没人维护。目前计划是学习开源的项目，然后二次开发创新，跟进paper进行课题研究。</p><h2 id="阅读书籍研究项目"><a href="#阅读书籍研究项目" class="headerlink" title="阅读书籍研究项目"></a>阅读书籍研究项目</h2><h3 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h3><p>之所以想要开设这样的一个专题，其目的在于</p><p>督促自己系统的阅读书籍的习惯，将自己买过的技术书籍，根据实际的需求进行系统的学习，消化经典的书籍；</p><p>其二在于将书籍中的知识完成转化，变成自己的东西，真真实实的把书中的知识吃透并能够在更新迭代之中应用，很多书籍可能由于技术迭代，并不一定适用于当下或者有更加好的技术来实现。</p><p>其三是一直都想做一套完完整整的教程，做开源的项目。</p><p>其四是发现自身的不足，觉得应该系统的学习，改掉坏毛病</p><p>这个专题大致有如下安排或者说目标</p><p>1、每章可自由分小节总结技术文章，有真实案例定不能因为麻烦就不去复现和探索</p><p>2、技术更新，技术辐射到书中未更新的技术知识的补充</p><p>3、不要求一次性写的很完整，但是务必是每一章做到自己目前最大的努力，自己觉得OK才能开始下一章的书写。</p><p>4、在开始一个专题前，可以花费1-2星期对整本书的内容进行快速阅读，掌握书籍的整体脉络。</p><p>5、一段时间专注一件事</p><h3 id="《Android安全攻防权威指南》"><a href="#《Android安全攻防权威指南》" class="headerlink" title="《Android安全攻防权威指南》"></a>《Android安全攻防权威指南》</h3><h3 id="《Android应用安全防护和逆向分析》"><a href="#《Android应用安全防护和逆向分析》" class="headerlink" title="《Android应用安全防护和逆向分析》"></a>《Android应用安全防护和逆向分析》</h3><h3 id="《漏洞战争-软件漏洞分析精要》"><a href="#《漏洞战争-软件漏洞分析精要》" class="headerlink" title="《漏洞战争 软件漏洞分析精要》"></a>《漏洞战争 软件漏洞分析精要》</h3><h2 id="漏洞研究项目"><a href="#漏洞研究项目" class="headerlink" title="漏洞研究项目"></a>漏洞研究项目</h2><h3 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h3><p>之所以开设这么一个研究项目，主要的目的就是筹备漏洞研究相关的工作，实际上在车联网/物联网安全工作过程中，很多都是多漏洞的挖掘和利用，但是当时自身需要完成项目的需求和能力上的欠缺，并未对漏洞这块进行深入的研究，这是和自身的要求是违背的。</p><p>达到的目的：</p><p>1、利用好手上的资源，比如科恩车联网漏洞报告，科恩的IOT检测平台、Android漏洞检测平台以及其知识库。</p><p>2、分析历史比较重要的CVE漏洞，进行复现和原理分析</p><p>3、自动化漏洞挖掘工具的二次开发，可以学习huluwa的9月报</p><p>4、实现的目的就是挖掘属于自己的漏洞，漏洞类型不限于Android/IOS、IOT设备、车联网设备等等。</p><h3 id="车联网漏洞报告的提取和整理"><a href="#车联网漏洞报告的提取和整理" class="headerlink" title="车联网漏洞报告的提取和整理"></a>车联网漏洞报告的提取和整理</h3><p>主要是整理自己手上的车联网的漏洞报告，提取出比较有学习价值的漏洞报告，如果可以复现也可以自己写demo进行复现。</p><h3 id="Android自动化检测知识库的整理学习"><a href="#Android自动化检测知识库的整理学习" class="headerlink" title="Android自动化检测知识库的整理学习"></a>Android自动化检测知识库的整理学习</h3><p>这个专题主要是学习科恩自动化检测平台的漏洞知识库，熟悉Android的漏洞原理，相应的poc的构造，如何去发现这种类型的漏洞，这里实际上是可以结合当初自己搭建开发自动化检测平台的过程进行反思、对比和总结。</p><h3 id="CVE分析"><a href="#CVE分析" class="headerlink" title="CVE分析"></a>CVE分析</h3><p>这个专题就是实打实的漏洞的复现环节，以前实际上是有收集过一点Android上的CVE漏洞，不过一直没有去分析和复现。所以这个专题在完成上面基本的漏洞知识后就可以展开对漏洞的复现。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>Android安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android安全</tag>
      
      <tag>Android加固</tag>
      
      <tag>Android脱壳</tag>
      
      <tag>FRIDA</tag>
      
      <tag>书籍阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022论文阅读计划——1月</title>
    <link href="/2022/01/10/2022%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92%E2%80%94%E2%80%941%E6%9C%88/"/>
    <url>/2022/01/10/2022%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92%E2%80%94%E2%80%941%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">论文标题</th><th align="center">论文技术栈</th><th align="center">解读文章</th></tr></thead><tbody><tr><td align="left">您不得重新包装！ 揭秘 Android 上的反重新包装（you Shall not Repackage! Demystifying Anti-packaging on Android）</td><td align="center">您不得重新包装！ 揭秘 Android 上的反重新包装（you Shall not Repackage! Demystifying Anti-packaging on Android）</td><td align="center">您不得重新包装！ 揭秘 Android 上的反重新包装（you Shall not Repackage! Demystifying Anti-packaging on Android）</td></tr><tr><td align="left"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h5 id="您不得重新包装！-揭秘-Android-上的反重新包装（you-Shall-not-Repackage-Demystifying-Anti-packaging-on-Android）"><a href="#您不得重新包装！-揭秘-Android-上的反重新包装（you-Shall-not-Repackage-Demystifying-Anti-packaging-on-Android）" class="headerlink" title="您不得重新包装！ 揭秘 Android 上的反重新包装（you Shall not Repackage! Demystifying Anti-packaging on Android）"></a>您不得重新包装！ 揭秘 Android 上的反重新包装（you Shall not Repackage! Demystifying Anti-packaging on Android）</h5><blockquote><p> 在这方面，本文旨在提出当前反再包装方法的主要问题。本文的贡献有三个方面: 1) 分析了当前最先进的反重新包装方案的弱点 (即通过Dex加密，AppIS，SSN，SDC，BombDroid和NRP进行自我保护)，2) 总结构成这些方案的反重新包装技术的主要攻击媒介，以及3) 展示这种攻击媒介如何规避当前的提议。本文还将展示对NRP的全 ﬂ 边缘攻击，NRP是迄今为止唯一公开可用的反重新包装工具。</p></blockquote><h5 id="当程序分析遇到字节码搜索：BackDroid-中现代-Android-应用程序的有针对性和高效的跨过程分析（When-Program-Analysis-Meets-Bytecode-Search-Targeted-and-Efﬁcient-Inter-procedural-Analysis-of-Modern-Android-Apps-in-BackDroid）"><a href="#当程序分析遇到字节码搜索：BackDroid-中现代-Android-应用程序的有针对性和高效的跨过程分析（When-Program-Analysis-Meets-Bytecode-Search-Targeted-and-Efﬁcient-Inter-procedural-Analysis-of-Modern-Android-Apps-in-BackDroid）" class="headerlink" title="当程序分析遇到字节码搜索：BackDroid 中现代 Android 应用程序的有针对性和高效的跨过程分析（When Program Analysis Meets Bytecode Search:Targeted and Efﬁcient Inter-procedural Analysis of Modern Android Apps in BackDroid）"></a>当程序分析遇到字节码搜索：BackDroid 中现代 Android 应用程序的有针对性和高效的跨过程分析（When Program Analysis Meets Bytecode Search:Targeted and Efﬁcient Inter-procedural Analysis of Modern Android Apps in BackDroid）</h5><blockquote><p>我们提出了一种称为 on-the-fly 字节码搜索的技术，它可以在需要定位调用者时及时搜索反汇编的应用程序字节码文本。 通过这种方式，它逐步引导有针对性（和向后）的过程间分析，直到到达入口点，而不依赖于整个应用程序图。 然而，由于 Java 多态性、回调、异步流、静态初始化器和 Android 应用程序中的组件间通信，这种基于搜索的跨过程分析具有挑战性。 我们通过提出一组利用灵活搜索和转发对象污点分析的字节码搜索机制来克服我们上下文中的这些独特障碍。 在这种新的过程间分析之上，我们进一步调整了传统的反向切片和正向常量传播，以提供对接收器 API 调用的完整数据流跟踪。 我们已经实现了一个名为 BackDroid 的原型，并将其与 Amandroid 进行了比较，以分析 3,178 个现代流行应用程序的加密和 SSL 错误配置。 评估表明，对于此类基于 sink 的问题，BackDroid 的速度提高了 37 倍（2.13 对 78.15 分钟）并且没有超时故障（在 Amandroid 中为 35%），同时保持接近甚至更好的检测效率。</p></blockquote><h5 id="VMHunt：一种可验证的部分虚拟化二进制代码简化方法（VMHunt-A-Verifiable-Approach-to-Partially-Virtualized-Binary-Code-Simplification）"><a href="#VMHunt：一种可验证的部分虚拟化二进制代码简化方法（VMHunt-A-Verifiable-Approach-to-Partially-Virtualized-Binary-Code-Simplification）" class="headerlink" title="VMHunt：一种可验证的部分虚拟化二进制代码简化方法（VMHunt: A Verifiable Approach to Partially-Virtualized Binary Code Simplification）"></a>VMHunt：一种可验证的部分虚拟化二进制代码简化方法（VMHunt: A Verifiable Approach to Partially-Virtualized Binary Code Simplification）</h5><blockquote><p>在本文中，对代码虚拟化的类型和范围的假设较少，我们提出了一种可验证的方法来解决部分虚拟化二进制代码简化的挑战。 我们的关键见解是代码虚拟化是一种进程级虚拟机（VM），进入和退出 VM 时的上下文切换模式可用于检测 VM 边界。 基于VM边界的范围，我们简化了虚拟化代码。 我们首先忽略给定虚拟化片段中不影响该片段最终结果的所有指令。 为了更好地还原通过按位运算对变量进行编码的数据混淆效果，我们随后运行了一种称为多粒度符号执行的新符号执行，以进一步简化跟踪片段。 生成的简洁符号公式有助于我们简化结果的正确性测试。 我们已经将我们的想法实现为开源工具 VMHunt，并使用真实世界的应用程序和恶意软件对其进行了评估。 令人鼓舞的实验结果表明，VMHunt 是对现有技术的显着改进。</p></blockquote><h5 id="VMAttack：对基于虚拟化的打包二进制文件进行反混淆（VMAttack-Deobfuscating-Virtualization-Based-Packed-Binaries）"><a href="#VMAttack：对基于虚拟化的打包二进制文件进行反混淆（VMAttack-Deobfuscating-Virtualization-Based-Packed-Binaries）" class="headerlink" title="VMAttack：对基于虚拟化的打包二进制文件进行反混淆（VMAttack: Deobfuscating Virtualization-Based Packed Binaries）"></a>VMAttack：对基于虚拟化的打包二进制文件进行反混淆（VMAttack: Deobfuscating Virtualization-Based Packed Binaries）</h5><blockquote><p>我们提出了 VMAttack，这是一种基于自动静态和动态分析的虚拟化打包二进制文件的反混淆工具，它提供了反汇编的简化视图。 VMAttack 是作为 IDA Pro 的插件实现的，因此可以与手动逆向工程无缝集成。 通过分析受保护二进制文件 VM 层的内部工作原理，显着降低了反汇编视图的复杂性。 使用静态分析，基于专门为基于堆栈的虚拟机设计的中间表示，VM 的复杂字节码序列被映射到易于阅读的伪代码指令。 使用动态分析，我们识别结构组件，如解释器循环，并通过过滤掉执行跟踪的语义冗余指令来压缩指令序列。 综合结果对静态和动态分析的结果进行评分，为逆向工程师提供了一种去混淆的反汇编，可以容忍单一分析技术的弱点。 VMAttack 目前仅限于基于堆栈的虚拟机，如 VMProtect。 我们使用用 VMProtect 混淆的二进制文件评估了 VMAttack，并在动态分析和静态和动态组合分析中实现了平均执行跟踪减少 89.86% 和 96.67%</p></blockquote><h5 id="VirtSC：将虚拟化混淆与自校验和相结合（VirtSC-Combining-Virtualization-Obfuscation-with-Self-Checksumming）"><a href="#VirtSC：将虚拟化混淆与自校验和相结合（VirtSC-Combining-Virtualization-Obfuscation-with-Self-Checksumming）" class="headerlink" title="VirtSC：将虚拟化混淆与自校验和相结合（VirtSC: Combining Virtualization Obfuscation with Self-Checksumming）"></a>VirtSC：将虚拟化混淆与自校验和相结合（VirtSC: Combining Virtualization Obfuscation with Self-Checksumming）</h5><blockquote><p>自校验和 (SC) 是一种防篡改技术，可确保内存中的某些程序段（代码）在运行时散列为已知值。 SC对应用程序的限制很少，因此可以保护绝大多数程序。 SC 中的代码验证需要在编译后计算预期的哈希值，因为机器代码以前是未知的。 这意味着需要在二进制可执行文件中调整预期的哈希值，因此由于此调整步骤，将 SC 与其他保护结合起来受到限制。 然而，混淆保护通常是必要的，因为 SC 保护可以通过模式匹配轻松检测和禁用。 在本文中，我们提出了一种使用虚拟化混淆的分层保护，产生了一种与架构无关的 SC 保护，不需要编译后调整。</p></blockquote><h5 id="释放编译器优化对二进制代码差异的隐藏力量：一项实证研究（Unleashing-the-Hidden-Power-of-Compiler-Optimization-on-Binary-Code-Difference-An-Empirical-Study）"><a href="#释放编译器优化对二进制代码差异的隐藏力量：一项实证研究（Unleashing-the-Hidden-Power-of-Compiler-Optimization-on-Binary-Code-Difference-An-Empirical-Study）" class="headerlink" title="释放编译器优化对二进制代码差异的隐藏力量：一项实证研究（Unleashing the Hidden Power of Compiler Optimization on Binary Code Difference:An Empirical Study）"></a>释放编译器优化对二进制代码差异的隐藏力量：一项实证研究（Unleashing the Hidden Power of Compiler Optimization on Binary Code Difference:An Empirical Study）</h5><blockquote><p>本文首先系统地研究了编译器优化对二进制代码差异的有效性。 我们为二进制代码差异的自动调整定制了基于搜索的迭代编译。 我们开发 BinTuner 来搜索可以最大化二进制代码差异量的近似最优优化序列。 我们在 SPEC 基准（CPU2006 和 CPU2017）、Coreutils 和 OpenSSL 上使用 GCC 10.2 和 LLVM 11.0 运行 BinTuner。 我们的实验表明，以 279 到 1881 次编译迭代为代价，BinTuner 可以找到明显优于一般 -Ox 设置的自定义优化序列。 BinTuner 的输出严重破坏了著名的二进制差异工具的比较。 此外，通过 BinTuner 调优的物联网恶意软件变种的检测率下降了 50% 以上。 我们的发现为安全分析师描绘了一个警示故事，即攻击者有一种新方法可以经济高效地改变恶意软件代码，研究界需要退后一步重新评估优化阻力评估。</p></blockquote><h5 id="了解-Android-混淆技术：野外大规模调查（Understanding-Android-Obfuscation-Techniques-A-Large-Scale-Investigation-in-the-Wild）"><a href="#了解-Android-混淆技术：野外大规模调查（Understanding-Android-Obfuscation-Techniques-A-Large-Scale-Investigation-in-the-Wild）" class="headerlink" title="了解 Android 混淆技术：野外大规模调查（Understanding Android Obfuscation Techniques:A Large-Scale Investigation in the Wild）"></a>了解 Android 混淆技术：野外大规模调查（Understanding Android Obfuscation Techniques:A Large-Scale Investigation in the Wild）</h5><blockquote><p>在本文中，我们寻求更好地理解 Android 混淆，并通过在野外进行的大规模调查来描述混淆使用的整体视图。 我们特别关注四种流行的混淆方法：标识符重命名、字符串加密、Java 反射和打包。 为了获得有意义的统计结果，我们为每种混淆技术设计了高效且轻量级的检测模型，并将它们应用于我们的海量 APK 数据集（从 Google Play、多个第三方市场和恶意软件数据库收集）。 我们从结果中学到了几个有趣的事实。 例如，恶意软件作者更频繁地使用字符串加密，第三方市场上的应用程序比 Google Play 更多。 我们也对每个发现的解释感兴趣。 因此我们在采样后对部分安卓应用进行了深入的代码分析。 我们相信我们的研究将帮助开发人员选择最合适的混淆方法，同时帮助研究人员朝着正确的方向改进代码分析系统。</p></blockquote><h5 id="使用-TIRO-处理-Android-中基于运行时的混淆-Tackling-runtime-based-obfuscation-in-Android-with-TIRO"><a href="#使用-TIRO-处理-Android-中基于运行时的混淆-Tackling-runtime-based-obfuscation-in-Android-with-TIRO" class="headerlink" title="使用 TIRO 处理 Android 中基于运行时的混淆(Tackling runtime-based obfuscation in Android with TIRO)"></a>使用 TIRO 处理 Android 中基于运行时的混淆(<a href="https://www.usenix.org/conference/usenixsecurity18/presentation/wong">Tackling runtime-based obfuscation in Android with TIRO</a>)</h5><blockquote><p>我们提出了 TIRO，这是一个使用 TargetInstrument-Run-Observe 方法的 Android 反混淆框架。 TIRO 提供了一个统一的框架，可以对使用传统混淆和更新的基于运行时的混淆技术组合的恶意软件进行反混淆。 我们在现代 Android 恶意软件样本数据集上评估和使用 TIRO，发现 TIRO 可以自动检测和反转基于语言和基于运行时的混淆。 我们还在来自 VirusTotal 的 2000 个恶意软件样本的语料库上评估 TIRO，发现 80% 的样本中存在基于运行时的混淆技术，这表明基于运行时的混淆是当今 Android 恶意软件作者使用的重要工具。</p></blockquote><h5 id="符号去混淆：从虚拟化代码回到原始代码-Symbolic-deobfuscation-from-virtualized-code-back-to-the-original"><a href="#符号去混淆：从虚拟化代码回到原始代码-Symbolic-deobfuscation-from-virtualized-code-back-to-the-original" class="headerlink" title="符号去混淆：从虚拟化代码回到原始代码(Symbolic deobfuscation: from virtualized code back to the original)"></a>符号去混淆：从虚拟化代码回到原始代码(Symbolic deobfuscation: from virtualized code back to the original)</h5><blockquote><p>我们提出了一种新的自动化动态分析，旨在完全恢复虚拟化代码的原始程序行为——从 VM 机器中清除，并编译回原始二进制文件的新（去虚拟化）版本。 我们通过广泛的实验评估，评估其精度、效率和通用性，展示了该方法在小型哈希函数（典型的受混淆保护的专有资产）上的潜力，并且我们解决了 Tigress Challenge（的非 jitted 部分） 以完全自动化的方式。 虽然我们的方法仍然显示出对可以处理的程序类别的限制，但这项工作清楚地表明，可以轻松地从其虚拟化版本中检索类似哈希的函数，挑战虚拟化是防止逆向的最佳防御这一常识。 在不久的将来，我们将专注于重建更复杂的程序结构，例如用户相关的循环或内存访问。</p></blockquote><h5 id="Speech-to-SQL：从自然语言问题转向语音驱动的-SQL-查询生成-Speech-to-SQL-Towards-Speech-driven-SQL-Query-Generation-From-Natural-Language-Question"><a href="#Speech-to-SQL：从自然语言问题转向语音驱动的-SQL-查询生成-Speech-to-SQL-Towards-Speech-driven-SQL-Query-Generation-From-Natural-Language-Question" class="headerlink" title="Speech-to-SQL：从自然语言问题转向语音驱动的 SQL 查询生成(Speech-to-SQL: Towards Speech-driven SQL Query Generation From Natural Language Question)"></a>Speech-to-SQL：从自然语言问题转向语音驱动的 SQL 查询生成(Speech-to-SQL: Towards Speech-driven SQL Query Generation From Natural Language Question)</h5><blockquote><p>我们进一步提出了一种名为 SpeechSQLNet 的新型端到端神经架构，无需外部 ASR 步骤即可将人类语音直接转换为 SQL 查询。 SpeechSQLNet 的优势在于充分利用了语音中丰富的语言信息。 据我们所知，这是第一次尝试基于任意自然语言问题直接合成 SQL，而不是基于自然语言版本的 SQL 或其具有有限 SQL 语法的变体。 为了验证所提出的问题和模型的有效性，我们通过搭载广泛使用的 text-to-SQL 数据集进一步构建了一个名为 SpeechQL 的数据集。 对该数据集的广泛实验评估表明，SpeechSQLNet 可以直接从人类语音中合成高质量的 SQL 查询，在精确匹配精度方面优于各种竞争对手以及级联方法。 我们预计 Speech-toSQL 将激发更多关于更有效和高效的人机界面的研究，以降低使用关系数据库的障碍。</p></blockquote><h5 id="二进制的语义感知混淆方案预测（Semantics-aware-Obfuscation-Scheme-Prediction-for-Binary）"><a href="#二进制的语义感知混淆方案预测（Semantics-aware-Obfuscation-Scheme-Prediction-for-Binary）" class="headerlink" title="二进制的语义感知混淆方案预测（Semantics-aware Obfuscation Scheme Prediction for Binary）"></a>二进制的语义感知混淆方案预测（Semantics-aware Obfuscation Scheme Prediction for Binary）</h5><blockquote><p>在本文中，我们介绍了一种语义感知的混淆检测方法，在 277,131 个组装文档的实验数据集上，单个混淆的检测率为 89.4%，多次混淆的检测率为 82.79%。 此外，我们还在慕尼黑工业大学（德国慕尼黑工业大学）提供的混淆基准上测试了 OBFEYE。 单次混淆测试准确率为91.81%，多次混淆准确率高达97.84%。 此外，我们已经证明，我们的方法需要适度的计算来执行特征提取，并且它可以在适度的时间范围内在单个 CPU 上对我们的语料库实现良好的准确性。 特别是，我们构建了包含 277,131 个带有汇编代码的混淆文件、8 个单一混淆算法和 6 个多重混淆算法的数据集，这对于其他致力于研究代码混淆的研究人员来说是有价值的</p></blockquote><h5 id="SCORE：源代码优化和重构（SCORE-Source-Code-Optimization-amp-REconstruction）"><a href="#SCORE：源代码优化和重构（SCORE-Source-Code-Optimization-amp-REconstruction）" class="headerlink" title="SCORE：源代码优化和重构（SCORE: Source Code Optimization &amp;REconstruction）"></a>SCORE：源代码优化和重构（SCORE: Source Code Optimization &amp;REconstruction）</h5><blockquote><p>本文介绍了源级优化工具 SCORE 的设计及其评估结果。 代码优化是一种众所周知的技术，但通常应用于 IR 级别或更低级别。 然而，需要更多的研究来通过重构控制流来提高可读性，因为商业混淆工具在源代码级别提供控制流混淆。 特别是，作为源级，控制流混淆在编译过程中根本没有优化，编译后的二进制文件的分析时间大大延迟。 此外，由于编译器在编译过程中会剥离信息，因此在二进制级别撤消控制流混淆比在源代码级别更困难。  SCORE 在源代码层面进行控制流重构和优化，不仅大大提高了源代码的可读性，而且也大大提高了二进制代码的结构。 由于在控制流重构之后应用了优化技术，可以优化更多的模式，提供比编译器的优化模块更高的优化效果。 特别是，这项研究首次证明了源级优化和控制流重建的必要性。</p></blockquote><h5 id="基于-LLVM-的-SATURN-软件反混淆框架-SATURN-Software-Deobfuscation-Framework-Based-on-LLVM"><a href="#基于-LLVM-的-SATURN-软件反混淆框架-SATURN-Software-Deobfuscation-Framework-Based-on-LLVM" class="headerlink" title="基于 LLVM 的 SATURN 软件反混淆框架(SATURN:Software Deobfuscation Framework Based on LLVM)"></a>基于 LLVM 的 SATURN 软件反混淆框架(SATURN:Software Deobfuscation Framework Based on LLVM)</h5><blockquote><p> 在本文中，我们讨论了一种基于编译器框架 LLVM 的去混淆和重新编译混淆代码的通用方法。 我们展示了如何将二进制代码提升回编译器中间语言 LLVM-IR，并解释我们如何使用基于编译器优化和可满足性模理论的迭代控制流图构造算法 [3] 恢复模糊二进制函数的控制流图（ SMT）解决。 我们的方法不对混淆代码做任何假设，而是使用 LLVM 和 Souper Optimizer 中可用的强大编译器优化来简化混淆。 我们的实验结果表明，这种方法可以有效地削弱甚至消除应用的混淆技术，如常量展开、某些基于算术的不透明表达式、死代码插入、虚假控制流或公共和商业混淆器中的整数编码。 恢复的 LLVM-IR 可以通过自定义反混淆通道进一步处理，这些通道现在应用在与注入的混淆技术相同的级别，或使用可用的 LLVM 后端之一重新编译。 所展示的工作是在一个名为 SATURN 的反混淆工具中实现的（图 1）。</p></blockquote><h5 id="使用-ReDex-优化器逆向-Android-应用程序中的控制流结构混淆（Reversing-Obfuscated-Control-Flow-Structures-in-Android-Apps-using-ReDex-Optimizer）"><a href="#使用-ReDex-优化器逆向-Android-应用程序中的控制流结构混淆（Reversing-Obfuscated-Control-Flow-Structures-in-Android-Apps-using-ReDex-Optimizer）" class="headerlink" title="使用 ReDex 优化器逆向 Android 应用程序中的控制流结构混淆（Reversing Obfuscated Control Flow Structures in Android Apps using ReDex Optimizer）"></a>使用 ReDex 优化器逆向 Android 应用程序中的控制流结构混淆（Reversing Obfuscated Control Flow Structures in Android Apps using ReDex Optimizer）</h5><blockquote><p>在本文中，我们应用 ReDex 优化器来逆转 Obfuscapk 系统对开源 Android 应用程序执行的控制流混淆。 然后，我们分析了 ReDex 在逆向 Android 应用程序控制流混淆的反混淆能力方面的有效性和局限性。 实验结果表明，ReDex 可以恢复使用 Obfuscapk 混淆器的控制流混淆技术混淆的 1108 个应用程序中的 1089 个。 在优化字节码的过程中，ReDex 显着减少了方法和字段的数量，但在去除与无用的 goto 语句和随机 nop 指令相关的死代码方面存在一定的局限性。</p></blockquote><h5 id="QSynth-一种基于程序综合的二进制代码反混淆方法-QSynth-A-Program-Synthesis-based-Approach-for-Binary-Code-Deobfuscation"><a href="#QSynth-一种基于程序综合的二进制代码反混淆方法-QSynth-A-Program-Synthesis-based-Approach-for-Binary-Code-Deobfuscation" class="headerlink" title="QSynth - 一种基于程序综合的二进制代码反混淆方法(QSynth - A Program Synthesis based Approach for Binary Code Deobfuscation)"></a>QSynth - 一种基于程序综合的二进制代码反混淆方法(QSynth - A Program Synthesis based Approach for Binary Code Deobfuscation)</h5><blockquote><p>我们提出了一种利用 DSE 和程序合成的通用方法，以成功合成使用混合布尔算术、数据编码或虚拟化混淆的程序。 所提出的合成算法是一种由自上而下的呼吸优先搜索引导的离线枚举合成原语。 我们展示了它对最先进的混淆器的有效性及其可扩展性，因为它取代了其他基于合成的类似方法。 我们还展示了它在存在复合混淆（各种技术的组合）时的有效性。 这项正在进行的工作启发了综合针对某些类型的混淆的有效性，并为更强大的算法和简化策略开辟了道路。</p></blockquote><h5 id="使用多个DEX文件保护Android应用程序免受静态反向工程攻击-Protecting-Android-applications-with-multiple-DEX-files-against-Static-Reverse-Engineering-Attacks"><a href="#使用多个DEX文件保护Android应用程序免受静态反向工程攻击-Protecting-Android-applications-with-multiple-DEX-files-against-Static-Reverse-Engineering-Attacks" class="headerlink" title="使用多个DEX文件保护Android应用程序免受静态反向工程攻击(Protecting Android applications with multiple DEX files against Static Reverse Engineering Attacks)"></a>使用多个DEX文件保护Android应用程序免受静态反向工程攻击(Protecting Android applications with multiple DEX files against Static Reverse Engineering Attacks)</h5><blockquote><p>Android应用程序包 (APK) 使用DEX格式作为可执行文件格式。由于DEX文件采用Java字节码格式，因此可以使用静态反向工程工具轻松获取Java源代码。此功能使窃取Android应用程序变得容易。ijiami、liapp、阿里巴巴等工具可用于保护应用程序免受静态反向工程攻击。这些工具通常将加密的clases.dex保存在APK文件中，然后在应用程序启动时动态解密和加载。但是，这些工具不能保护多索引Android应用程序。多索引Android应用程序是包含多个DEX文件的APK，主要用于大型应用程序。我们提出了一种保护多索引Android应用免受静态反向工程攻击的方法。该方法加密多个DEX文件并将其存储在APK文件中。启动APK时，加密的DEX文件将被动态解密和加载。实验结果表明，该方法能够有效地保护多索引APK。</p></blockquote><h5 id="并行空间旅行：Android应用级虚拟化的安全性分析（Parallel-Space-Traveling-A-Security-Analysis-of-App-Level-Virtualization-in-Android）"><a href="#并行空间旅行：Android应用级虚拟化的安全性分析（Parallel-Space-Traveling-A-Security-Analysis-of-App-Level-Virtualization-in-Android）" class="headerlink" title="并行空间旅行：Android应用级虚拟化的安全性分析（Parallel Space Traveling: A Security Analysis of App-Level Virtualization in Android）"></a>并行空间旅行：Android应用级虚拟化的安全性分析（Parallel Space Traveling: A Security Analysis of App-Level Virtualization in Android）</h5><blockquote><p>在本文中，我们对应用级虚拟化的实施以及用户将面临的安全威胁进行了系统研究。 我们调查了一批由第三方开发的支持虚拟化的应用程序。 我们发现这些应用程序在用户中非常受欢迎，并且使用相同的设计逻辑实现。 它们可以加载在彼此不完全隔离的环境中运行的 GuestApp。 因此，对于恶意虚拟化应用程序或集成的第三方库，我们揭示了几种潜在的攻击（权限提升、代码注入、勒索软件等）。 我们还发现虚拟化技术已被恶意软件滥用，这些恶意软件可以发起多种新攻击。 攻击者可以在不携带任何网络钓鱼代码的情况下实施劫持攻击，或在虚拟化框架内重新打包恶意软件以逃避防病毒检测。 我们从多个应用市场找到了 159 个重新打包的样本。 其中 68 个打包恶意软件以广泛分发。 最后，我们讨论了针对用户、开发人员和供应商的各种缓解解决方案。</p></blockquote><h5 id="基于对比学习的Android恶意软件模糊分析（Obfuscation-resilient-Android-Malware-Analysis-Based-on-Contrastive-Learning）"><a href="#基于对比学习的Android恶意软件模糊分析（Obfuscation-resilient-Android-Malware-Analysis-Based-on-Contrastive-Learning）" class="headerlink" title="基于对比学习的Android恶意软件模糊分析（Obfuscation-resilient Android Malware Analysis Based on Contrastive Learning）"></a>基于对比学习的Android恶意软件模糊分析（Obfuscation-resilient Android Malware Analysis Based on Contrastive Learning）</h5><blockquote><p>基于所提出的分析，我们设计了一个系统，可以实现对 Android 恶意软件的鲁棒和可解释的分类。 为了实现稳健的分类，我们对恶意软件样本进行对比学习，以学习可以自动从恶意软件样本中提取稳健特征的编码器。 为了实现可解释的分类，我们通过中心性分析将样本的函数调用图转换为图像。 然后通过可视化技术获得相应的热图。 这些热图可以帮助用户理解为什么恶意软件被归类为这个家族。 我们实现了 IFDroid 并对两个广泛使用的数据集进行了广泛的评估。 实验结果表明，IFDroid 优于最先进的 Android 恶意软件家族分类系统。 此外，IFDroid 能够在对 8,112 个混淆恶意软件样本进行分类时保持 98.2% 的真阳性率。</p></blockquote><h5 id="Obfuscapk：用于-Android-应用程序的开源黑盒混淆工具-Obfuscapk-An-open-source-black-box-obfuscation-tool-for-Android-apps"><a href="#Obfuscapk：用于-Android-应用程序的开源黑盒混淆工具-Obfuscapk-An-open-source-black-box-obfuscation-tool-for-Android-apps" class="headerlink" title="Obfuscapk：用于 Android 应用程序的开源黑盒混淆工具(Obfuscapk: An open-source black-box obfuscation tool for Android apps)"></a>Obfuscapk：用于 Android 应用程序的开源黑盒混淆工具(Obfuscapk: An open-source black-box obfuscation tool for Android apps)</h5><blockquote><p>Obfuscapk 是一个开源的自动混淆工具，适用于以黑盒方式工作的 Android 应用程序（即，它不需要应用程序源代码）。  Obfuscapk 支持高级混淆功能，并具有模块化架构，可以直接扩展以支持新的混淆技术。 本文介绍了 Obfuscapk 的架构、主要的混淆技术，以及 Obfuscapk CLI 的基础知识。 最后，本文讨论了 Obfuscapk 的实际用例，并对该工具在 Google Play 商店的 1000 个“下载次数最多”的 APK 上的可靠性进行了实证评估。</p></blockquote><h5 id="MobileFindr：逆向移动二进制文件的函数相似性识别-MobileFindr-Function-Similarity-Identiﬁcation-for-Reversing-Mobile-Binaries"><a href="#MobileFindr：逆向移动二进制文件的函数相似性识别-MobileFindr-Function-Similarity-Identiﬁcation-for-Reversing-Mobile-Binaries" class="headerlink" title="MobileFindr：逆向移动二进制文件的函数相似性识别(MobileFindr: Function Similarity Identiﬁcation for Reversing Mobile Binaries)"></a>MobileFindr：逆向移动二进制文件的函数相似性识别(MobileFindr: Function Similarity Identiﬁcation for Reversing Mobile Binaries)</h5><blockquote><p>在本文中，我们提出了 MobileFindr，一种基于设备跟踪的移动平台功能相似性识别框架。 MobileFindr 在真实的移动设备上运行，并通过动态检测提取函数执行行为，然后使用收集的行为表征函数并通过距离计算执行函数匹配，从而缓解了许多流行的反逆转技术。 我们使用现实世界中排名靠前的移动框架和应用程序评估了 MobileFindr。 实验结果表明，MobileFindr 在更好的混淆弹性和准确性方面优于现有的最先进工具。</p></blockquote><h5 id="ART中基于字节码捕获的移动代码对抗逆向方案-Mobile-Code-Anti-Reversing-Scheme-Based-on-Bytecode-Trapping-in-ART"><a href="#ART中基于字节码捕获的移动代码对抗逆向方案-Mobile-Code-Anti-Reversing-Scheme-Based-on-Bytecode-Trapping-in-ART" class="headerlink" title="ART中基于字节码捕获的移动代码对抗逆向方案(Mobile Code Anti-Reversing Scheme Based on Bytecode Trapping in ART)"></a>ART中基于字节码捕获的移动代码对抗逆向方案(Mobile Code Anti-Reversing Scheme Based on Bytecode Trapping in ART)</h5><blockquote><p>从应用程序安全的角度来看，需要详细了解 ART，例如新的文件格式和代码之间的执行切换方法。 在本文中，我们证明了现有的基于 Dalvik 的应用程序漏洞可以在 ART 中按原样利用。 这是因为现有的 Dalvik 可执行文件共存于 ART 可执行文件中，这些 Dalvik 字节码与编译后的机器码是一一对应的关系。 然后，我们提出了一种基于 ART 的应用程序保护方案，通过动态消除一对一映射来保护这一点。 此外，实施所提出的方案以通过实验评估其逆向工程阻力和性能。</p></blockquote><h5 id="MBA-Blast：揭示和简化混合布尔算术混淆-MBA-Blast-Unveiling-and-Simplifying-Mixed-Boolean-Arithmetic-Obfuscation"><a href="#MBA-Blast：揭示和简化混合布尔算术混淆-MBA-Blast-Unveiling-and-Simplifying-Mixed-Boolean-Arithmetic-Obfuscation" class="headerlink" title="MBA-Blast：揭示和简化混合布尔算术混淆(MBA-Blast: Unveiling and Simplifying Mixed Boolean-Arithmetic Obfuscation)"></a>MBA-Blast：揭示和简化混合布尔算术混淆(MBA-Blast: Unveiling and Simplifying Mixed Boolean-Arithmetic Obfuscation)</h5><blockquote><p>在本文中，我们首先揭开 MBA 混淆的底层机制。 我们的深入研究揭示了 1 位和 n 位变量之间 MBA 转换的隐藏双向特征。 我们利用此功能并提出了一种可行的解决方案，以通过 MBA 混淆有效地对代码进行反混淆。 我们的主要见解是 MBA 转换在 1 位和 n 位变量上的行为方式相同。 我们提供了一个数学证明来保证这一发现的正确性。 我们进一步开发了一种新技术，通过在 1 位空间中进行算术缩减，将 MBA 表达式简化为普通的简单形式。 我们将这个想法实现为一个名为 MBA-Blast 的开源原型，并在一个包含大约 10,000 个 MBA 表达式的综合数据集上对其进行了评估。 我们还在真实的二进制代码反混淆场景中测试了我们的方法，这表明 MBA-Blast 可以帮助人类分析师充分利用 SMT 求解器的优势。 与现有工作相比，MBA-Blast 是最通用、最高效的 MBA 反混淆技术； 它具有坚实的理论基础，以及最高的成功率和可忽略的开销。</p></blockquote><h5 id="LOKI：针对自动攻击强化代码混淆-LOKI-Hardening-Code-Obfuscation-Against-Automated-Attacks"><a href="#LOKI：针对自动攻击强化代码混淆-LOKI-Hardening-Code-Obfuscation-Against-Automated-Attacks" class="headerlink" title="LOKI：针对自动攻击强化代码混淆(LOKI: Hardening Code Obfuscation Against Automated Attacks)"></a>LOKI：针对自动攻击强化代码混淆(LOKI: Hardening Code Obfuscation Against Automated Attacks)</h5><blockquote><p>在这项工作中，我们介绍了LOKI，一种用于代码混淆的方法，该方法可抵抗所有已知的自动去混淆攻击。为此，我们部署了多种技术，包括一种通用方法来合成经过正式验证的任意复杂性表达式。与依赖于一些硬编码生成规则的最新方法相反，我们的表达方式更加多样化，更难与模式匹配。此外，LOKI可以防止先前未说明的攻击向量 (例如程序合成)，为此它将成功率降低到仅19%。总体而言，我们的设计带来的开销明显更少，同时提供了更强的保护级别。</p></blockquote><h5 id="基于AST结构和令牌的混淆着陆点轻量级检测方法-Lightweight-Detection-Method-of-Obfuscated-Landing-Sites-Based-on-the-AST-Structure-and-Tokens"><a href="#基于AST结构和令牌的混淆着陆点轻量级检测方法-Lightweight-Detection-Method-of-Obfuscated-Landing-Sites-Based-on-the-AST-Structure-and-Tokens" class="headerlink" title="基于AST结构和令牌的混淆着陆点轻量级检测方法(Lightweight Detection Method of Obfuscated Landing Sites Based on the AST Structure and Tokens)"></a>基于AST结构和令牌的混淆着陆点轻量级检测方法(Lightweight Detection Method of Obfuscated Landing Sites Based on the AST Structure and Tokens)</h5><blockquote><p>攻击者使用多种技术插入重定向 JavaScript，将用户引导至恶意网页，并在其中执行下载驱动攻击。 特别是，登陆站点中的重定向 JavaScript 被混淆以避免检测系统。 在本文中，我们提出了一种基于静态分析的轻量级检测系统，用于对混淆类型进行分类并及时检测混淆重定向 JavaScript。 所提出的模型通过将 JavaScript 转换为抽象语法树 (AST) 来检测混淆重定向 JavaScript。 然后，提取结构和令牌信息。 具体来说，我们提出了一种轻量级的 AST 来识别混淆类型和修改后的词频-逆文档频率，从而有效地检测恶意重定向 JavaScript。 这种方法可以快速识别混淆的重定向 JavaScript 并主动阻止用于驱动下载攻击的网页。</p></blockquote><h5 id="分层混淆：用于分层安全的软件混淆技术分类-Layered-obfuscation-a-taxonomy-of-software-obfuscation-techniques-for-layered-security"><a href="#分层混淆：用于分层安全的软件混淆技术分类-Layered-obfuscation-a-taxonomy-of-software-obfuscation-techniques-for-layered-security" class="headerlink" title="分层混淆：用于分层安全的软件混淆技术分类(Layered obfuscation: a taxonomy of software obfuscation techniques for layered security)"></a>分层混淆：用于分层安全的软件混淆技术分类(Layered obfuscation: a taxonomy of software obfuscation techniques for layered security)</h5><blockquote><p>在本文中，我们基于分层混淆的思想对现有的混淆技术进行了系统的回顾，并开发了一种新的混淆技术分类法。 按照我们的分类层次结构，不同分支下的混淆策略是相互正交的。 通过这种方式，它可以帮助开发人员选择混淆技术，并根据他们的具体需求设计分层的混淆解决方案。</p></blockquote><h5 id="JShrink：对现代-Java-应用程序裁剪的深入调查（JShrink-In-Depth-Investigation-into-Debloating-Modern-Java-Applications）"><a href="#JShrink：对现代-Java-应用程序裁剪的深入调查（JShrink-In-Depth-Investigation-into-Debloating-Modern-Java-Applications）" class="headerlink" title="JShrink：对现代 Java 应用程序裁剪的深入调查（JShrink: In-Depth Investigation into Debloating Modern Java Applications）"></a>JShrink：对现代 Java 应用程序裁剪的深入调查（JShrink: In-Depth Investigation into Debloating Modern Java Applications）</h5><blockquote><p>我们开发了一个名为JShrink的端到端字节码消除框架。它通过动态剖析和类型依赖分析来增强传统的静态可达性分析，并更新现有的字节码转换以解决现代Java中的新语言功能。我们重点介绍了一些细微的技术挑战，这些挑战必须正确处理，并通过回归测试检查去肿软件的行为保护。我们发现 (1) JShrink能够使我们的真实Java基准套件膨胀多达47% 个 (平均14% 个); (2) 考虑动态语言功能对于确保行为保护确实至关重要。减少纯静态等价物Jax引起的测试失败98%，和ProGuard的84%; (3) 与纯动态方法相比，将静态分析与动态分析相集成，使膨胀软件对看不见的测试执行更加健壮。在26个项目中的22个中，膨胀软件在新测试下成功运行。</p></blockquote><h5 id="SOC-Web浏览器安全分析（SOK-On-the-Analysis-of-Web-Browser-Security）"><a href="#SOC-Web浏览器安全分析（SOK-On-the-Analysis-of-Web-Browser-Security）" class="headerlink" title="SOC: Web浏览器安全分析（SOK: On the Analysis of Web Browser Security）"></a>SOC: Web浏览器安全分析（SOK: On the Analysis of Web Browser Security）</h5><blockquote><p>本文试图通过研究流行的安全漏洞类别、它们的利用技术和部署的防御措施来系统化现代 Web 浏览器的安全环境。 更具体地说，我们首先介绍了一个统一的架构，它忠实地代表了四大 Web 浏览器的安全设计。 其次，我们分享了一项为期 10 年的浏览器漏洞纵向研究的见解。 第三，我们提出了缓解计划及其有效性的时间表和背景。 第四，我们分享了我们在 2020 年 Pwn2Own 比赛中使用的全链漏洞利用的经验教训。 我们相信，这种系统化的关键要点可以揭示如何推进现代网络浏览器的现状，更重要的是，如何在未来创建安全而复杂的软件。</p></blockquote><h5 id="代码反混淆和特征交互对-Android-恶意软件检测的影响（Impact-of-Code-Deobfuscation-and-Feature-Interaction-in-Android-Malware-Detection）"><a href="#代码反混淆和特征交互对-Android-恶意软件检测的影响（Impact-of-Code-Deobfuscation-and-Feature-Interaction-in-Android-Malware-Detection）" class="headerlink" title="代码反混淆和特征交互对 Android 恶意软件检测的影响（Impact of Code Deobfuscation and Feature Interaction in Android Malware Detection）"></a>代码反混淆和特征交互对 Android 恶意软件检测的影响（Impact of Code Deobfuscation and Feature Interaction in Android Malware Detection）</h5><blockquote><p>我们将代码反混淆技术与 Android 恶意软件检测系统一起使用并研究其效果。 实验结果表明，代码去混淆可以成功地检索到被混淆隐藏的有用信息。 此外，我们提出了基于识别的特征交互的交互项。 由于许多特征值与应用程序的大小相关，因此提出的交互项旨在消除由应用程序大小和其他特征引起的干扰。 实验结果还表明，这些交互项在特征重要性方面具有很高的排名。 我们提出的 Android 恶意软件检测模型使用著名的 Drebin 数据集实现了 99.55% 的准确率和 94.61% 的 F1 分数，超过了之前工作的性能。</p></blockquote><h5 id="GoldRusher：快速识别隐藏代码的工具-GoldRusher-A-Miner-for-Rapid-Identiﬁcation-of-Hidden-Code"><a href="#GoldRusher：快速识别隐藏代码的工具-GoldRusher-A-Miner-for-Rapid-Identiﬁcation-of-Hidden-Code" class="headerlink" title="GoldRusher：快速识别隐藏代码的工具(GoldRusher: A Miner for Rapid Identiﬁcation of Hidden Code)"></a>GoldRusher：快速识别隐藏代码的工具(GoldRusher: A Miner for Rapid Identiﬁcation of Hidden Code)</h5><blockquote><p>在本文中，我们介绍了 GoldRusher，这是一种主要用于帮助逆向工程师半自动分析二进制文件以快速揭示故意隐藏的代码段的工具。 鉴于 GoldRusher 对代码隐藏的特定定义不可知，并且不对被测程序的意图（即恶意或良性）做出假设，它也可以被测试工程师用作更智能的代码覆盖工具。</p></blockquote><h5 id="广义动态不透明谓词：一种新的控制流混淆方法-Generalized-Dynamic-Opaque-Predicates-A-New-Control-Flow-Obfuscation-Method"><a href="#广义动态不透明谓词：一种新的控制流混淆方法-Generalized-Dynamic-Opaque-Predicates-A-New-Control-Flow-Obfuscation-Method" class="headerlink" title="广义动态不透明谓词：一种新的控制流混淆方法(Generalized Dynamic Opaque Predicates: A New Control Flow Obfuscation Method)"></a>广义动态不透明谓词：一种新的控制流混淆方法(Generalized Dynamic Opaque Predicates: A New Control Flow Obfuscation Method)</h5><blockquote><p>在本文中，我们概括了这个概念并系统地开发了一种新的控制流混淆方案，称为广义动态不透明谓词。 与之前的工作相比，我们的方法有两个明显的优势：1）我们通过将更常见的程序结构（例如，直线代码、分支和循环）自动转换为动态不透明谓词来扩展应用范围；  2）我们的系统设计不要求动态不透明谓词严格相邻，这对反混淆技术更具弹性。 我们开发了一个基于 LLVM IR 的原型工具，并通过混淆 GNU 核心实用程序对其进行了评估。 我们的实验结果表明了我们方法的有效性和通用性。 此外，比较评估表明，我们的方法对最新的基于形式程序语义的不透明谓词检测方法具有弹性。</p></blockquote><h5 id="通过差异化模糊测试发现智能合约-VM-漏洞-Uncovering-Smart-Contract-VM-Bugs-Via-Differential-Fuzzing"><a href="#通过差异化模糊测试发现智能合约-VM-漏洞-Uncovering-Smart-Contract-VM-Bugs-Via-Differential-Fuzzing" class="headerlink" title="通过差异化模糊测试发现智能合约 VM 漏洞(Uncovering Smart Contract VM Bugs Via Differential Fuzzing)"></a>通过差异化模糊测试发现智能合约 VM 漏洞(Uncovering Smart Contract VM Bugs Via Differential Fuzzing)</h5><blockquote><p>在本文中，我们提出了一种自动化方法来发现这些差异。 通过覆盖引导和状态引导的模糊测试，我们探索了针对多个虚拟机并行的智能合约虚拟机行为。 我们开发了 NeoDiff，这是第一个用于智能合约 VM 的反馈引导差异模糊测试的框架。我们讨论了我们的工具可以防止的真实的货币后果。 NeoDiff 可以轻松移植到新的智能合约平台。 除了模糊以太坊虚拟机之外，NeoDiff 还发现了 Neo 区块链虚拟机的一系列关键差异。 此外，通过更高层的语义变更器，我们发现了在区块链上执行时用 Python 编写的 Neo 智能合约与经典 CPython 之间的语义差异。 在此过程中，NeoDiff 发现了 C# Neo VM 中的内存损坏。</p></blockquote><h5 id="DynOpVm：使用动态操作码映射的基于-VM-的软件混淆-DynOpVm-VM-based-Software-Obfuscation-with-Dynamic-Opcode-Mapping"><a href="#DynOpVm：使用动态操作码映射的基于-VM-的软件混淆-DynOpVm-VM-based-Software-Obfuscation-with-Dynamic-Opcode-Mapping" class="headerlink" title="DynOpVm：使用动态操作码映射的基于 VM 的软件混淆(DynOpVm: VM-based Software Obfuscation with Dynamic Opcode Mapping)"></a>DynOpVm：使用动态操作码映射的基于 VM 的软件混淆(DynOpVm: VM-based Software Obfuscation with Dynamic Opcode Mapping)</h5><blockquote><p>在本文中，我们提出了一种利用频率分析有效恢复秘密映射以破坏保护的攻击，然后提出了一种新的基于VM的模糊器，其中每个基本块在虚拟指令和本机指令之间使用动态和控制流感知映射。我们表明，我们提出的基于虚拟机的混淆器不仅使频率分析攻击有效，而且指示执行和程序分析遵循程序的原始控制流程，使最先进的反向污染和切片有效。我们实现了一个基于虚拟机的模糊器原型，并通过规范基准测试和其他实际应用程序的实验证明了它的有效性。</p></blockquote><h5 id="DYDROID：测量动态代码加载及其在-Android-应用程序中的安全隐患-DYDROID-Measuring-Dynamic-Code-Loading-and-Its-Security-Implications-in-Android-Applications"><a href="#DYDROID：测量动态代码加载及其在-Android-应用程序中的安全隐患-DYDROID-Measuring-Dynamic-Code-Loading-and-Its-Security-Implications-in-Android-Applications" class="headerlink" title="DYDROID：测量动态代码加载及其在 Android 应用程序中的安全隐患(DYDROID : Measuring Dynamic Code Loading and Its Security Implications in Android Applications)"></a>DYDROID：测量动态代码加载及其在 Android 应用程序中的安全隐患(DYDROID : Measuring Dynamic Code Loading and Its Security Implications in Android Applications)</h5><blockquote><p>但在本文中，我们制定并回答了之前研究中缺少的三个关键问题：（1）加载的代码来自哪里（远程获取或本地打包），以及谁是负责实体 调用它的功能？ (2) DCL 以何种方式用于强化移动应用程序，特别是应用程序混淆？ (3) 可以从 DCL 中发现现成应用程序的安全风险和影响是什么？ 我们设计并实现了 DYDROID，这是一个使用动态和静态分析来分析动态加载代码的系统。 动态分析用于自动运行应用程序、捕获 DCL 行为并拦截加载的代码。 静态分析用于调查动态加载代码中的恶意行为和隐私泄露。 我们已经使用 DYDROID 在几乎没有人工干预的情况下分析了超过 46K 的应用程序，使我们能够进行大规模测量以调查 DCL 的五个方面，例如源识别、恶意软件检测、漏洞分析、混淆分析和隐私跟踪分析。 我们有几个有趣的发现。 (1) 发现27个应用程序通过执行从远程服务器下载的代码违反了Google Play的内容政策。 (2) 我们确定了几种常见混淆方法的分布、优缺点和影响，包括 DEX 加密/加载。 (3) DCL 的隐蔽性使其成为部署恶意软件的渠道，我们发现 87 个应用程序加载了现有防病毒工具无法检测到的恶意二进制文件。 (4) 我们发现 14 个应用程序由于动态加载其他应用程序可写的代码而容易受到代码注入攻击。 (5) DCL 主要用于第三方 SDK，这意味着应用程序开发者可能不知道他们的应用程序中注入了什么样的敏感功能。</p></blockquote><h5 id="软件安全的多样化和混淆技术：系统的文献综述-Diversiﬁcation-and-obfuscation-techniques-for-software-security-A-systematic-literature-review"><a href="#软件安全的多样化和混淆技术：系统的文献综述-Diversiﬁcation-and-obfuscation-techniques-for-software-security-A-systematic-literature-review" class="headerlink" title="软件安全的多样化和混淆技术：系统的文献综述(Diversiﬁcation and obfuscation techniques for software security:A systematic literature review)"></a>软件安全的多样化和混淆技术：系统的文献综述(Diversiﬁcation and obfuscation techniques for software security:A systematic literature review)</h5><blockquote><p>在本文中，系统的文献回顾被用作研究的方法，以选择讨论多样化/混淆技术以提高软件安全性的研究。 我们介绍数据收集、数据分析和报告结果的过程。 结果：作为系统搜索的结果，我们收集了 357 篇与我们感兴趣的主题相关的文章，发表于 1993 年至 2017 年间。我们研究收集的文章，分析从中提取的数据，对数据进行分类，并 揭示了研究的空白。 </p></blockquote><blockquote><p>结论：这两种技术已被广泛用于各种安全目的并阻止各种类型的安全攻击。 存在许多不同的技术来混淆/多样化程序，每种技术都针对程序的不同部分，并应用于软件开发生命周期的不同阶段。 此外，我们指出了该领域的研究差距，例如仍有各种执行环境可以从这两种技术中受益，包括云计算、物联网 (IoT) 和可信计算。 我们还提出了一些关于在所讨论的环境中应用这些技术的潜在想法。</p></blockquote><h5 id="DexRay：一种基于字节码图像表示的简单但有效的安卓恶意软件检测深度学习方法-DexRay-A-Simple-yet-Eﬀective-Deep-Learning-Approach-to-Android-Malware-Detection-based-on-Image-Representation-of-Bytecode"><a href="#DexRay：一种基于字节码图像表示的简单但有效的安卓恶意软件检测深度学习方法-DexRay-A-Simple-yet-Eﬀective-Deep-Learning-Approach-to-Android-Malware-Detection-based-on-Image-Representation-of-Bytecode" class="headerlink" title="DexRay：一种基于字节码图像表示的简单但有效的安卓恶意软件检测深度学习方法(DexRay: A Simple, yet Eﬀective Deep Learning Approach to Android Malware Detection based on Image Representation of Bytecode)"></a>DexRay：一种基于字节码图像表示的简单但有效的安卓恶意软件检测深度学习方法(DexRay: A Simple, yet Eﬀective Deep Learning Approach to Android Malware Detection based on Image Representation of Bytecode)</h5><blockquote><p> 我们提出了 DexRay，它将应用程序 DEX 文件的字节码转换为灰度“矢量”图像，并将它们提供给一维卷积神经网络模型。 由于设计选择的极其基本的性质，我们将 DexRay 视为基础，允许推断在恶意软件检测中通过基于图像的学习可以获得的最低性能。 DexRay 在超过 158k 应用程序上的性能评估表明，虽然简单，但我们的方法是有效的，检测率很高（F1-score = 0.96）。 最后，我们研究了时间衰减和图像大小调整对 DexRay 性能的影响，并评估了它对混淆的弹性。 这篇正在进行中的论文通过提供一种健全、简单但有效的方法（具有可用的人工制品）为基于深度学习的恶意软件检测领域做出了贡献，该方法可以作为确定许多需要调查的深刻问题的基础 充分发展这个领域。</p></blockquote><h5 id="DexPro：适用于-Android-应用程序的字节码级代码保护系统-DexPro-A-Bytecode-Level-Code-Protection-System-for-Android-Applications"><a href="#DexPro：适用于-Android-应用程序的字节码级代码保护系统-DexPro-A-Bytecode-Level-Code-Protection-System-for-Android-Applications" class="headerlink" title="DexPro：适用于 Android 应用程序的字节码级代码保护系统(DexPro: A Bytecode Level Code Protection System for Android Applications)"></a>DexPro：适用于 Android 应用程序的字节码级代码保护系统(DexPro: A Bytecode Level Code Protection System for Android Applications)</h5><blockquote><p>本文介绍了 DEXPRO，一种用于 Android 应用程序的新型字节码级代码混淆系统。 与之前的方法不同，我们的方法在 Android Dex 字节码上执行，不需要访问高级程序源或修改编译器或 VM。 我们的方法利用 Dex 中除浮点操作数以外的所有操作数都存储在 32 位寄存器中的事实，将两个 32 位操作数打包成一个 64 位操作数。 这样，任何反编译字节码的尝试都会导致错误的信息。 同时，我们的方法通过在函数调用的返回指令之前插入不透明的谓词来混淆程序控制流，这使得攻击者更难跟踪对受保护函数的调用。 实验结果表明，我们的方法可以阻止复杂的逆向工程和代码分析工具，并且运行时和内存占用的开销与现有的代码混淆方法相当。</p></blockquote><h5 id="DexMonitor：动态分析和监控混淆的-Android-应用程序-DexMonitor-Dynamically-Analyzing-and-Monitoring-Obfuscated-Android-Applications"><a href="#DexMonitor：动态分析和监控混淆的-Android-应用程序-DexMonitor-Dynamically-Analyzing-and-Monitoring-Obfuscated-Android-Applications" class="headerlink" title="DexMonitor：动态分析和监控混淆的 Android 应用程序(DexMonitor: Dynamically Analyzing and Monitoring Obfuscated Android Applications)"></a>DexMonitor：动态分析和监控混淆的 Android 应用程序(DexMonitor: Dynamically Analyzing and Monitoring Obfuscated Android Applications)</h5><blockquote><p>在本文中，我们提出了一种解决这一关键挑战的方法，方法是在 Dalvik 虚拟机中将要执行 Dalvik 指令的位置放置钩子。 此外，我们通过名为 DexMonitor 的原型对实际应用程序进行案例研究，证明了我们方法的有效性。</p></blockquote><h5 id="DexLego：用于辅助静态分析的可重组字节码提取-DexLego-Reassembleable-Bytecode-Extraction-for-Aiding-Static-Analysis"><a href="#DexLego：用于辅助静态分析的可重组字节码提取-DexLego-Reassembleable-Bytecode-Extraction-for-Aiding-Static-Analysis" class="headerlink" title="DexLego：用于辅助静态分析的可重组字节码提取(DexLego: Reassembleable Bytecode Extraction for Aiding Static Analysis)"></a>DexLego：用于辅助静态分析的可重组字节码提取(DexLego: Reassembleable Bytecode Extraction for Aiding Static Analysis)</h5><blockquote><p>本文中，我们介绍了 DEXLEGO，这是一种新颖的系统，它执行可重组的字节码提取，以帮助静态分析工具揭示 Android 应用程序的恶意行为。 DEXLEGO 利用即时收集在运行时从应用程序中提取数据和字节码，并将它们重新组合成一个新的离线 Dalvik 可执行文件 (DEX)。 在 DroidBench 和实际应用程序上的实验表明，DEXLEGO 在重组后的 DEX 文件中正确重构了应用程序的行为，显着提高了现有静态分析系统的分析结果</p></blockquote><h5 id="通过向-root-提供者学习来检测-android-root-漏洞-Detecting-Android-Root-Exploits-by-Learning-from-Root-Providers"><a href="#通过向-root-提供者学习来检测-android-root-漏洞-Detecting-Android-Root-Exploits-by-Learning-from-Root-Providers" class="headerlink" title="通过向 root 提供者学习来检测 android root 漏洞(Detecting Android Root Exploits by Learning from Root Providers)"></a>通过向 root 提供者学习来检测 android root 漏洞(Detecting Android Root Exploits by Learning from Root Providers)</h5><blockquote><p>在本文中，我们构建了一个系统RootExplorer，来解决这个问题。 推动 RootExplorer 设计的主要观察是，除了恶意软件之外，还有由大公司支持的合法商业级 Android 应用程序，这些应用程序可以促进手机的 root 权限，称为 root 提供程序或一键式 root 应用程序。 通过对 oneclick root 应用程序进行广泛分析，RootExplorer 了解了 root 漏洞利用的精确前提条件和环境要求。 然后，它使用此信息在模拟器或智能手机测试平台上构建适当的分析环境，以有效检测恶意软件中的嵌入式根漏洞。 我们对 RootExplorer 进行的广泛实验评估表明，它能够检测到所有已知执行 root 漏洞利用的恶意软件样本，并且不会产生误报。 我们还发现了一个目前在市场上可用的应用程序，它具有嵌入式 root 漏洞。</p></blockquote><h5 id="使用图神经网络检测和分类-Android-恶意软件（Detecting-and-Categorizing-Android-Malware-with-Graph-Neural-Networks）"><a href="#使用图神经网络检测和分类-Android-恶意软件（Detecting-and-Categorizing-Android-Malware-with-Graph-Neural-Networks）" class="headerlink" title="使用图神经网络检测和分类 Android 恶意软件（Detecting and Categorizing Android Malware with Graph Neural Networks）"></a>使用图神经网络检测和分类 Android 恶意软件（Detecting and Categorizing Android Malware with Graph Neural Networks）</h5><blockquote><p>在本文中，我们提出了一种新的基于自然语言处理 (NLP) 的基于函数调用图嵌入的 Android 恶意软件检测和分类技术。 我们设计了一种基于图神经网络（图嵌入）的方法，将 Android 应用程序的整个图结构转换为向量。 然后，我们利用图的向量来检测和分类恶意软件家族。 我们的结果表明，图嵌入产生了更好的结果，因为我们平均获得了 99.6% 的恶意软件检测准确率和 98.7% 的恶意软件分类准确率。</p></blockquote><h5 id="反混淆-Android-原生二进制代码-Deobfuscating-Android-Native-Binary-Code"><a href="#反混淆-Android-原生二进制代码-Deobfuscating-Android-Native-Binary-Code" class="headerlink" title="反混淆 Android 原生二进制代码(Deobfuscating Android Native Binary Code)"></a>反混淆 Android 原生二进制代码(Deobfuscating Android Native Binary Code)</h5><blockquote><p>在本文中，我们提出了一种自动化方法来促进 Android 原生二进制代码的反混淆。 具体来说，给定由 Obfuscator-LLVM（最流行的本机代码混淆器）混淆的本机二进制文件，我们的反混淆系统能够恢复原始控制流图。 据我们所知，这是第一个旨在解决这个问题的工作。 我们已经将我们的系统应用于不同的场景，实验结果证明了我们基于通用相似性比较指标的系统的有效性。</p></blockquote><h5 id="通过机器学习和二进制分析静态击败不透明谓词-Defeating-Opaque-Predicates-Statically-through-Machine-Learning-and-Binary-Analysis"><a href="#通过机器学习和二进制分析静态击败不透明谓词-Defeating-Opaque-Predicates-Statically-through-Machine-Learning-and-Binary-Analysis" class="headerlink" title="通过机器学习和二进制分析静态击败不透明谓词(Defeating Opaque Predicates Statically through Machine Learning and Binary Analysis)"></a>通过机器学习和二进制分析静态击败不透明谓词(Defeating Opaque Predicates Statically through Machine Learning and Binary Analysis)</h5><blockquote><p>我们提出了一种将二进制分析技术与机器学习分类联系起来的新方法，目的是为不透明的谓词提供静态和通用的评估技术，而不管它们的结构如何。 我们使用这种技术作为静态自动反混淆工具来删除由混淆机制引入的不透明谓词。 根据我们的实验结果，我们的模型在检测和反混淆最先进的不透明谓词模式方面的准确率高达 98%。 相比之下，基于符号执行的前沿反混淆方法显示出的准确性较低，这主要是由于 SMT 求解器的限制和动态符号分析缺乏可扩展性。 我们的方法强调了混合符号分析和机器学习技术在静态和通用反混淆方法中的效率。</p></blockquote><h5 id="DeepMal：恶意—保留对抗性指令学习对抗静态恶意软件检测-DeepMal-maliciousness-Preserving-adversarial-instruction-learning-against-static-malware-detection"><a href="#DeepMal：恶意—保留对抗性指令学习对抗静态恶意软件检测-DeepMal-maliciousness-Preserving-adversarial-instruction-learning-against-static-malware-detection" class="headerlink" title="DeepMal：恶意—保留对抗性指令学习对抗静态恶意软件检测(DeepMal: maliciousness-Preserving adversarial instruction learning against static malware detection)"></a>DeepMal：恶意—保留对抗性指令学习对抗静态恶意软件检测(DeepMal: maliciousness-Preserving adversarial instruction learning against static malware detection)</h5><blockquote><p>本文提出了一种新颖的对抗性指令学习技术 DeepMal，它基于用于静态恶意软件检测的对抗性指令学习方法。 据我们所知，DeepMal 是第一个实用且系统的对抗学习方法，它可以直接生成对抗样本并有效绕过由 DL 和机器学习 (ML) 模型提供支持的静态恶意软件检测器，同时保留现实世界中的攻击功能。 此外，我们的方法进行小规模攻击，这可以规避典型的恶意软件变体分析（例如，重复检查）。 我们在两个真实世界的数据集、六个典型的 DL 模型和三个典型的 ML 模型上评估 DeepMal。 实验结果表明，在这两个数据集上，DeepMal 可以攻击典型的恶意软件检测器，平均 F1 分数和 F1 分数分别最大降低 93.94% 和 82.86%。 此外，三种典型的恶意软件样本（木马、后门、勒索软件）证明保留了原始攻击功能，恶意软件对抗样本的平均重复检查率低于 2.0%。 此外，DeepMal 可以避开动态检测器，并通过学习更多具有特定约束的动态特征轻松增强。</p></blockquote><h5 id="DANdroid：用于混淆-Android-恶意软件检测的多视图判别对抗网络-DANdroid-A-Multi-View-Discriminative-Adversarial-Network-for-Obfuscated-Android-Malware-Detection"><a href="#DANdroid：用于混淆-Android-恶意软件检测的多视图判别对抗网络-DANdroid-A-Multi-View-Discriminative-Adversarial-Network-for-Obfuscated-Android-Malware-Detection" class="headerlink" title="DANdroid：用于混淆 Android 恶意软件检测的多视图判别对抗网络(DANdroid: A Multi-View Discriminative Adversarial Network for Obfuscated Android Malware Detection)"></a>DANdroid：用于混淆 Android 恶意软件检测的多视图判别对抗网络(DANdroid: A Multi-View Discriminative Adversarial Network for Obfuscated Android Malware Detection)</h5><blockquote><p>我们提出了 DANdroid，这是一种新颖的 Android 恶意软件检测模型，它使用深度学习的判别对抗网络 (DAN)，将混淆和未混淆的应用程序分类为恶意或良性。 我们的方法，我们凭经验证明，对于四种流行和现实世界的混淆技术的选择是稳健的，它做出了三个贡献。 首先，判别对抗学习的创新应用导致恶意软件特征表示对四种混淆技术具有很强的弹性。 其次，使用三个特征集； 原始操作码、权限和 API 调用，它们组合在多视图深度学习架构中，以增加这种混淆弹性。 第三，我们证明了我们的模型具有泛化训练中未见的罕见和未来混淆方法的潜力。 凭借 68,880 个经过混淆和未混淆的恶意和良性样本的整体数据集，我们的多视图 DAN 模型实现了 0.973 的平均 F 分数，与最先进的技术相比，尽管暴露于应用的选定混淆方法 单独和组合。</p></blockquote><h5 id="ConDySTA：静态污点分析的上下文感知动态补充-ConDySTA-Context-Aware-Dynamic-Supplement-to-Static-Taint-Analysis"><a href="#ConDySTA：静态污点分析的上下文感知动态补充-ConDySTA-Context-Aware-Dynamic-Supplement-to-Static-Taint-Analysis" class="headerlink" title="ConDySTA：静态污点分析的上下文感知动态补充(ConDySTA: Context-Aware Dynamic Supplement to Static Taint Analysis)"></a>ConDySTA：静态污点分析的上下文感知动态补充(ConDySTA: Context-Aware Dynamic Supplement to Static Taint Analysis)</h5><blockquote><p>我们开发了一种新方法 DySTA，它使用动态污点分析结果作为静态污点分析的附加来源。 然而，天真地添加源会导致静态分析失去上下文敏感性，从而产生误报。 因此，我们开发了一种混合上下文匹配算法和相应的工具 ConDySTA，以保持 DySTA 中的上下文敏感性。 我们应用 REPRODROID [1]，一个用于 Android 分析工具的综合基准测试框架，来评估 ConDySTA。 结果表明，在 28 个应用程序中 (1) ConDySTA 能够检测到 REPRODROID 中考虑的六种最先进的静态污染分析中的任何一种都未检测到的 28 种污染流中的 12 种，并且 (2) ConDySTA 报告没有 假阳性，而仅 DySTA 报告了 9 个。 我们进一步将 ConDySTA 和 FLOWDROID 应用于来自 Google Play 的 100 个顶级 Android 应用程序，ConDySTA 能够检测到 39 个额外的污染流（除了 FLOWDROID 发现的 281 个污染流），同时保留了 FLOWDROID 的上下文敏感性。</p></blockquote><h5 id="CodeTrolley：硬件辅助控制流混淆-CodeTrolley-Hardware-Assisted-Control-Flow-Obfuscation"><a href="#CodeTrolley：硬件辅助控制流混淆-CodeTrolley-Hardware-Assisted-Control-Flow-Obfuscation" class="headerlink" title="CodeTrolley：硬件辅助控制流混淆(CodeTrolley: Hardware-Assisted Control Flow Obfuscation)"></a>CodeTrolley：硬件辅助控制流混淆(CodeTrolley: Hardware-Assisted Control Flow Obfuscation)</h5><blockquote><p>在这项工作中，我们专注于控制流混淆 - 一种防止攻击者静态确定哪些代码段是原始代码段以及添加哪些段以混淆攻击者的技术。 我们提出了一种基于 RISC-V 的硬件辅助反混淆技术，该技术基于安全存储在硬件中的秘密以及用于混淆二进制文件的 LLVM 编译器扩展在运行时对代码进行反混淆。 与传统工具不同，我们的工作不依赖于编译难以逆向工程的代码，而是依赖于保护密钥。 因此，它可以被视为动态二进制解密的轻量级替代方案。</p></blockquote><h5 id="针对符号执行攻击的代码混淆-Code-Obfuscation-Against-Symbolic-Execution-Attacks"><a href="#针对符号执行攻击的代码混淆-Code-Obfuscation-Against-Symbolic-Execution-Attacks" class="headerlink" title="针对符号执行攻击的代码混淆(Code Obfuscation Against Symbolic Execution Attacks)"></a>针对符号执行攻击的代码混淆(Code Obfuscation Against Symbolic Execution Attacks)</h5><blockquote><p>本文解决了表征代码混淆转换对自动符号执行攻击的弹性的问题，补充了通过用户研究测量混淆转换对人工辅助攻击的效力的现有工作。 我们评估了超过 5000 个不同的 C 程序的方法，每个程序都使用现有的混淆转换实现进行了混淆。 结果表明，许多现有的混淆转换，例如虚拟化，几乎没有机会承受基于符号执行的反混淆。 我们做出的一个重要且可能令人惊讶的观察是，基于符号执行的去混淆器可以轻松地去混淆保留程序语义的转换。 另一方面，我们提出了新的混淆转换，以微妙但可接受的方式改变程序行为，并表明它们可以使基于符号执行的反混淆分析在实践中无效。</p></blockquote><h5 id="BLADE：针对-Android-中的混淆进行强大的恶意软件检测-BLADE-Robust-Malware-Detection-against-Obfuscation-in-Android"><a href="#BLADE：针对-Android-中的混淆进行强大的恶意软件检测-BLADE-Robust-Malware-Detection-against-Obfuscation-in-Android" class="headerlink" title="BLADE：针对 Android 中的混淆进行强大的恶意软件检测(BLADE: Robust Malware Detection against Obfuscation in Android)"></a>BLADE：针对 Android 中的混淆进行强大的恶意软件检测(BLADE: Robust Malware Detection against Obfuscation in Android)</h5><blockquote><p>我们提出了 BLADE，这是一种基于 Opcode Segments 检测的新型混淆弹性系统。 它做出了三个贡献：首先，一种新颖的操作码段文档导致特征表征对混淆技术具有弹性。 其次，我们对 dalvik 操作码进行基于语义的简化以增强弹性。 第三，我们评估了 BLADE 对不同混淆技术的有效性，例如普通混淆、字符串加密、类加密、反射及其组合。 在针对恶意软件检测、家族分类、恶意软件类型检测、混淆类型检测和混淆弹性家族分类的基准数据集进行测试时，我们发现我们的方法是有效、准确和有弹性的。</p></blockquote><h5 id="用于防止-Android-应用程序敏感信息泄漏的自动多层字节码生成-Automated-Multi-Layered-Bytecode-Generation-for-Preventing-Sensitive-Information-Leaks-from-Android-Applications"><a href="#用于防止-Android-应用程序敏感信息泄漏的自动多层字节码生成-Automated-Multi-Layered-Bytecode-Generation-for-Preventing-Sensitive-Information-Leaks-from-Android-Applications" class="headerlink" title="用于防止 Android 应用程序敏感信息泄漏的自动多层字节码生成(Automated Multi-Layered Bytecode Generation for Preventing Sensitive Information Leaks from Android Applications)"></a>用于防止 Android 应用程序敏感信息泄漏的自动多层字节码生成(Automated Multi-Layered Bytecode Generation for Preventing Sensitive Information Leaks from Android Applications)</h5><blockquote><p>在本文中，我们首先提出了一种威胁模型，该模型试图通过使用重新打包攻击来泄露用户的敏感信息，称为 ReMaCi 攻击。 通过分析从 Google Play 商店下载的前 8,546 个应用程序，我们发现其中 50% 的应用程序确实容易受到 ReMaCi 攻击。 因此，我们提出了一种名为 AmpDroid 的新型自动化静态反分析工具，用于防止敏感信息泄露。 AmpDroid 识别敏感数据流并将处理敏感数据的代码与应用程序隔离开来。 为了证明 AmpDroid 的有效性，我们对 AmpDroid 进行了安全性和性能评估，并将其与其他混淆工具进行了比较。</p></blockquote><h5 id="ARMAND：基于原生检测的多模式反篡改反重打包-ARMAND-Anti-Repackaging-through-Multi-pattern-Anti-tampering-based-on-Native-Detection"><a href="#ARMAND：基于原生检测的多模式反篡改反重打包-ARMAND-Anti-Repackaging-through-Multi-pattern-Anti-tampering-based-on-Native-Detection" class="headerlink" title="ARMAND：基于原生检测的多模式反篡改反重打包(ARMAND: Anti-Repackaging through Multi-pattern Anti-tampering based on Native Detection)"></a>ARMAND：基于原生检测的多模式反篡改反重打包(ARMAND: Anti-Repackaging through Multi-pattern Anti-tampering based on Native Detection)</h5><blockquote><p>在这项工作中，我们提出了一种新的反重新包装方案——称为 ARMAND，旨在克服当前保护方案的局限性。 我们已经将这个方案实现到一个名为 ARMANDroid 的原型中，它利用了多种保护模式并依赖于本机代码。 ARMANDroid 在 30.000 个真实世界的 Android 应用程序上的评估阶段表明，该方案对常见的攻击向量具有鲁棒性，并且在时间和空间开销方面是有效的</p></blockquote><h5 id="App通过Android操作系统级虚拟化进行自动登录功能安全测试-App’s-Auto-Login-Function-Security-Testing-via-Android-OS-Level-Virtualization"><a href="#App通过Android操作系统级虚拟化进行自动登录功能安全测试-App’s-Auto-Login-Function-Security-Testing-via-Android-OS-Level-Virtualization" class="headerlink" title="App通过Android操作系统级虚拟化进行自动登录功能安全测试(App’s Auto-Login Function Security Testing via Android OS-Level Virtualization)"></a>App通过Android操作系统级虚拟化进行自动登录功能安全测试(App’s Auto-Login Function Security Testing via Android OS-Level Virtualization)</h5><blockquote><p>在本文中，我们开发了VPDroid，这是一个为安全测试量身定制的透明Android osslevel虚拟化平台。使用VPDroid，安全分析师可以在虚拟电话中自定义不同的设备工件，例如CPU型号，Android ID和电话号码，而无需用户级别的API挂钩。VPDroid的隔离机制可确保虚拟电话中的用户模式应用程序无法检测到特定于设备的差异。为了评估Android应用程序对数据克隆攻击的敏感性，我们使用VPDroid来模拟234下载最多的应用程序的数据克隆攻击。我们在五种不同的虚拟手机环境上的实验表明，VPDroid的设备属性定制可以欺骗所有执行设备一致性检查的测试应用程序，例如Twitter，WeChat和PayPal。19家供应商已确认我们的报告为零日漏洞。我们的发现描绘了一个警示故事: 只有在客户端实施设备一致性检查仍然容易受到高级数据克隆攻击。</p></blockquote><h5 id="AndrODet-一种自适应的Android混淆检测器-AndrODet-An-adaptive-Android-obfuscation-detector"><a href="#AndrODet-一种自适应的Android混淆检测器-AndrODet-An-adaptive-Android-obfuscation-detector" class="headerlink" title="AndrODet: 一种自适应的Android混淆检测器(AndrODet: An adaptive Android obfuscation detector)"></a>AndrODet: 一种自适应的Android混淆检测器(AndrODet: An adaptive Android obfuscation detector)</h5><blockquote><p>在本文中，我们提出了 AndrODet，一种检测 Android 应用程序中三种流行的混淆类型的机制，即标识符重命名、字符串加密和控制流混淆。 AndrODet 利用在线学习技术，因此适用于需要以连续方式运行的资源有限的环境。 我们使用来自恶意软件和良性应用程序的 34,962 个应用程序的数据集将我们的结果与批量学习算法进行比较。 实验结果表明，在线学习方法不仅能够在准确性方面与批量学习方法竞争，而且还可以节省大量时间和计算资源。 特别是，AndrODet 在标识符重命名检测方面的平均准确率达到 92.02%，在字符串加密检测方面达到 81.41%，在控制流混淆检测方面平均达到 68.32%。 此外，当应用程序可能被一种以上的技术混淆时，系统的整体准确率约为 80.66%。</p></blockquote><h5 id="ARM反汇编工具的实证研究（An-Empirical-Study-on-ARM-Disassembly-Tools）"><a href="#ARM反汇编工具的实证研究（An-Empirical-Study-on-ARM-Disassembly-Tools）" class="headerlink" title="ARM反汇编工具的实证研究（An Empirical Study on ARM Disassembly Tools）"></a>ARM反汇编工具的实证研究（An Empirical Study on ARM Disassembly Tools）</h5><blockquote><p>在本文中，我们对 ARM 反汇编工具进行了首次综合研究。 具体来说，我们使用不同的编译器、编译选项和混淆方法构建了 1、896 个 ARM 二进制文件（包括 248 个混淆的二进制文件）。 然后，我们使用八种最先进的 ARM 反汇编工具（包括商业和非商业工具）对它们定位指令和函数边界的能力进行评估。 这两个是基本的，用于构建其他原语。 我们的工作揭示了一些尚未系统总结和/或证实的观察结果。 例如，我们发现 ARM 和 Thumb 指令集的存在，以及在函数调用和分支中重用 BL 指令给反汇编工具带来了严峻的挑战。 我们的评估揭示了最先进的拆卸工具的局限性，并指出了潜在的改进方向。 为了让社区参与进来，我们在 <a href="https://github.com/valour01/arm_disasssembler_study">https://github.com/valour01/arm_disasssembler_study</a> 上发布了数据集和相关脚本。</p></blockquote><h5 id="基于人工智能的黑盒代码去混淆、理解、改进和缓解（AI-based-Blackbox-Code-Deobfuscation-Understand-Improve-and-Mitigate）"><a href="#基于人工智能的黑盒代码去混淆、理解、改进和缓解（AI-based-Blackbox-Code-Deobfuscation-Understand-Improve-and-Mitigate）" class="headerlink" title="基于人工智能的黑盒代码去混淆、理解、改进和缓解（AI-based Blackbox Code Deobfuscation Understand, Improve and Mitigate）"></a>基于人工智能的黑盒代码去混淆、理解、改进和缓解（AI-based Blackbox Code Deobfuscation Understand, Improve and Mitigate）</h5><blockquote><p>在本文中，我们在三个关键方向上深化了基于 AI 的黑盒反混淆的状态：了解当前最先进的技术、对其进行改进和设计专用的保护机制。 特别是，我们为基于 AI 的黑盒反混淆定义了一个新颖的通用框架，其中包含先前的工作并突出显示关键组件； 我们首先指出代码反混淆的搜索空间对于基于模拟的方法（例如，先前工作中使用的 Monte Carlo Tres Search）太不稳定，并提倡使用稳健的方法，如 S-metaheuritics； 我们提出了新的优化的基于 AI 的黑盒反混淆器 Xyntia，它在成功率（尤其是在时间预算较小的情况下）方面明显优于以前的工作，同时完全不受最新的反分析代码混淆方法的影响； 最后，我们针对基于 AI 的黑盒反混淆提出了两种新颖的保护措施，以应对 Xyntia 的强大攻击</p></blockquote><h5 id="滥用-Android-运行时进行应用程序混淆-Abusing-Android-Runtime-for-Application-Obfuscation"><a href="#滥用-Android-运行时进行应用程序混淆-Abusing-Android-Runtime-for-Application-Obfuscation" class="headerlink" title="滥用 Android 运行时进行应用程序混淆(Abusing Android Runtime for Application Obfuscation)"></a>滥用 Android 运行时进行应用程序混淆(Abusing Android Runtime for Application Obfuscation)</h5><blockquote><p>研究 Android 混淆技术是理解和分析恶意应用程序的一项基本任务。 混淆技术已经被广泛研究用于市场应用，但从未用于智能手机固件中使用的预编译应用。 在本文中，我们描述了两种新的混淆技术，它们利用了汇编和 Dalvik 字节码之间的对偶性，据我们所知，这在以前从未被描述过。 我们还提出了这些混淆技术的检测方法。 我们将它们应用于供应商固件和市场应用程序，以评估它们在野外的使用情况。 我们发现，即使它们似乎还没有在野外使用，它们也完全实用</p></blockquote><h5 id="二进制代码相似度调查-A-Survey-of-Binary-Code-Similarity"><a href="#二进制代码相似度调查-A-Survey-of-Binary-Code-Similarity" class="headerlink" title="二进制代码相似度调查(A Survey of Binary Code Similarity)"></a>二进制代码相似度调查(A Survey of Binary Code Similarity)</h5><blockquote><p>二进制代码相似性方法比较两个或两个以上的二进制代码来识别他们的异同。比较二进制代码的能力使许多实际应用场景的源代码可能不可用,如补丁分析,错误搜索和恶意软件检测和分析。在过去的20年里,无数的二进制代码相似性方法已经提出,但研究领域尚未系统地分析。本文提出了第一个二进制代码相似度的调查。分析61二进制代码相似度方法,系统化的四个方面:(1)应用程序启用,(2)他们的方法特征,(3)方法是如何实现的,以及(4)基准和方法用来评估他们。此外,调查讨论的范围和起源,进化在过去的二十年里,前方的挑战。</p></blockquote><h5 id="用于-Android-恶意软件检测的基于动态鲁棒-DL-的模型-A-Dynamic-Robust-DL-Based-Model-for-AndroidMalware-Detection"><a href="#用于-Android-恶意软件检测的基于动态鲁棒-DL-的模型-A-Dynamic-Robust-DL-Based-Model-for-AndroidMalware-Detection" class="headerlink" title="用于 Android 恶意软件检测的基于动态鲁棒 DL 的模型(A Dynamic Robust DL-Based Model for AndroidMalware Detection)"></a>用于 Android 恶意软件检测的基于动态鲁棒 DL 的模型(A Dynamic Robust DL-Based Model for AndroidMalware Detection)</h5><blockquote><p>作者提出了一种高度熟练的混合深度学习 (DL) 支持的智能多向量恶意软件检测机制。 所设计的方法利用卷积神经网络和双向长短期记忆 (BiLSTM) 来有效识别持久性恶意软件。 所提出的技术已通过公开可用的数据集、标准性能指标以及最先进的混合 DL 驱动架构和基准 DL 算法进行了全面评估。 此外，所提出的框架已经过交叉验证，并在时间效率和检测准确性方面都表现出良好的性能。</p></blockquote><h5 id="Android中优化，混淆和去混淆工具的比较研究-A-Comparative-Study-on-Optimization-Obfuscation-and-Deobfuscation-Tools-in-Android"><a href="#Android中优化，混淆和去混淆工具的比较研究-A-Comparative-Study-on-Optimization-Obfuscation-and-Deobfuscation-Tools-in-Android" class="headerlink" title="Android中优化，混淆和去混淆工具的比较研究(A Comparative Study on Optimization, Obfuscation, and Deobfuscation Tools in Android)"></a>Android中优化，混淆和去混淆工具的比较研究(A Comparative Study on Optimization, Obfuscation, and Deobfuscation Tools in Android)</h5><blockquote><p>代码优化是一个程序转换过程，以使程序更有效地工作或消耗更少的资源。 代码混淆会转换程序并使其代码更难为人类理解，从而保护代码免受逆向工程。 反混淆是对混淆进行逆向工程。 优化和混淆在 Android 应用程序中被广泛使用。  R8 是 Android 构建过程的默认工具，负责所有代码压缩、混淆和优化。 本文对比分析了Android平台中优化、混淆、反混淆工具的功能。 除了 R8，本文介绍的其他工具还有 ReDex、Obfuscapk 和 DeGuard，它们分别是 Android 应用程序的优化、混淆和反混淆工具。 我们研究了这四种工具的特性，并通过实验比较了它们的性能。</p></blockquote><h5 id="LoRaWAN-的协议栈：被遗忘的风险目标-LoRaWAN’s-Protocol-Stacks-The-Forgotten-Targets-at-Risk"><a href="#LoRaWAN-的协议栈：被遗忘的风险目标-LoRaWAN’s-Protocol-Stacks-The-Forgotten-Targets-at-Risk" class="headerlink" title="LoRaWAN 的协议栈：被遗忘的风险目标(LoRaWAN’s Protocol Stacks: The Forgotten Targets at Risk)"></a>LoRaWAN 的协议栈：被遗忘的风险目标(LoRaWAN’s Protocol Stacks: The Forgotten Targets at Risk)</h5><blockquote><p>在本报告中，我们展示了攻击者可以用来发现 LoRaWAN 堆栈中可利用漏洞的技术。 我们提出这些细节是为了强调堆栈开发人员或安全顾问可以使用相同的技术来保护堆栈并使 LoRaWAN 通信能够抵抗关键错误。</p></blockquote><h5 id="FIRMWIRE：蜂窝基带固件的透明动态分析-FIRMWIRE-Transparent-Dynamic-Analysis-for-Cellular-Baseband-Firmware"><a href="#FIRMWIRE：蜂窝基带固件的透明动态分析-FIRMWIRE-Transparent-Dynamic-Analysis-for-Cellular-Baseband-Firmware" class="headerlink" title="FIRMWIRE：蜂窝基带固件的透明动态分析(FIRMWIRE: Transparent Dynamic Analysis for Cellular Baseband Firmware)"></a>FIRMWIRE：蜂窝基带固件的透明动态分析(FIRMWIRE: Transparent Dynamic Analysis for Cellular Baseband Firmware)</h5><blockquote><p>为了填补这一空白，我们展示了 FIRMWIRE，这是第一个用于执行未修改的基带二进制固件的基带处理器的全系统仿真平台。  FIRMWIRE 提供基带专用 API 以轻松添加对新供应商、固件映像和安全分析的支持。 为了展示 FIRMWIRE 的可扩展性，我们支持 2 个供应商和 9 个手机型号的 213 个固件映像，允许执行和测试它们。 借助这些图像，FIRMWIRE 会自动发现和桥接内部基带 API，从而轻松注入协议消息。 使用这些入口点，我们选择了 LTE 和 GSM 协议进行模糊测试，并发现了 7 个可能导致远程代码执行的预身份验证内存损坏——其中 4 个以前是未知的。 我们在真实设备上通过无线方式重现了这些崩溃，证明了 FIRMWIRE 的仿真准确性。  FIRMWIRE 是一个可扩展的基带安全测试平台，我们将其作为开源发布给社区以供未来研究。</p></blockquote><h5 id="Binder-中的幽灵：Android-系统服务中的-Binder-事务重定向攻击（Ghost-in-the-Binder-Binder-Transaction-Redirection-Attacks-in-Android-System-Services）"><a href="#Binder-中的幽灵：Android-系统服务中的-Binder-事务重定向攻击（Ghost-in-the-Binder-Binder-Transaction-Redirection-Attacks-in-Android-System-Services）" class="headerlink" title="Binder 中的幽灵：Android 系统服务中的 Binder 事务重定向攻击（Ghost in the Binder: Binder Transaction Redirection Attacks in Android System Services）"></a>Binder 中的幽灵：Android 系统服务中的 Binder 事务重定向攻击（Ghost in the Binder: Binder Transaction Redirection Attacks in Android System Services）</h5><blockquote><p>本文提出了 Binder 事务重定向 (BiTRe) 攻击，其中攻击者诱导系统服务与定制的 Binder 服务器进行交易，然后从 Binder 服务器发起攻击——这是一个通常不受保护的方向。 我们通过枚举 BiTRe 中可利用的 Binder 接口来展示攻击面的规模，并发现攻击面随着 Android 发布版本的增长而增长。 在 Android 11 中，超过 70% 的 Binder 接口受 BiTRe 影响或可以在其中使用。 我们通过 (1) 构建一个原型系统来证明攻击的可行性，该系统可以自动生成可执行程序以到达攻击面的大部分，以及 (2) 识别一系列漏洞，这些漏洞被谷歌承认并分配了 10 个 CVE。</p></blockquote><h5 id="使用-multiDEX-和-SO-文件保护-android-应用程序免受逆向工程（Protection-android-app-with-multiDEX-and-SO-ﬁles-from-reverse-engineering）"><a href="#使用-multiDEX-和-SO-文件保护-android-应用程序免受逆向工程（Protection-android-app-with-multiDEX-and-SO-ﬁles-from-reverse-engineering）" class="headerlink" title="使用 multiDEX 和 SO 文件保护 android 应用程序免受逆向工程（Protection android app with multiDEX and SO ﬁles from reverse engineering）"></a>使用 multiDEX 和 SO 文件保护 android 应用程序免受逆向工程（Protection android app with multiDEX and SO ﬁles from reverse engineering）</h5><blockquote><p>我们提出了一种防止逆向工程方法的方法。 我们的目标是防止静态重新打包攻击，并在解密和加载应用程序时提供更高的效率。 我们介绍了基于虚拟机 (VM) 的 MultiDEX 和共享对象 (SO) 保护方法； 在这种方法中，我们使用了新的基于堆栈的本机代码系统。 它在虚拟机下提供了严格的级别保护。 它利用字节码的多个动态虚拟机保护来最小化开销。 我们保护 MutiDex 文件和 SO 文件的方法的显着优势是可用的系统很少，可以同时处理这两种类型的文件。</p></blockquote><h5 id="FuzzingDriver：增加模糊器代码覆盖率的缺失字典（FuzzingDriver-the-Missing-Dictionary-to-Increase-Code-Coverage-in-Fuzzers）"><a href="#FuzzingDriver：增加模糊器代码覆盖率的缺失字典（FuzzingDriver-the-Missing-Dictionary-to-Increase-Code-Coverage-in-Fuzzers）" class="headerlink" title="FuzzingDriver：增加模糊器代码覆盖率的缺失字典（FuzzingDriver: the Missing Dictionary to Increase Code Coverage in Fuzzers）"></a>FuzzingDriver：增加模糊器代码覆盖率的缺失字典（FuzzingDriver: the Missing Dictionary to Increase Code Coverage in Fuzzers）</h5><blockquote><p>我们提出了一个名为 FuzzingDriver 的工具，用于从任何目标程序的代码库中为基于覆盖的灰盒模糊器 (CGF) 生成字典标记。  FuzzingDriver 不会为模糊测试作业增加任何开销，因为它是预先运行的。 我们通过对六个开源目标进行模糊测试将 FuzzingDriver 与 Google 词典进行了比较，我们发现 FuzzingDriver 在所有测试中始终实现更高的代码覆盖率。 我们还在 FuzzBench 上执行了 8 个基准测试，以展示使用 FuzzingDriver 的字典如何优于 6 个广泛使用的 CGF 模糊器。 在未来的工作中，调查 FuzzingDriver 的字典对提高 bug 覆盖率的影响可能很重要。 视频演示：<a href="https://www.youtube.com/watch?v=Y8j_KvfRrI8">https://www.youtube.com/watch?v=Y8j_KvfRrI8</a></p></blockquote><h5 id="BEACON：具有可证明路径修剪的定向灰盒模糊测试（BEACON-Directed-Grey-Box-Fuzzing-with-Provable-Path-Pruning）资源"><a href="#BEACON：具有可证明路径修剪的定向灰盒模糊测试（BEACON-Directed-Grey-Box-Fuzzing-with-Provable-Path-Pruning）资源" class="headerlink" title="BEACON：具有可证明路径修剪的定向灰盒模糊测试（BEACON : Directed Grey-Box Fuzzing with Provable Path Pruning）资源"></a>BEACON：具有可证明路径修剪的定向灰盒模糊测试（<a href="https://5hadowblad3.github.io/files/Oakland22-Beacon.pdf">BEACON : Directed Grey-Box Fuzzing with Provable Path Pruning</a>）<a href="https://hub.docker.com/r/yguoaz/beacon">资源</a></h5><blockquote><p>本文介绍了 BEACON，它可以以可证明的方式有效地将灰盒模糊器引导到路径的海洋中。 也就是说，在计算达到目标的抽象先决条件的轻量级静态分析的辅助下，我们可以在运行时修剪 82.94% 的执行路径，而分析开销可以忽略不计（ă5h），但要保证修剪后的路径必须是虚假的 目标。 我们已经实现了我们的方法 BEACON，并将其与漏洞再现应用场景中的五个最先进的（定向）模糊器进行了比较。 评估结果表明，BEACON 平均比现有的定向灰盒模糊器快 11.50 倍，它还可以提高传统覆盖引导模糊器 AFL、AFL++ 和 Mopt 的速度，以 6.31 倍重现特定错误，11.86 x 和 10.92x 加速，分别。 更有趣的是，当用于测试漏洞补丁时，BEACON 发现了 14 个现有 CVE 识别漏洞的不完整修复和 8 个新错误，其中 10 个可通过分配新的 CVE id 进行利用。</p></blockquote><h5 id="Fuzzware：使用精确的-MMIO-建模进行有效的固件-Fuzzing（Fuzzware-Using-Precise-MMIO-Modeling-for-Effective-Firmware-Fuzzing）资料"><a href="#Fuzzware：使用精确的-MMIO-建模进行有效的固件-Fuzzing（Fuzzware-Using-Precise-MMIO-Modeling-for-Effective-Firmware-Fuzzing）资料" class="headerlink" title="Fuzzware：使用精确的 MMIO 建模进行有效的固件 Fuzzing（Fuzzware: Using Precise MMIO Modeling for Effective Firmware Fuzzing）资料"></a>Fuzzware：使用精确的 MMIO 建模进行有效的固件 Fuzzing（Fuzzware: Using Precise MMIO Modeling for Effective Firmware Fuzzing）<a href="https://github.com/fuzzware-fuzzer/fuzzware-experiments">资料</a></h5><blockquote><p>我们评估了我们在合成和真实世界目标上的方法，包括总共 19 个硬件平台和 77 个固件映像。 与最先进的工作相比，FUZZWARE 实现了高达 3.25 倍的代码覆盖率，我们的建模方法将输入空间的大小减少了高达 95.5%。 合成样本包含针对各种硬件交互的 66 个单元测试，我们发现我们的方法是第一个自动通过所有这些的通用重新托管解决方案。  FUZZWARE 发现了 15 个全新的 bug，包括之前被其他作品分析过的目标中的 bug； 总共分配了 12 个 CVE。</p></blockquote><h5 id="这个鬼鬼祟祟的小猪进军安卓广告市场：滥用移动传感器进行隐蔽数据泄露（This-Sneaky-Piggy-Went-to-the-Android-Ad-Market-Misusing-Mobile-Sensors-for-Stealthy-Data-Exfiltration）"><a href="#这个鬼鬼祟祟的小猪进军安卓广告市场：滥用移动传感器进行隐蔽数据泄露（This-Sneaky-Piggy-Went-to-the-Android-Ad-Market-Misusing-Mobile-Sensors-for-Stealthy-Data-Exfiltration）" class="headerlink" title="这个鬼鬼祟祟的小猪进军安卓广告市场：滥用移动传感器进行隐蔽数据泄露（This Sneaky Piggy Went to the Android Ad Market:Misusing Mobile Sensors for Stealthy Data Exfiltration）"></a>这个鬼鬼祟祟的小猪进军安卓广告市场：滥用移动传感器进行隐蔽数据泄露（This Sneaky Piggy Went to the Android Ad Market:Misusing Mobile Sensors for Stealthy Data Exfiltration）</h5><blockquote><p>在本文中，我们介绍了一种新的攻击向量，它滥用广告生态系统来提供利用移动传感器的复杂和隐秘的攻击。 这些攻击不依赖于任何特殊的应用权限或特定的用户操作，并且由于对 WebView 中传感器数据的访问控制不当，会影响所有包含应用内广告的 Android 应用。 我们概述了如何使用运动传感器数据在两种不同的攻击场景中推断用户的敏感触摸输入（例如信用卡信息），即应用内和应用间数据泄露。 前者针对的是展示广告的应用，后者则影响设备上运行的所有其他 Android 应用。 更糟糕的是，我们发现了 Android 的应用程序隔离、生命周期管理和访问控制机制中的严重缺陷，即使在显示广告的应用程序被移到后台或被用户终止后，这些漏洞也会导致持久的数据泄露。 此外，由于应用内广告可以“搭载”应用核心功能的权限，它们还可以从摄像头、麦克风和 GPS 等受保护的传感器获取信息。 为了对这一新兴威胁进行全面评估，我们对官方 Android Play 商店中可用应用中显示的广告进行了大规模的端到端动态分析。 我们的研究表明，野外的广告已经在访问和泄露从运动传感器获得的数据，因此强调需要更严格的访问控制策略和隔离机制。</p></blockquote><h5 id="通过无效引导知识推理的自动固件仿真（Automatic-Firmware-Emulation-through-Invalidity-guided-Knowledge-Inference）资料"><a href="#通过无效引导知识推理的自动固件仿真（Automatic-Firmware-Emulation-through-Invalidity-guided-Knowledge-Inference）资料" class="headerlink" title="通过无效引导知识推理的自动固件仿真（Automatic Firmware Emulation through Invalidity-guided Knowledge Inference）资料"></a>通过无效引导知识推理的自动固件仿真（Automatic Firmware Emulation through Invalidity-guided Knowledge Inference）<a href="https://github.com/MCUSec/uEmu">资料</a></h5><blockquote><p>由于硬件和固件之间的紧密耦合，为微控制器模拟固件具有挑战性。 这极大地阻碍了动态分析工具在固件分析中的应用。 最先进的工作通过观察未知外设的访问模式自动建模未知外设，然后在访问未知外设寄存器时利用启发式计算适当的响应。 然而，我们凭经验发现，这种方法和相应的启发式方法通常不足以模拟固件。 在这项工作中，我们提出了一种称为 µEmu 的新方法来模拟具有未知外围设备的固件。 与试图为每个外围设备构建通用模型的现有工作不同，我们的方法学习如何正确模拟各个外围设备接入点的固件执行。 它将图像作为输入，并通过将未知的外围寄存器表示为符号来象征性地执行它。 在符号执行期间，它推断规则以响应未知的外围访问。 这些规则存储在知识库中，在动态固件分析期间会引用该知识库。  µEmu在没有任何人工辅助的情况下，在外围驱动的一组单元测试中达到了95%的通过率。 我们还使用真实世界的固件样本评估了 µEmu，并发现了新的错误。</p></blockquote><h5 id="PGFUZZ：机器人车辆的策略引导模糊测试（PGFUZZ-Policy-Guided-Fuzzing-for-Robotic-Vehicles）"><a href="#PGFUZZ：机器人车辆的策略引导模糊测试（PGFUZZ-Policy-Guided-Fuzzing-for-Robotic-Vehicles）" class="headerlink" title="PGFUZZ：机器人车辆的策略引导模糊测试（PGFUZZ: Policy-Guided Fuzzing for Robotic Vehicles）"></a>PGFUZZ：机器人车辆的策略引导模糊测试（PGFUZZ: Policy-Guided Fuzzing for Robotic Vehicles）</h5><blockquote><p>在本文中，我们介绍了 PGFUZZ，这是一种策略引导的模糊测试框架，它验证 RV 是否遵守涵盖用户命令、配置参数和物理状态的已识别安全和功能策略。 PGFUZZ 通过具有时间约束的时间逻辑公式表达所需的策略，作为对分析系统进行模糊测试的指南。 具体来说，它生成模糊输入，以最小化距离度量，以测量 RV 当前状态与策略违规的“距离”。 此外，它使用静态和动态分析将模糊测试工作集中在那些影响任何已执行策略的“真实值”的命令、参数和环境因素上。 这两种技术的结合使 PGFUZZ 显着提高了模糊测试过程的效率。我们在三个 RV 控制程序 ArduPilot、PX4 和 Paparazzi 上使用 56 个独特的策略验证 PGFUZZ。 PGFUZZ 发现了 156 个以前未知的错误，其中 106 个已被其开发人员承认。</p></blockquote><h5 id="预防和检测-Android-上的状态推理攻击-Preventing-and-Detecting-State-Inference-Attacks-on-Android"><a href="#预防和检测-Android-上的状态推理攻击-Preventing-and-Detecting-State-Inference-Attacks-on-Android" class="headerlink" title="预防和检测 Android 上的状态推理攻击(Preventing and Detecting State Inference Attacks on Android)"></a>预防和检测 Android 上的状态推理攻击(Preventing and Detecting State Inference Attacks on Android)</h5><blockquote><p>在这项工作中，我们展示了 Android 平台如何仍然受到状态推理攻击的影响。 我们系统地扩展了攻击面，我们设计了一个新的自动框架，发现了 18 个新的易受攻击的 API，这些 API 泄露了敏感信息，影响了 Android 8.1 和 9。作为第二个贡献，我们描述了恶意应用程序中的轮询行为，更重要的是，良性应用程序 ，发现允许它们正确分类的差异。 我们利用这些发现来设计和实现一种新的设备检测机制，即使在利用未知的易受攻击的 API 时，也能从根本上阻止状态推断攻击，而且开销可以忽略不计，而且不会牺牲可用性。</p></blockquote><h5 id="SymQEMU：二进制文件的基于编译的符号执行（SymQEMU-Compilation-based-symbolic-execution-for-binaries）"><a href="#SymQEMU：二进制文件的基于编译的符号执行（SymQEMU-Compilation-based-symbolic-execution-for-binaries）" class="headerlink" title="SymQEMU：二进制文件的基于编译的符号执行（SymQEMU: Compilation-based symbolic execution for binaries）"></a>SymQEMU：二进制文件的基于编译的符号执行（SymQEMU: Compilation-based symbolic execution for binaries）</h5><blockquote><p>我们介绍了 SymQEMU，这是一种将基于编译的符号执行应用于二进制文件的新方法。 我们的评估表明，SymQEMU 明显优于最先进的二进制符号执行器，甚至跟上基于源的技术。 此外，SymQEMU 很容易扩展到许多目标架构，只需要几行代码即可支持 QEMU 可以处理的任何架构。 最后，我们通过在经过大量测试的 libarchive 库中发现以前未知的内存错误来展示 SymQEMU 的实际用途。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>论文计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMP&amp;Dex2C（待更新）</title>
    <link href="/2022/01/08/VMP&amp;Dex2C%EF%BC%88%E5%BE%85%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <url>/2022/01/08/VMP&amp;Dex2C%EF%BC%88%E5%BE%85%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>研究反混淆有没有意义？ </p><p>一般而言应该是没有意义的…… </p><ol><li><p>这么多年过去了，连有实用意义的标准ollvm的反混淆都没有搞出来 </p></li><li><p>就算ollvm的有了，改pass的那么多厂商的非标准混淆，又得从头去研究，没有通用方案 </p></li><li><p>还有很多从原理上就无法反混淆的技术，比如(dex)vmp、Dex2C等 </p></li><li><p>手动/人工还原始终是无法被取代的，技术人员还是得掌握完整的混淆分析技巧 </p></li><li><p>frida/unidbg/aosp源码调用等技术出现之后，找到各种合适的点，去hook分析和主动调用，意义更大一些。</p></li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="文章收集"><a href="#文章收集" class="headerlink" title="文章收集"></a>文章收集</h3><p>1、一种通过后端编译优化脱混淆壳的方法</p><p>【简介】一种基于编译原理来实现和打造脱混淆壳的方案，内容与编译原理很接近，可以作为解决VMP这类型壳的思路，不过这个思路也是需要去进行优化的。</p><p><a href="https://bbs.pediy.com/thread-260626.htm">https://bbs.pediy.com/thread-260626.htm</a></p><p>2、一种通过后端编译优化脱虚拟机壳的方法</p><p>【简介】不同于上一篇的文章，内容是有实战环节，这个对抗虚拟机（VMP）的一种解决思路</p><p><a href="https://bbs.pediy.com/thread-266014.htm">https://bbs.pediy.com/thread-266014.htm</a></p><p>3、360加固保免费版分析</p><p>【简介】该加固中使用到大致如下的内容：</p><p>（1）、SO加载动态解密</p><p>（2）、自定义linker加载</p><p>（3）、dex加密隐藏技术</p><p>（4）、VMP化方法</p><p>（5）、抹去了dex、so文件头</p><p><a href="https://bbs.pediy.com/thread-258511.htm">https://bbs.pediy.com/thread-258511.htm</a></p><p>4、百度加固免费版分析及VMP修复</p><p>【简介】这个加固中同样涉及到OLLVM混淆和VMP技术</p><p>文中提到了修复vmp的过程，在回答中也提出了一个技巧就是在不还原ollvm的情况下去分析调试，还有就是过Debug.isDebuggerConnected检测</p><p><a href="https://bbs.pediy.com/thread-257926.htm">https://bbs.pediy.com/thread-257926.htm</a></p><p>5、利用编译器优化干掉控制流平坦化flatten</p><p>【简介】这个文章是借鉴上面的两篇文章进行的研究，对抗控制流平坦化，内容不过多解读，可以证明这个思路是一个不错的思路。</p><p><a href="https://bbs.pediy.com/thread-266323.htm">https://bbs.pediy.com/thread-266323.htm</a></p><p>6、通过一款早期代码抽取壳入门学习 so 层分析</p><p>【简介】这篇文章详细的记录了抽取式的加固的分析方案，其中涉及到很多基础的分析知识，是我们学习和分析的一个不错的好案例</p><p><a href="https://bbs.pediy.com/thread-260251.htm">https://bbs.pediy.com/thread-260251.htm</a></p><p>7、分析邦邦加固</p><p>【简介】upx加固so，脱壳并修复，过fart检测，最后手动调试</p><p><a href="https://bbs.pediy.com/thread-266247.htm">https://bbs.pediy.com/thread-266247.htm</a></p><p>8、分析乐固加固</p><p>【简介】其中涉及到olllvm混淆</p><p><a href="https://bbs.pediy.com/thread-266972.htm">https://bbs.pediy.com/thread-266972.htm</a></p><p>9、分析360加固</p><p>【简介】加固手段所有的壳大同小异，不过未来覆盖全面还是觉得这个文章是有必要探究一下的。</p><p><a href="https://bbs.pediy.com/thread-260049.htm">https://bbs.pediy.com/thread-260049.htm</a></p><p>10、某企业级加固[四代壳]VMP解释执行+指令还原</p><p>【简介】分析的样本应该是梆梆加固的企业版，但是作者并未把完整的样本放出来</p><p>简单的介绍了如何上手分析VMP</p><p>反调试手段（还是逃不过那17种）</p><p>OLLVM混淆</p><p>然后就是指令还原</p><p><a href="https://bbs.pediy.com/thread-257061.htm">https://bbs.pediy.com/thread-257061.htm</a></p><p>11、爱加密-反调试-DumpDex-修复指令-重打包</p><p>【简介】比较奇特的一点就是对信号反调试有讲解</p><p>本篇文章更多的是反调试，修复指令，定制rom的方式修复，这个应该和FART生成bin文件是类似的。</p><p><a href="https://bbs.pediy.com/thread-249684-1.htm">https://bbs.pediy.com/thread-249684-1.htm</a></p><p>12、某加固详细分析总结，另附该加固脱壳机</p><p>【简介】算是加壳的原理解析吧，同时还有脱壳机存在，还是可以研究的，虽然没有vmp的知识，但是都是加固方面的</p><p><a href="https://bbs.pediy.com/thread-252828.htm">https://bbs.pediy.com/thread-252828.htm</a></p><p>13、阿里壳分析和修复</p><p>抽取式加固方案的分析</p><p><a href="https://bbs.pediy.com/thread-226480.htm">https://bbs.pediy.com/thread-226480.htm</a></p><p>14、某VMP壳原理分析笔记</p><p>【简介】</p><ul><li><p>反调试</p></li><li><ul><li>时间反调试</li><li>rtld_db_dlactivity反调试</li></ul></li><li><ul><li>traceid反调试</li><li>端口反调试</li></ul></li><li><p>linker部分：用来加载第二个so</p></li><li><ul><li>装载</li><li>创建soinfo</li></ul></li><li><ul><li>链接</li><li>dump second so</li></ul></li><li><p>虚拟机部分：解释执行保护的代码</p></li><li><ul><li>dump dex</li><li>onCreate分析</li></ul></li><li><ul><li>虚拟机入口</li></ul></li></ul><p><a href="https://bbs.pediy.com/thread-225798.htm">https://bbs.pediy.com/thread-225798.htm</a></p><p>Dalvik源码分析到vmp</p><p><a href="https://bbs.pediy.com/thread-226214.htm">https://bbs.pediy.com/thread-226214.htm</a></p><p>15、乐固libshella 2.10.1分析笔记</p><p>【简介】</p><p>修复So文件</p><p>第一次解密</p><p>第二次解密</p><p>解密Dex</p><p>Dalvik下加载Dex原理分析</p><p>Art下加载Dex原理分析</p><p>Dalvik下脱壳机编写</p><p>Art下脱壳机编写</p><p><a href="https://bbs.pediy.com/thread-218782.htm">https://bbs.pediy.com/thread-218782.htm</a></p><p>16、360加固之onCreate函数还原并重打包</p><p>【简介】native onCreate</p><p><a href="https://bbs.pediy.com/thread-223223.htm">https://bbs.pediy.com/thread-223223.htm</a></p><p>17、利用活跃变量分析来去掉vmp大部分垃圾指令</p><p>【简介】思路很清晰，想法也非常不错，不过看好像是在pc端实现的，并未应用在android端</p><p><a href="https://bbs.pediy.com/thread-265950.htm">https://bbs.pediy.com/thread-265950.htm</a></p><p>18、某Android 的 Dex vmp加固逆向分析</p><p>【简介】顶象的壳加固</p><p><a href="https://bbs.pediy.com/thread-221270.htm">https://bbs.pediy.com/thread-221270.htm</a></p><p>19、去混淆、dex2c、OLLVM混淆</p><p><a href="https://bbs.pediy.com/user-240967.htm">https://bbs.pediy.com/user-240967.htm</a></p><p>这个看雪的博客内容太符合这个专题了，mark一下</p><p><a href="https://github.com/F8LEFT/SoFixer"></a></p>]]></content>
    
    
    <categories>
      
      <category>Android安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android安全</tag>
      
      <tag>VMP</tag>
      
      <tag>Dex2C</tag>
      
      <tag>Android加固</tag>
      
      <tag>Android脱壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日checklist（20.10.09-21.01.23）</title>
    <link href="/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%8820.10.09-21.01.23%EF%BC%89/"/>
    <url>/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%8820.10.09-21.01.23%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>记录了20201009-20210123之间看到的一些比较感兴趣的文章</p><p>尽量将该部分的文章一一清除，转化成为自己的知识。</p><h3 id="2020-10-09"><a href="#2020-10-09" class="headerlink" title="2020.10.09"></a>2020.10.09</h3><ul><li><input disabled="" type="checkbox"> 1、记录如何寻找.init_array的，在IDA中</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12733198/1614768934593-13b62b91-c0bc-460b-bd28-cfdde21bddea.png" alt="img"></p><ul><li><input disabled="" type="checkbox"> 2、如何下断点在.init_Array中？</li></ul><p><a href="https://zhuanlan.zhihu.com/p/30851148">https://zhuanlan.zhihu.com/p/30851148</a></p><ul><li><input disabled="" type="checkbox"> 3、android CTF</li></ul><p><a href="https://www.52pojie.cn/thread-820158-1-1.html">https://www.52pojie.cn/thread-820158-1-1.html</a></p><p>其实一点都不简单，其实仔细看也挺简单的。有时间复现一下</p><ul><li><input disabled="" type="checkbox"> 4、完整apk分析实战</li></ul><p><a href="https://paper.seebug.org/178/">https://paper.seebug.org/178/</a></p><ul><li><input disabled="" type="checkbox"> 5、dex分析的CTF题目</li></ul><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1105062&amp;extra=page=1&filter=typeid&typeid=345&orderby=lastpost">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1105062&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D345%26orderby%3Dlastpost</a></p><p>有时间好好理解一下这个玩意</p><h3 id="2020-10-10"><a href="#2020-10-10" class="headerlink" title="2020.10.10"></a>2020.10.10</h3><p>1、想办法解决一下JEB动态调试无法附加进程这个问题？感觉不是jeb软件的问题而是环境配置问题</p><p>2、重写小机器人项目，最近有一份新的开源机器人项目框架</p><p><a href="https://blog.sakuya.love/archives/xzz/">部署一个自己的人工智障机器人 - SiHuan’s Blog</a></p><p><a href="https://github.com/Mrs4s/go-cqhttp">https://github.com/Mrs4s/go-cqhttp</a></p><p>然后打算重构我的爬虫脚本，完成之前没有完成的部分，打造一个二进制爬虫小机器人</p><p>项目策划：</p><p>①、学习这个机器人框架，打算做的更加有特色</p><p>②、增加更多的网站的爬虫</p><p>③、考虑增加机器人的互动特色——可以根据关键信息查询数据库的资料</p><p>④、打造备忘录提醒功能，可以根据用户自定义提醒</p><p>⑤、未完待续….</p><p>相关的项目设计细节放在石墨文档中</p><h3 id="2020-10-19"><a href="#2020-10-19" class="headerlink" title="2020.10.19"></a>2020.10.19</h3><p>前段时间都在培训，所以没有发现一些新的学习点</p><p>最近开始继续学习android安全这块</p><p>开始搭建android测试相关的环境和熟悉前面学过的内容</p><p><a href="https://bbs.pediy.com/thread-262208.htm">https://bbs.pediy.com/thread-262208.htm</a></p><p>这里是android APP安全评估手册</p><p>今天打算学习一下抓包分析这块，还有就是分析实战这块</p><h3 id="2020-10-20"><a href="#2020-10-20" class="headerlink" title="2020.10.20"></a>2020.10.20</h3><p>今天学习drozer这个安全测试框架的基本的搭建的使用，发现了一些比较好的资源</p><ul><li><input disabled="" type="checkbox"> 1、安全手册</li></ul><p><a href="https://bbs.pediy.com/thread-262208.htm">https://bbs.pediy.com/thread-262208.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、drozer使用</li></ul><p><a href="https://www.jianshu.com/p/dfa92bab3a55">https://www.jianshu.com/p/dfa92bab3a55</a></p><p><a href="https://blog.csdn.net/jianglianye21/article/details/80667346">https://blog.csdn.net/jianglianye21/article/details/80667346</a></p><p><a href="https://jwt1399.top/posts/4946.html#toc-heading-9">https://jwt1399.top/posts/4946.html#toc-heading-9</a></p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5e2d9d98dd0/">https://www.dazhuanlan.com/2020/03/03/5e5e2d9d98dd0/</a></p><p><a href="https://www.e-learn.cn/topic/3153010">https://www.e-learn.cn/topic/3153010</a></p><p><a href="https://www.secpulse.com/archives/76102.html">https://www.secpulse.com/archives/76102.html</a></p><ul><li><input disabled="" type="checkbox"> 3、drozer深入理解（源码分析）</li></ul><p><a href="https://bbs.pediy.com/thread-191148.htm">https://bbs.pediy.com/thread-191148.htm</a></p><ul><li><input disabled="" type="checkbox"> 4、利用drozer实战进行分析的，同时也是漏洞利用的</li></ul><p><a href="https://bbs.pediy.com/thread-261854.htm">https://bbs.pediy.com/thread-261854.htm</a></p><ul><li><input disabled="" type="checkbox"> 5、一个挑战的apk（frida hook）</li></ul><p><a href="https://bbs.pediy.com/thread-255361.htm">https://bbs.pediy.com/thread-255361.htm</a></p><ul><li><input disabled="" type="checkbox"> 6、android逆向博主</li></ul><p><a href="https://www.jianshu.com/u/3c33ff3bc61e">https://www.jianshu.com/u/3c33ff3bc61e</a></p><h3 id="2020-11-06"><a href="#2020-11-06" class="headerlink" title="2020.11.06"></a>2020.11.06</h3><ul><li><input disabled="" type="checkbox"> 1、Android开发知识总结</li></ul><p><a href="https://www.kancloud.cn/alex_wsc/android/401651">https://www.kancloud.cn/alex_wsc/android/401651</a></p><h3 id="2020-11-10"><a href="#2020-11-10" class="headerlink" title="2020.11.10"></a>2020.11.10</h3><ul><li><input disabled="" type="checkbox"> 1、Tcpdump抓包指南</li></ul><p><a href="https://juejin.im/post/6844904084168769549#heading-0">https://juejin.im/post/6844904084168769549#heading-0</a></p><ul><li><input disabled="" type="checkbox"> 2、解密tlsv.1.2协议</li></ul><p><a href="https://blog.csdn.net/wzj_whut/article/details/86626529">https://blog.csdn.net/wzj_whut/article/details/86626529</a></p><ul><li><input disabled="" type="checkbox"> 3、Android的网络编程（okhttp3）</li></ul><p><a href="https://www.jianshu.com/p/2663ce3da0db">https://www.jianshu.com/p/2663ce3da0db</a></p><h3 id="2020-11-12"><a href="#2020-11-12" class="headerlink" title="2020.11.12"></a>2020.11.12</h3><ul><li><input disabled="" type="checkbox"> 1、service的启动方式</li></ul><p><a href="https://www.jianshu.com/p/4c798c91a613">https://www.jianshu.com/p/4c798c91a613</a></p><ul><li><input disabled="" type="checkbox"> 2、okhttp3原理</li></ul><p><a href="https://juejin.im/post/6844903894926000141">https://juejin.im/post/6844903894926000141</a></p><ul><li><input disabled="" type="checkbox"> 3、开发设计模式中的builder</li></ul><p><a href="https://www.jianshu.com/p/e0f9ab062573">https://www.jianshu.com/p/e0f9ab062573</a></p><p><a href="https://juejin.im/post/6844903474673483784">https://juejin.im/post/6844903474673483784</a></p><p><a href="https://www.jianshu.com/p/0adc46f457be">https://www.jianshu.com/p/0adc46f457be</a></p><h3 id="2020-11-13"><a href="#2020-11-13" class="headerlink" title="2020.11.13"></a>2020.11.13</h3><ul><li><input disabled="" type="checkbox"> 1、学习使用okhttp，便于逆向分析</li></ul><p><a href="https://square.github.io/okhttp/">https://square.github.io/okhttp/</a></p><p><a href="https://www.jianshu.com/p/2388f4883120">https://www.jianshu.com/p/2388f4883120</a></p><h3 id="2020-11-16"><a href="#2020-11-16" class="headerlink" title="2020.11.16"></a>2020.11.16</h3><ul><li><input disabled="" type="checkbox"> 1、学习service</li></ul><p><a href="https://blog.csdn.net/guolin_blog/article/details/11952435">https://blog.csdn.net/guolin_blog/article/details/11952435</a></p><p><a href="https://blog.csdn.net/guolin_blog/article/details/9797169">https://blog.csdn.net/guolin_blog/article/details/9797169</a></p><ul><li><input disabled="" type="checkbox"> 2、service详解</li></ul><p><a href="https://juejin.im/post/6844903781541347341#heading-6">https://juejin.im/post/6844903781541347341#heading-6</a></p><p><a href="https://juejin.im/post/6844903781931417614">https://juejin.im/post/6844903781931417614</a></p><ul><li><input disabled="" type="checkbox"> 3、基于frida抓取okhttp流量</li></ul><p>参考r0ysue的文章进行学习抓包</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457739888&amp;idx=1&amp;sn=96ca660c676543f235f9b4c8c088300e&amp;chksm=ff448a2ec8330338ccacf61e13c74cf5fd6d69559935073d134bba57d58172abc789110302d7&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457739888&amp;idx=1&amp;sn=96ca660c676543f235f9b4c8c088300e&amp;chksm=ff448a2ec8330338ccacf61e13c74cf5fd6d69559935073d134bba57d58172abc789110302d7&amp;scene=21#wechat_redirect</a></p><p><a href="https://cloud.tencent.com/developer/article/1669631">https://cloud.tencent.com/developer/article/1669631</a></p><ul><li><input disabled="" type="checkbox"> 4、android 数据库</li></ul><p><a href="https://www.jianshu.com/p/5ac84e8497b5">https://www.jianshu.com/p/5ac84e8497b5</a></p><p>android常用的数据库，可以分析实现一下</p><h3 id="2020-11-17"><a href="#2020-11-17" class="headerlink" title="2020.11.17"></a>2020.11.17</h3><ul><li><input disabled="" type="checkbox"> 1、学习使用greenDao数据库的使用</li></ul><p><a href="https://www.cnblogs.com/Free-Thinker/p/10880219.html">https://www.cnblogs.com/Free-Thinker/p/10880219.html</a></p><p><a href="https://andrewlcgu.github.io/2017/03/13/greenDAO-analysis/">https://andrewlcgu.github.io/2017/03/13/greenDAO-analysis/</a></p><p><a href="https://www.jianshu.com/p/d9b25ed46c95">https://www.jianshu.com/p/d9b25ed46c95</a></p><ul><li><input disabled="" type="checkbox"> 2、本地拒绝服务漏洞</li></ul><p><a href="https://blogs.360.cn/post/android-app%E9%80%9A%E7%94%A8%E5%9E%8B%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A.html">https://blogs.360.cn/post/android-app通用型拒绝服务漏洞分析报告.html</a></p><ul><li><input disabled="" type="checkbox"> 3、android  常见的漏洞</li></ul><p><a href="https://bbs.pediy.com/thread-226791-1.htm">https://bbs.pediy.com/thread-226791-1.htm</a></p><ul><li><input disabled="" type="checkbox"> 4、android安全技术点小结</li></ul><p><a href="https://bbs.pediy.com/thread-257766.htm">https://bbs.pediy.com/thread-257766.htm</a></p><h3 id="2020-11-18"><a href="#2020-11-18" class="headerlink" title="2020.11.18"></a>2020.11.18</h3><ul><li><input disabled="" type="checkbox"> 1、android checklist android检测漏洞</li></ul><p><a href="https://github.com/guanchao/AndroidChecklist">https://github.com/guanchao/AndroidChecklist</a></p><p><a href="https://github.com/M31N99/Mobile-Security-Checklist">https://github.com/M31N99/Mobile-Security-Checklist</a></p><ul><li><input disabled="" type="checkbox"> 2、android漏洞</li></ul><p><a href="https://ayesawyer.github.io/2019/08/21/Android-App%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/">https://ayesawyer.github.io/2019/08/21/Android-App常见安全漏洞/</a></p><ul><li><input disabled="" type="checkbox"> 3、activity组件导出实验</li></ul><p><a href="http://tea9.xyz/post/2970212528.html">http://tea9.xyz/post/2970212528.html</a></p><ul><li><input disabled="" type="checkbox"> 4、ContentProvider路径穿越漏洞</li></ul><p><a href="https://keenlab.tencent.com/zh/whitepapers/%E8%85%BE%E8%AE%AF%E5%AE%89%E5%85%A8%E7%A7%91%E6%81%A9%E5%AE%9E%E9%AA%8C%E5%AE%A42018%E5%B9%B4Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E7%99%BD%E7%9A%AE%E4%B9%A6.pdf">https://keenlab.tencent.com/zh/whitepapers/腾讯安全科恩实验室2018年Android应用安全白皮书.pdf</a></p><p><a href="https://www.freebuf.com/articles/terminal/105857.html">https://www.freebuf.com/articles/terminal/105857.html</a></p><p><a href="http://01hackcode.com/wiki/7.3">http://01hackcode.com/wiki/7.3</a></p><p><a href="https://mabin004.github.io/2019/04/15/Android-Download-Provider%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">https://mabin004.github.io/2019/04/15/Android-Download-Provider漏洞分析/</a></p><h3 id="2020-11-19"><a href="#2020-11-19" class="headerlink" title="2020.11.19"></a>2020.11.19</h3><ul><li><input disabled="" type="checkbox"> 1、android socket实现</li></ul><p><a href="https://blog.csdn.net/DickyQie/article/details/80045639">https://blog.csdn.net/DickyQie/article/details/80045639</a></p><p><a href="https://lixiaogang03.github.io/2019/07/30/Android-Socket/">https://lixiaogang03.github.io/2019/07/30/Android-Socket/</a></p><ul><li><input disabled="" type="checkbox"> 2、分析socket攻击</li></ul><p><a href="https://www.ms509.com/2015/07/12/android-open-port/">https://www.ms509.com/2015/07/12/android-open-port/</a></p><h3 id="2020-11-20"><a href="#2020-11-20" class="headerlink" title="2020.11.20"></a>2020.11.20</h3><ul><li><input disabled="" type="checkbox"> 1、ContentProvider开发相关</li></ul><p><a href="https://www.jianshu.com/p/ea8bc4aaf057">https://www.jianshu.com/p/ea8bc4aaf057</a></p><ul><li><input disabled="" type="checkbox"> 2、Android Binder</li></ul><p><a href="https://www.jianshu.com/p/4ee3fd07da14">https://www.jianshu.com/p/4ee3fd07da14</a></p><ul><li><input disabled="" type="checkbox"> 3、利用app的漏洞</li></ul><p><a href="https://ayesawyer.github.io/2019/05/28/%E5%88%A9%E7%94%A8App%E4%B8%AD%E7%9A%84%E6%BC%8F%E6%B4%9E/">https://ayesawyer.github.io/2019/05/28/利用App中的漏洞/</a></p><ul><li><input disabled="" type="checkbox"> 4、drozer工具测评</li></ul><p><a href="https://ayesawyer.github.io/2019/05/24/Android%E5%AE%89%E5%85%A8%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7drozer/">https://ayesawyer.github.io/2019/05/24/Android安全评估工具drozer/</a></p><h3 id="2020-11-21"><a href="#2020-11-21" class="headerlink" title="2020.11.21"></a>2020.11.21</h3><ul><li><input disabled="" type="checkbox"> 1、如何动态调试android的动态注册函数</li></ul><p><a href="https://blog.csdn.net/yjjyxm/article/details/103256634">https://blog.csdn.net/yjjyxm/article/details/103256634</a></p><p><a href="https://blog.csdn.net/pengyan0812/article/details/43991983">https://blog.csdn.net/pengyan0812/article/details/43991983</a></p><p><a href="https://bbs.pediy.com/thread-258022.htm">https://bbs.pediy.com/thread-258022.htm</a></p><h3 id="2020-11-22"><a href="#2020-11-22" class="headerlink" title="2020.11.22"></a>2020.11.22</h3><ul><li><input disabled="" type="checkbox"> 1、OLLVM平坦化（android so）</li></ul><p><a href="https://bbs.pediy.com/thread-256299.htm">https://bbs.pediy.com/thread-256299.htm</a></p><p><a href="https://bbs.pediy.com/thread-217727.htm">https://bbs.pediy.com/thread-217727.htm</a></p><p><a href="https://bbs.pediy.com/thread-260507.htm">https://bbs.pediy.com/thread-260507.htm</a></p><p><a href="https://bbs.pediy.com/thread-259848.htm">https://bbs.pediy.com/thread-259848.htm</a></p><p><a href="https://bbs.pediy.com/thread-257878.htm">https://bbs.pediy.com/thread-257878.htm</a></p><p><a href="https://bbs.pediy.com/thread-252321.htm">https://bbs.pediy.com/thread-252321.htm</a></p><p><a href="https://www.anquanke.com/post/id/200744">https://www.anquanke.com/post/id/200744</a></p><p><a href="https://www.anquanke.com/post/id/201459">https://www.anquanke.com/post/id/201459</a></p><h3 id="2020-11-23"><a href="#2020-11-23" class="headerlink" title="2020.11.23"></a>2020.11.23</h3><ul><li><input disabled="" type="checkbox"> 1、webview跨域访问风险</li></ul><p><a href="http://www.nxadmin.com/mobile-sec/1657.html">http://www.nxadmin.com/mobile-sec/1657.html</a></p><p><a href="https://blog.csdn.net/weixin_38031122/article/details/79287396">https://blog.csdn.net/weixin_38031122/article/details/79287396</a></p><ul><li><input disabled="" type="checkbox"> 2、webview中的javascript interface接口开放风险</li></ul><p><a href="https://www.freebuf.com/articles/terminal/201407.html">https://www.freebuf.com/articles/terminal/201407.html</a></p><h3 id="2020-11-24"><a href="#2020-11-24" class="headerlink" title="2020.11.24"></a>2020.11.24</h3><ul><li><input disabled="" type="checkbox"> 1、app渗透测试入门</li></ul><p><a href="http://blog.orleven.com/2017/06/22/android-base/">http://blog.orleven.com/2017/06/22/android-base/</a></p><ul><li><input disabled="" type="checkbox"> 2、android渗透测试学习app例子</li></ul><p><a href="https://codeengn.com/challenges/">https://codeengn.com/challenges/</a></p><h3 id="2020-11-25"><a href="#2020-11-25" class="headerlink" title="2020.11.25"></a>2020.11.25</h3><ul><li><input disabled="" type="checkbox"> 1、js接口暴露</li></ul><p><a href="https://blog.csdn.net/u014132820/article/details/86671300">https://blog.csdn.net/u014132820/article/details/86671300</a></p><h3 id="2020-11-28"><a href="#2020-11-28" class="headerlink" title="2020.11.28"></a>2020.11.28</h3><ul><li><input disabled="" type="checkbox"> 1、DEX-vmp技术</li></ul><p><a href="https://geneblue.github.io/2019/09/13/android/sec--android-dex-vmp/">https://geneblue.github.io/2019/09/13/android/sec--android-dex-vmp/</a></p><ul><li><input disabled="" type="checkbox"> 2、ssl 破除抓包</li></ul><p><a href="https://mabin004.github.io/2020/07/24/%E8%87%AA%E5%8A%A8%E5%AE%9A%E4%BD%8Dwebview%E4%B8%AD%E7%9A%84SLL-read%E5%92%8CSSL-write/#more">https://mabin004.github.io/2020/07/24/自动定位webview中的SLL-read和SSL-write/#more</a></p><ul><li><input disabled="" type="checkbox"> 3、工具收集</li></ul><p><a href="https://mabin004.github.io/hint/">https://mabin004.github.io/hint/</a></p><ul><li><input disabled="" type="checkbox"> 4、webview白名单绕过</li></ul><p><a href="https://mabin004.github.io/2019/04/23/Android-WebView%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/">https://mabin004.github.io/2019/04/23/Android-WebView白名单绕过/</a></p><h3 id="202-11-30"><a href="#202-11-30" class="headerlink" title="202.11.30"></a>202.11.30</h3><ul><li><input disabled="" type="checkbox"> 1、工控安全</li></ul><p><a href="https://www.anquanke.com/member/141205">https://www.anquanke.com/member/141205</a></p><ul><li><input disabled="" type="checkbox"> 2、TLSv1.2学习</li></ul><p><a href="https://www.anquanke.com/post/id/222627">https://www.anquanke.com/post/id/222627</a></p><h3 id="2020-12-02"><a href="#2020-12-02" class="headerlink" title="2020.12.02"></a>2020.12.02</h3><ul><li><input disabled="" type="checkbox"> 1、逆向360浏览器，辅助红队</li></ul><p><a href="https://github.com/hayasec/360SafeBrowsergetpass">https://github.com/hayasec/360SafeBrowsergetpass</a></p><p><a href="https://bbs.pediy.com/thread-263905.htm">https://bbs.pediy.com/thread-263905.htm</a></p><h3 id="2020-12-14"><a href="#2020-12-14" class="headerlink" title="2020.12.14"></a>2020.12.14</h3><ul><li><input disabled="" type="checkbox"> 1、off-by-one</li></ul><p><a href="http://d0m021ng.github.io/2017/03/01/PWN/Linux%E5%A0%86%E6%BC%8F%E6%B4%9E%E4%B9%8Boff-by-one/">http://d0m021ng.github.io/2017/03/01/PWN/Linux堆漏洞之off-by-one/</a></p><p><a href="https://wizardforcel.gitbooks.io/sploitfun-linux-x86-exp-tut/content/3.html">https://wizardforcel.gitbooks.io/sploitfun-linux-x86-exp-tut/content/3.html</a></p><p><a href="http://www.peckerwood.top/post/off-by-one-heap-based/">http://www.peckerwood.top/post/off-by-one-heap-based/</a></p><h3 id="2020-12-16"><a href="#2020-12-16" class="headerlink" title="2020.12.16"></a>2020.12.16</h3><ul><li><input disabled="" type="checkbox"> 1、三道IOT相关的pwn题目</li></ul><p><a href="https://mp.weixin.qq.com/s/x19DiiitMeAm5VAupqzfdg">https://mp.weixin.qq.com/s/x19DiiitMeAm5VAupqzfdg</a></p><p><a href="https://www.anquanke.com/post/id/224972">https://www.anquanke.com/post/id/224972</a></p><h3 id="2020-12-17"><a href="#2020-12-17" class="headerlink" title="2020.12.17"></a>2020.12.17</h3><ul><li><input disabled="" type="checkbox"> 1、联动调试插件</li></ul><p><a href="https://bbs.pediy.com/thread-252634.htm">https://bbs.pediy.com/thread-252634.htm</a></p><h3 id="2020-12-18"><a href="#2020-12-18" class="headerlink" title="2020.12.18"></a>2020.12.18</h3><ul><li><input disabled="" type="checkbox"> 1、物联网设备的协议栈漏洞</li></ul><p><a href="https://mp.weixin.qq.com/s/cnHk1RQiH4rLU2Mk3QMT7w">https://mp.weixin.qq.com/s/cnHk1RQiH4rLU2Mk3QMT7w</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNTI1NDI3MQ==&amp;mid=2649615617&amp;idx=1&amp;sn=b6df9ee2c5265ded1913b318cc241d90&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzAwNTI1NDI3MQ==&amp;mid=2649615617&amp;idx=1&amp;sn=b6df9ee2c5265ded1913b318cc241d90&amp;scene=21#wechat_redirect</a></p><ul><li><input disabled="" type="checkbox"> 2、IOT OWASP上的练习实例</li></ul><p><a href="https://github.com/OWASP/IoTGoat">https://github.com/OWASP/IoTGoat</a></p><h3 id="2020-12-22"><a href="#2020-12-22" class="headerlink" title="2020.12.22"></a>2020.12.22</h3><ul><li><input disabled="" type="checkbox"> 1、Android内核提取并逆向分析</li></ul><p><a href="https://www.cnblogs.com/csnd/p/11800638.html">https://www.cnblogs.com/csnd/p/11800638.html</a></p><h3 id="2020-12-23"><a href="#2020-12-23" class="headerlink" title="2020.12.23"></a>2020.12.23</h3><ul><li><input disabled="" type="checkbox"> 1、使用unicorn还原OLLVM算法</li></ul><p><a href="https://bbs.pediy.com/thread-264498.htm">https://bbs.pediy.com/thread-264498.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、使用OLLVM加密</li></ul><p><a href="https://bbs.pediy.com/thread-264497.htm">https://bbs.pediy.com/thread-264497.htm</a></p><ul><li><input disabled="" type="checkbox"> 3、乐高加固分析</li></ul><p><a href="https://bbs.pediy.com/thread-264531.htm">https://bbs.pediy.com/thread-264531.htm</a></p><ul><li><input disabled="" type="checkbox"> 4、[PwnMonkey]海康萤石智能门锁的网关分析</li></ul><p><a href="https://www.52pojie.cn/thread-1255338-1-1.html">https://www.52pojie.cn/thread-1255338-1-1.html</a></p><ul><li><input disabled="" type="checkbox"> 5、binder漏洞CVE-2020-0041</li></ul><p><a href="https://www.anquanke.com/post/id/202385">https://www.anquanke.com/post/id/202385</a></p><h3 id="2020-12-26"><a href="#2020-12-26" class="headerlink" title="2020.12.26"></a>2020.12.26</h3><ul><li><input disabled="" type="checkbox"> 1、CVE-2020-0423 android内核提权漏洞分析</li></ul><p><a href="https://bbs.pediy.com/thread-264616.htm">https://bbs.pediy.com/thread-264616.htm</a></p><h3 id="2021-01-04"><a href="#2021-01-04" class="headerlink" title="2021.01.04"></a>2021.01.04</h3><ul><li><input disabled="" type="checkbox"> 1、CVE-2019-2215 Android的漏洞</li></ul><p><a href="https://bbs.pediy.com/thread-264932.htm">https://bbs.pediy.com/thread-264932.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、Android PWN</li></ul><p><a href="https://www.anquanke.com/post/id/204393#h2-7">https://www.anquanke.com/post/id/204393#h2-7</a></p><h3 id="2021-01-05"><a href="#2021-01-05" class="headerlink" title="2021.01.05"></a>2021.01.05</h3><ul><li><input checked="" disabled="" type="checkbox"> 1、对端口的探查</li></ul><p><a href="https://www.ms509.com/2015/07/12/android-open-port/">https://www.ms509.com/2015/07/12/android-open-port/</a></p><ul><li><input checked="" disabled="" type="checkbox"> 2、再次看一下这篇</li></ul><p><a href="https://bbs.pediy.com/thread-257766.htm">https://bbs.pediy.com/thread-257766.htm</a></p><h3 id="2021-01-06"><a href="#2021-01-06" class="headerlink" title="2021.01.06"></a>2021.01.06</h3><ul><li><input disabled="" type="checkbox"> 1、OLLVM去混淆</li></ul><p><a href="https://bbs.pediy.com/thread-264980.htm">https://bbs.pediy.com/thread-264980.htm</a></p><p><a href="https://bbs.pediy.com/thread-264981.htm">https://bbs.pediy.com/thread-264981.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、frida fuzz技术</li></ul><p><a href="http://riusksk.me/2019/11/30/Frida%E6%A1%86%E6%9E%B6%E5%9C%A8Fuzzing%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/">http://riusksk.me/2019/11/30/Frida框架在Fuzzing中的应用/</a></p><ul><li><input disabled="" type="checkbox"> 3、android逻辑漏洞半自动挖掘</li></ul><p><a href="http://riusksk.me/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/">http://riusksk.me/2019/11/02/Jandroid：半自动化Android应用逻辑漏洞挖掘/</a></p><ul><li><input disabled="" type="checkbox"> 4、fuzz技术汇总</li></ul><p><a href="https://github.com/secfigo/Awesome-Fuzzing">https://github.com/secfigo/Awesome-Fuzzing</a></p><p><a href="http://riusksk.me/2019/07/14/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E5%AD%A6%E4%B9%A0%E7%9A%84Fuzzer%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">http://riusksk.me/2019/07/14/一些值得学习的Fuzzer开源项目/</a></p><h3 id="2021-01-07"><a href="#2021-01-07" class="headerlink" title="2021.01.07"></a>2021.01.07</h3><ul><li><input disabled="" type="checkbox"> 1、OLLVM混淆</li></ul><p><a href="https://bbs.pediy.com/thread-265026.htm">https://bbs.pediy.com/thread-265026.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、QEMU逃逸</li></ul><p><a href="https://www.anquanke.com/post/id/227283">https://www.anquanke.com/post/id/227283</a></p><ul><li><input disabled="" type="checkbox"> 3、QEMU源码分析</li></ul><p><a href="https://www.anquanke.com/post/id/224571">https://www.anquanke.com/post/id/224571</a></p><h3 id="2021-01-12"><a href="#2021-01-12" class="headerlink" title="2021.01.12"></a>2021.01.12</h3><ul><li><input disabled="" type="checkbox"> 1、一个算法分析的apk</li></ul><p><a href="https://bbs.pediy.com/thread-265172.htm">https://bbs.pediy.com/thread-265172.htm</a></p><h3 id="2021-01-13"><a href="#2021-01-13" class="headerlink" title="2021.01.13"></a>2021.01.13</h3><ul><li><input disabled="" type="checkbox"> 1、android下通过UID值查看用户</li></ul><p><a href="https://www.jianshu.com/p/b33dd49f2ae6">https://www.jianshu.com/p/b33dd49f2ae6</a></p><ul><li><input disabled="" type="checkbox"> 2、android系统目录结构</li></ul><p><a href="https://www.jianshu.com/p/d4efc73c155e">https://www.jianshu.com/p/d4efc73c155e</a></p><p><a href="https://juejin.cn/post/6844904013515718664">https://juejin.cn/post/6844904013515718664</a></p><ul><li><input disabled="" type="checkbox"> 3、OTA升级或者recovery升级</li></ul><p><a href="https://www.freebuf.com/vuls/135315.html">https://www.freebuf.com/vuls/135315.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/70377497">https://zhuanlan.zhihu.com/p/70377497</a></p><p><a href="https://www.xiezeyang.com/2018/10/05/Framework/Framework%E5%B1%82Recovery%E6%B5%85%E6%9E%90/">https://www.xiezeyang.com/2018/10/05/Framework/Framework层Recovery浅析/</a></p><p><a href="https://juejin.cn/post/6844903783172931597">https://juejin.cn/post/6844903783172931597</a></p><ul><li><input disabled="" type="checkbox"> 4、android系统升级OTA的专题</li></ul><p><a href="https://chendongqi.me/2018/12/11/SystemUpgradeOverView/">https://chendongqi.me/2018/12/11/SystemUpgradeOverView/</a></p><p>该博客写的挺好的</p><ul><li><input disabled="" type="checkbox"> 5、android IPC通信 binder</li></ul><p><a href="https://www.jianshu.com/p/36b488863bc0">https://www.jianshu.com/p/36b488863bc0</a></p><h3 id="2021-01-14"><a href="#2021-01-14" class="headerlink" title="2021.01.14"></a>2021.01.14</h3><ul><li><input disabled="" type="checkbox"> 1、MQTT IOT协议</li></ul><p><a href="http://www.steves-internet-guide.com/mqtt-works/">http://www.steves-internet-guide.com/mqtt-works/</a></p><p><a href="https://medium.com/@gaikwadchetan93/android-real-time-communication-using-mqtt-9ea42551475d">https://medium.com/@gaikwadchetan93/android-real-time-communication-using-mqtt-9ea42551475d</a></p><p><a href="https://android.jlelse.eu/about-the-mqtt-protocol-for-iot-on-android-efb4973577b">https://android.jlelse.eu/about-the-mqtt-protocol-for-iot-on-android-efb4973577b</a></p><ul><li><input disabled="" type="checkbox"> 2、OTA源码分析</li></ul><p><a href="https://blog.csdn.net/wzy_1988/article/details/46862247">https://blog.csdn.net/wzy_1988/article/details/46862247</a></p><p><a href="https://blog.csdn.net/csdn66_2016/category_6762933.html">https://blog.csdn.net/csdn66_2016/category_6762933.html</a></p><h3 id="2021-01-15"><a href="#2021-01-15" class="headerlink" title="2021.01.15"></a>2021.01.15</h3><ul><li><input disabled="" type="checkbox"> 1、对flutter抓包</li></ul><p><a href="https://bbs.pediy.com/thread-261941.htm">https://bbs.pediy.com/thread-261941.htm</a></p><h3 id="2021-01-18"><a href="#2021-01-18" class="headerlink" title="2021.01.18"></a>2021.01.18</h3><ul><li><input disabled="" type="checkbox"> 1、android中的加密与解密</li></ul><p><a href="https://bbs.pediy.com/thread-265350.htm">https://bbs.pediy.com/thread-265350.htm</a></p><ul><li><input checked="" disabled="" type="checkbox"> 2、MQTT协议安全</li></ul><p><a href="https://www.anquanke.com/post/id/212335">https://www.anquanke.com/post/id/212335</a></p><h3 id="2021-01-19"><a href="#2021-01-19" class="headerlink" title="2021.01.19"></a>2021.01.19</h3><ul><li><input checked="" disabled="" type="checkbox"> 1、车联网案例分析</li></ul><p><a href="https://mp.weixin.qq.com/s/Z8MHFHu-tgN6rIepEjm3tg">https://mp.weixin.qq.com/s/Z8MHFHu-tgN6rIepEjm3tg</a></p><ul><li><input disabled="" type="checkbox"> 2、RSA做签名验证</li></ul><p><a href="https://juejin.cn/post/6869682500453695496">https://juejin.cn/post/6869682500453695496</a></p><p><a href="https://zhuanlan.zhihu.com/p/59999022">https://zhuanlan.zhihu.com/p/59999022</a></p><p><a href="https://developer.aliyun.com/article/260055">https://developer.aliyun.com/article/260055</a></p><ul><li><input disabled="" type="checkbox"> 3、android app 突破双边认证</li></ul><p><a href="https://bbs.pediy.com/thread-265404.htm">https://bbs.pediy.com/thread-265404.htm</a></p><ul><li><input disabled="" type="checkbox"> 4、JEB工具的脚本开发</li></ul><p><a href="https://www.anquanke.com/post/id/228981">https://www.anquanke.com/post/id/228981</a></p><h3 id="2021-01-20"><a href="#2021-01-20" class="headerlink" title="2021.01.20"></a>2021.01.20</h3><ul><li><input checked="" disabled="" type="checkbox"> 1、查看系统架构的方法</li></ul><p><a href="https://www.sysgeek.cn/find-out-linux-system-32-or-64-bit/">https://www.sysgeek.cn/find-out-linux-system-32-or-64-bit/</a></p><ul><li><input disabled="" type="checkbox"> 2、android adb源码分析</li></ul><p><a href="https://www.jianshu.com/p/a47e1c90b9bf">https://www.jianshu.com/p/a47e1c90b9bf</a></p><ul><li><input disabled="" type="checkbox"> 3、protobuf 协议</li></ul><p><a href="https://zhuanlan.zhihu.com/p/141415216">https://zhuanlan.zhihu.com/p/141415216</a></p><p><a href="https://www.jianshu.com/p/bf515a264085">https://www.jianshu.com/p/bf515a264085</a></p><h3 id="2021-01-21"><a href="#2021-01-21" class="headerlink" title="2021.01.21"></a>2021.01.21</h3><ul><li><input disabled="" type="checkbox"> 1、Frida Android hook</li></ul><p><a href="https://eternalsakura13.com/2020/07/04/frida/">https://eternalsakura13.com/2020/07/04/frida/</a></p><ul><li><input disabled="" type="checkbox"> 2、Linux下的防火墙</li></ul><p><a href="https://blog.konghy.cn/2019/07/21/iptables/">https://blog.konghy.cn/2019/07/21/iptables/</a></p><p><a href="https://juejin.cn/post/6844903865146425351">https://juejin.cn/post/6844903865146425351</a></p><p>3、CAN总线逆向</p><p><a href="https://bacde.me/post/hacking-all-the-cars-can-bus-reverse/">https://bacde.me/post/hacking-all-the-cars-can-bus-reverse/</a></p><h3 id="2021-01-22"><a href="#2021-01-22" class="headerlink" title="2021.01.22"></a>2021.01.22</h3><ul><li><input disabled="" type="checkbox"> 1、android抓包通杀实战</li></ul><p><a href="https://www.anquanke.com/post/id/228709">https://www.anquanke.com/post/id/228709</a></p><p>工控安全移植过来的</p><ul><li><input disabled="" type="checkbox"> 1、工控安全入门</li></ul><p><a href="https://www.freebuf.com/articles/ics-articles/220302.html">https://www.freebuf.com/articles/ics-articles/220302.html</a></p><ul><li><input disabled="" type="checkbox"> 2、工控安全系列文章</li></ul><p><a href="https://www.freebuf.com/author/VllTomFord?type=article">https://www.freebuf.com/author/VllTomFord?type=article</a></p><ul><li><input disabled="" type="checkbox"> 3、工控安全协议系列</li></ul><p><a href="https://www.anquanke.com/member/141205">https://www.anquanke.com/member/141205</a></p><ul><li><input disabled="" type="checkbox"> 4、物联网安全系列之探索IoT通信安全的研究之道</li></ul><p><a href="https://security.tencent.com/index.php/blog/msg/171">https://security.tencent.com/index.php/blog/msg/171</a></p><ul><li><input disabled="" type="checkbox"> 5、工控安全相关的比赛</li></ul><p><a href="https://xz.aliyun.com/t/5960#toc-5">https://xz.aliyun.com/t/5960#toc-5</a></p><p><a href="https://xz.aliyun.com/t/6445">https://xz.aliyun.com/t/6445</a></p><p>可以关注工业信息安全技能大赛，会出现大量与工业有关的CTF赛题</p><ul><li><input disabled="" type="checkbox"> 6、移植freeRTOS</li></ul><p><a href="https://www.cnblogs.com/zc110747/default.html?page=1">https://www.cnblogs.com/zc110747/default.html?page=1</a></p><h3 id="2021-01-23"><a href="#2021-01-23" class="headerlink" title="2021.01.23"></a>2021.01.23</h3><ul><li><input disabled="" type="checkbox"> 1、QEMU逃逸初探</li></ul><p><a href="https://bbs.pediy.com/thread-265501.htm">https://bbs.pediy.com/thread-265501.htm</a></p><h3 id="2021-01-24"><a href="#2021-01-24" class="headerlink" title="2021.01.24"></a>2021.01.24</h3><ul><li><input disabled="" type="checkbox"> 1、特斯拉 NFC 中继攻击（CVE-2020-15912）</li></ul><p><a href="https://www.anquanke.com/post/id/213885">https://www.anquanke.com/post/id/213885</a></p><ul><li><input disabled="" type="checkbox"> 2、获取固件的9中方法</li></ul><p><a href="https://bbs.pediy.com/thread-230095.htm">https://bbs.pediy.com/thread-230095.htm</a></p><p>3、发现一个搜集的比较全的android安全</p><p><a href="https://github.com/alphaSeclab/android-security">https://github.com/alphaSeclab/android-security</a></p><ul><li><input disabled="" type="checkbox"> 4、urlscheme风险分析</li></ul><p><a href="https://www.jianshu.com/p/7b09cbac1df4">https://www.jianshu.com/p/7b09cbac1df4</a></p><p><a href="http://01hackcode.com/wiki/7.7">http://01hackcode.com/wiki/7.7</a></p><p><a href="https://xz.aliyun.com/t/3233">https://xz.aliyun.com/t/3233</a></p><h3 id="2021-01-25"><a href="#2021-01-25" class="headerlink" title="2021.01.25"></a>2021.01.25</h3><ul><li><input disabled="" type="checkbox"> 1、gdbserver</li></ul><p>mips gdbserver</p><p><a href="https://github.com/rapid7/embedded-tools">https://github.com/rapid7/embedded-tools</a></p><p>arm 32 gdbserver</p><p><a href="https://github.com/marcinguy/arm-gdb-static">https://github.com/marcinguy/arm-gdb-static</a></p><ul><li><input disabled="" type="checkbox"> 2、radare2的入门</li></ul><p><a href="https://bbs.pediy.com/thread-229522.htm">https://bbs.pediy.com/thread-229522.htm</a></p><ul><li><input disabled="" type="checkbox"> 3、ROPEmporium全解</li></ul><p><a href="https://bbs.pediy.com/thread-256914.htm">https://bbs.pediy.com/thread-256914.htm</a></p><ul><li><input disabled="" type="checkbox"> 4、gdb调试的原理</li></ul><p><a href="https://zhuanlan.zhihu.com/p/336922639">https://zhuanlan.zhihu.com/p/336922639</a></p><ul><li><input disabled="" type="checkbox"> 5、IPC通信</li></ul><p><a href="http://abcdxyzk.github.io/blog/2015/02/09/kernel-mm-shm3/">http://abcdxyzk.github.io/blog/2015/02/09/kernel-mm-shm3/</a></p><ul><li><input disabled="" type="checkbox"> 6、Protobuf 协议安全测试</li></ul><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwMjg1NTI2Nw==&amp;mid=503036373&amp;idx=1&amp;sn=3513ec150ddc9fb1d7cab116939062d6&amp;chksm=02cb01d935bc88cfab6d7cafc84593a2ea3b3683cdab91a90c2dbda6011f0e316edf44999c01">https://mp.weixin.qq.com/s?__biz=MzAwMjg1NTI2Nw==&amp;mid=503036373&amp;idx=1&amp;sn=3513ec150ddc9fb1d7cab116939062d6&amp;chksm=02cb01d935bc88cfab6d7cafc84593a2ea3b3683cdab91a90c2dbda6011f0e316edf44999c01</a></p><ul><li><input disabled="" type="checkbox"> 7、序列化与反序列化</li></ul><p><a href="https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html">https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html</a></p><h3 id="2021-01-26"><a href="#2021-01-26" class="headerlink" title="2021.01.26"></a>2021.01.26</h3><ul><li><input disabled="" type="checkbox"> 1、Linux下的路由和防火墙规则</li></ul><p><a href="https://www.cnblogs.com/sunsky303/p/10859356.html">https://www.cnblogs.com/sunsky303/p/10859356.html</a></p><ul><li><input disabled="" type="checkbox"> 2、ifconfig解析</li></ul><p><a href="https://www.jianshu.com/p/82ae15b9420b">https://www.jianshu.com/p/82ae15b9420b</a></p><ul><li><input disabled="" type="checkbox"> 3、iptables防火墙相关的配置</li></ul><p><a href="https://www.jianshu.com/p/2312dd32361a">https://www.jianshu.com/p/2312dd32361a</a></p><ul><li><input checked="" disabled="" type="checkbox"> 4、解决执行缺库问题的三种方法</li></ul><p>实测第二种方案成功率非常高，但是修改并不是永久有效的。</p><p><a href="https://www.cnblogs.com/the-tops/p/8810698.html">https://www.cnblogs.com/the-tops/p/8810698.html</a></p><h3 id="2021-01-27"><a href="#2021-01-27" class="headerlink" title="2021.01.27"></a>2021.01.27</h3><ul><li><input disabled="" type="checkbox"> 1、ip rule 命令</li></ul><p><a href="https://blog.csdn.net/mergerly/article/details/28918081">https://blog.csdn.net/mergerly/article/details/28918081</a></p><ul><li><input disabled="" type="checkbox"> 2、IOT-STM32逆向</li></ul><p><a href="https://www.anquanke.com/post/id/229321">https://www.anquanke.com/post/id/229321</a></p><p><a href="https://xuanxuanblingbling.github.io/iot/2020/07/08/stm32/">https://xuanxuanblingbling.github.io/iot/2020/07/08/stm32/</a></p><ul><li><input disabled="" type="checkbox"> 3、dm-verity保护（安全启动）</li></ul><p><a href="https://evilpan.com/2020/11/14/android-secure-boot/">https://evilpan.com/2020/11/14/android-secure-boot/</a></p><p><a href="https://www.xiezeyang.com/2019/10/20/Security/AndroidVerifiedBoot%E6%A6%82%E8%BF%B0/">https://www.xiezeyang.com/2019/10/20/Security/AndroidVerifiedBoot概述/</a></p><p><a href="https://blog.omitol.com/2017/09/30/Bypass-QCOM-Secure-Boot/">https://blog.omitol.com/2017/09/30/Bypass-QCOM-Secure-Boot/</a></p><ul><li><input disabled="" type="checkbox"> 4、内网穿透工具配置</li></ul><p><a href="https://github.com/creaktive/tsh">https://github.com/creaktive/tsh</a></p><p><a href="https://github.com/stilleshan/frpc">https://github.com/stilleshan/frpc</a></p><h3 id="2021-01-28"><a href="#2021-01-28" class="headerlink" title="2021.01.28"></a>2021.01.28</h3><ul><li><input disabled="" type="checkbox"> 1、android渗透测试中的https</li></ul><p><a href="https://xz.aliyun.com/t/8047">https://xz.aliyun.com/t/8047</a></p><ul><li><input disabled="" type="checkbox"> 2、BLE（低功率蓝牙）安全性能分析</li></ul><p><a href="https://xuanxuanblingbling.github.io/wireless/ble/2018/08/01/ble/">https://xuanxuanblingbling.github.io/wireless/ble/2018/08/01/ble/</a></p><p><a href="https://www.anquanke.com/post/id/168116">https://www.anquanke.com/post/id/168116</a></p><p><a href="http://jdhblog.com/2019/05/14/BLE%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/">http://jdhblog.com/2019/05/14/BLE安全机制从入门到放弃/</a></p><p><a href="https://www.anquanke.com/post/id/166746">https://www.anquanke.com/post/id/166746</a></p><p><a href="http://www.wireghost.cn/2016/07/25/%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99%EF%BC%88BLE%EF%BC%89%E5%AE%89%E5%85%A8%E5%88%9D%E6%8E%A2/">http://www.wireghost.cn/2016/07/25/低功耗蓝牙（BLE）安全初探/</a></p><ul><li><input disabled="" type="checkbox"> 3、解决UBubntu下无法使用adb的方法</li></ul><p><a href="https://blog.csdn.net/freezingxu/article/details/80893025">https://blog.csdn.net/freezingxu/article/details/80893025</a></p><h3 id="2021-01-29"><a href="#2021-01-29" class="headerlink" title="2021.01.29"></a>2021.01.29</h3><ul><li><input disabled="" type="checkbox"> 1、xposed下hook蓝牙函数抓蓝牙数据</li></ul><p><a href="https://blog.csdn.net/wangbf_java/article/details/85350130">https://blog.csdn.net/wangbf_java/article/details/85350130</a></p><ul><li><input disabled="" type="checkbox"> 2、frida操作手册</li></ul><p><a href="https://github.com/hookmaster/frida-all-in-one">https://github.com/hookmaster/frida-all-in-one</a></p><ul><li><input disabled="" type="checkbox"> 3、android HCI log详解</li></ul><p><a href="https://www.jianshu.com/p/73f7366161d1">https://www.jianshu.com/p/73f7366161d1</a></p><h3 id="2021-01-30"><a href="#2021-01-30" class="headerlink" title="2021.01.30"></a>2021.01.30</h3><ul><li><input disabled="" type="checkbox"> 1、OWASP安卓测试指南</li></ul><p><a href="https://bbs.pediy.com/thread-260849.htm">https://bbs.pediy.com/thread-260849.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、CVE-2020-12351：Linux蓝牙模块拒绝服务漏洞分析</li></ul><p><a href="https://bbs.pediy.com/thread-265744.htm">https://bbs.pediy.com/thread-265744.htm</a></p><ul><li><input disabled="" type="checkbox"> 3、蓝牙设备侦查方案</li></ul><p><a href="https://cloud.tencent.com/developer/article/1169531">https://cloud.tencent.com/developer/article/1169531</a></p><ul><li><input disabled="" type="checkbox"> 4、Ubertooth One 使用系列 (一) — 破解蓝牙锁</li></ul><p><a href="https://yaseng.org/ubertoothone-1.html">https://yaseng.org/ubertoothone-1.html</a></p><h3 id="2021-02-02"><a href="#2021-02-02" class="headerlink" title="2021.02.02"></a>2021.02.02</h3><ul><li><input disabled="" type="checkbox"> 1、BLE-mash技术</li></ul><p><a href="http://doc.iotxx.com/BLE-Mesh%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98">http://doc.iotxx.com/BLE-Mesh技术揭秘</a></p><ul><li><input disabled="" type="checkbox"> 2、低功耗蓝牙ATT/GATT/Profile/Service/Characteristic规格解读</li></ul><p><a href="https://www.cnblogs.com/iini/p/12334646.html">https://www.cnblogs.com/iini/p/12334646.html</a></p><ul><li><input disabled="" type="checkbox"> 3、蓝牙漏洞</li></ul><p><a href="https://github.com/engn33r/awesome-bluetooth-security#notable_vulnerabilities">https://github.com/engn33r/awesome-bluetooth-security#notable_vulnerabilities</a></p><ul><li><input disabled="" type="checkbox"> 4、BLE-Mesh技术揭秘</li></ul><p><a href="http://doc.iotxx.com/BLE-Mesh%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98">http://doc.iotxx.com/BLE-Mesh技术揭秘</a></p><h3 id="2021-02-03"><a href="#2021-02-03" class="headerlink" title="2021.02.03"></a>2021.02.03</h3><ul><li><input disabled="" type="checkbox"> 1、关于汽车的CAN总线相关的系列文章</li></ul><p><a href="https://www.zhihu.com/people/hu-zhen-69-33/posts?page=1">https://www.zhihu.com/people/hu-zhen-69-33/posts?page=1</a></p><ul><li><input disabled="" type="checkbox"> 2、CVE-2020-24581 D-Link DSL-2888A 远程命令执行漏洞分析</li></ul><p><a href="https://www.anquanke.com/post/id/229323">https://www.anquanke.com/post/id/229323</a></p><h3 id="2021-02-04"><a href="#2021-02-04" class="headerlink" title="2021.02.04"></a>2021.02.04</h3><ul><li><input disabled="" type="checkbox"> 1、物联网协议相关的文档</li></ul><p><a href="http://doc.iotxx.com/%E9%A6%96%E9%A1%B5">http://doc.iotxx.com/首页</a></p><ul><li><input disabled="" type="checkbox"> 2、Mips架构下漏洞分析入门</li></ul><p><a href="https://www.anquanke.com/post/id/230259">https://www.anquanke.com/post/id/230259</a></p><h3 id="2021-02-05"><a href="#2021-02-05" class="headerlink" title="2021.02.05"></a>2021.02.05</h3><ul><li><input disabled="" type="checkbox"> 1、android系统架构</li></ul><p><a href="https://nocbtm.github.io/2020/01/12/Android">https://nocbtm.github.io/2020/01/12/Android</a> kernel 入门/#Android-系统架构</p><ul><li><input disabled="" type="checkbox"> 2、android的Linux内核提取</li></ul><p><a href="https://geneblue.github.io/2016/07/12/android/sec--get-kernel-file-from-android-devices/">https://geneblue.github.io/2016/07/12/android/sec--get-kernel-file-from-android-devices/</a></p><p><a href="https://www.cnblogs.com/gm-201705/p/9863974.html">https://www.cnblogs.com/gm-201705/p/9863974.html</a></p><h3 id="2021-02-07"><a href="#2021-02-07" class="headerlink" title="2021.02.07"></a>2021.02.07</h3><ul><li><input disabled="" type="checkbox"> 1、逆向中的hash算法和对称加密</li></ul><p><a href="https://bbs.pediy.com/thread-265939.htm">https://bbs.pediy.com/thread-265939.htm</a></p><h3 id="2021-02-20"><a href="#2021-02-20" class="headerlink" title="2021.02.20"></a>2021.02.20</h3><ul><li><input disabled="" type="checkbox"> 1、利用angr符号执行去除虚假控制流</li></ul><p><a href="https://bbs.pediy.com/thread-266005.htm">https://bbs.pediy.com/thread-266005.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、基于LLVM Pass实现控制流平坦化</li></ul><p><a href="https://bbs.pediy.com/thread-266082.htm">https://bbs.pediy.com/thread-266082.htm</a></p><h3 id="2021-02-22"><a href="#2021-02-22" class="headerlink" title="2021.02.22"></a>2021.02.22</h3><ul><li><input disabled="" type="checkbox"> 1、NAS认证前RCE漏洞分析与利用（IOT）</li></ul><p><a href="https://xz.aliyun.com/t/9169">https://xz.aliyun.com/t/9169</a></p><ul><li><input disabled="" type="checkbox"> 2、xposed、root检测</li></ul><p><a href="https://bbs.pediy.com/thread-266108.htm">https://bbs.pediy.com/thread-266108.htm</a></p><h3 id="2021-02-24"><a href="#2021-02-24" class="headerlink" title="2021.02.24"></a>2021.02.24</h3><ul><li><input disabled="" type="checkbox"> 1、17种native反调试</li></ul><p><a href="https://bbs.pediy.com/thread-223460.htm">https://bbs.pediy.com/thread-223460.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、android NDk &amp; 小壳入门</li></ul><p><a href="https://bbs.pediy.com/thread-212071.htm">https://bbs.pediy.com/thread-212071.htm</a></p><ul><li><input disabled="" type="checkbox"> 3、逆向分析反调试+OLLVM混淆</li></ul><p><a href="https://bbs.pediy.com/thread-266144.htm">https://bbs.pediy.com/thread-266144.htm</a></p><ul><li><input disabled="" type="checkbox"> 4、angr入门到精通系列</li></ul><p><a href="https://www.anquanke.com/member/143126">https://www.anquanke.com/member/143126</a></p><ul><li><input disabled="" type="checkbox"> 5、GDB原理</li></ul><p><a href="https://bbs.pediy.com/thread-265599.htm">https://bbs.pediy.com/thread-265599.htm</a></p><ul><li><input disabled="" type="checkbox"> 6、IDA调试android so的10个技巧</li></ul><p><a href="https://bbs.pediy.com/thread-221876.htm">https://bbs.pediy.com/thread-221876.htm</a></p><h3 id="2021-02-25"><a href="#2021-02-25" class="headerlink" title="2021.02.25"></a>2021.02.25</h3><ul><li><input disabled="" type="checkbox"> 1、学习IDA 脚本使用和编写</li></ul><h3 id="2021-02-26"><a href="#2021-02-26" class="headerlink" title="2021.02.26"></a>2021.02.26</h3><ul><li><input disabled="" type="checkbox"> 1、芯片固件逆向系列</li></ul><p><a href="https://xz.aliyun.com/t/9185">https://xz.aliyun.com/t/9185</a></p><h3 id="2021-02-28"><a href="#2021-02-28" class="headerlink" title="2021.02.28"></a>2021.02.28</h3><ul><li><input disabled="" type="checkbox"> 1、数字猫小说阅读软件分析</li></ul><p><a href="https://bbs.pediy.com/thread-266195.htm">https://bbs.pediy.com/thread-266195.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、Android内核提权漏洞CVE-2019-2215 Binder UAF</li></ul><p><a href="https://bbs.pediy.com/thread-266198.htm">https://bbs.pediy.com/thread-266198.htm</a></p><h3 id="2021-03-01"><a href="#2021-03-01" class="headerlink" title="2021.03.01"></a>2021.03.01</h3><ul><li><input disabled="" type="checkbox"> 1、frida实战小蜜蜂加速器破解vip功能</li></ul><p><a href="https://bbs.pediy.com/thread-266185.htm">https://bbs.pediy.com/thread-266185.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、固件分析与比较开源项目</li></ul><p><a href="https://github.com/fkie-cad/FACT_core">https://github.com/fkie-cad/FACT_core</a></p><h3 id="2021-03-02"><a href="#2021-03-02" class="headerlink" title="2021.03.02"></a>2021.03.02</h3><ul><li><input disabled="" type="checkbox"> 1、一种通用超简单的Android Java Native方法Hook</li></ul><p><a href="https://bbs.pediy.com/thread-266238.htm">https://bbs.pediy.com/thread-266238.htm</a></p><ul><li><input disabled="" type="checkbox"> 2、梆梆加固简单分析</li></ul><p><a href="https://bbs.pediy.com/thread-266247.htm">https://bbs.pediy.com/thread-266247.htm</a></p><h3 id="2021-03-03"><a href="#2021-03-03" class="headerlink" title="2021.03,03"></a>2021.03,03</h3><ul><li><input disabled="" type="checkbox"> 1、bluetooth_stack开源蓝牙协议栈源码分析与漏洞挖掘</li></ul><p><a href="https://xz.aliyun.com/t/9205">https://xz.aliyun.com/t/9205</a></p><h3 id="2021-03-05"><a href="#2021-03-05" class="headerlink" title="2021.03.05"></a>2021.03.05</h3><ul><li><input disabled="" type="checkbox"> 1、Linux沙箱入门</li></ul><p><a href="https://www.anquanke.com/post/id/231078">https://www.anquanke.com/post/id/231078</a></p><ul><li><input disabled="" type="checkbox"> 2、IOT设备漏洞复现到固件后门植入</li></ul><p><a href="https://www.anquanke.com/post/id/232845">https://www.anquanke.com/post/id/232845</a></p><h3 id="2021-03-08"><a href="#2021-03-08" class="headerlink" title="2021.03.08"></a>2021.03.08</h3><ul><li><input disabled="" type="checkbox"> 1、酒仙app逆向分析</li></ul><p><a href="https://bbs.pediy.com/thread-266240.htm">https://bbs.pediy.com/thread-266240.htm</a></p><h3 id="2021-03-09"><a href="#2021-03-09" class="headerlink" title="2021.03.09"></a>2021.03.09</h3><p><a href="https://www.zsythink.net/archives/category/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/iptables/page/2">https://www.zsythink.net/archives/category/运维相关/iptables/page/2</a></p><h3 id="2021-03-10"><a href="#2021-03-10" class="headerlink" title="2021.03.10"></a>2021.03.10</h3><ul><li><input disabled="" type="checkbox"> 1、Teanda路由器CVE分析</li></ul><p><a href="https://www.anquanke.com/post/id/231445">https://www.anquanke.com/post/id/231445</a></p><ul><li><input disabled="" type="checkbox"> 2、思科RV110W CVE-2020-3331漏洞调试与iot靶场搭建</li></ul><p><a href="https://www.anquanke.com/post/id/233859">https://www.anquanke.com/post/id/233859</a></p><ul><li><input disabled="" type="checkbox"> 3、记一次unicorn半自动化逆向——还原某东sign算法</li></ul><p><a href="https://bbs.pediy.com/thread-266377.htm">https://bbs.pediy.com/thread-266377.htm</a></p><ul><li><input disabled="" type="checkbox"> 4、steam令牌算法分析</li></ul><p><a href="https://bbs.pediy.com/thread-266366.htm">https://bbs.pediy.com/thread-266366.htm</a></p><ul><li><input disabled="" type="checkbox"> 5、某电商App Sign签名算法解析 内部类的Hook</li></ul><p><a href="http://91fans.com.cn/post/dsbuysignone/">http://91fans.com.cn/post/dsbuysignone/</a></p><h3 id="2021-03-22"><a href="#2021-03-22" class="headerlink" title="2021.03.22"></a>2021.03.22</h3><ul><li><input disabled="" type="checkbox"> 1、Android加壳过程中mprotect调用失败的原因及解决方案</li></ul><p><a href="https://bbs.pediy.com/thread-266527.htm">https://bbs.pediy.com/thread-266527.htm</a></p><h3 id="2021-03-23"><a href="#2021-03-23" class="headerlink" title="2021.03.23"></a>2021.03.23</h3><ul><li><input disabled="" type="checkbox"> 1、Android内核提权漏洞CVE-2019-2215 Binder UAF</li></ul><p><a href="https://bbs.pediy.com/thread-266198.htm">https://bbs.pediy.com/thread-266198.htm</a></p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日checklist（3.27-4.19）</title>
    <link href="/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%883.27-4.19%EF%BC%89/"/>
    <url>/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%883.27-4.19%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>该文档主要是记录每一天在干什么，主要是想学什么内容，计划学习神恶魔内容，让每一天的学习更加有具体的产出。</p><p>1、记录当天学习的内容或者做过的事</p><p>2、记录看到的比较好的资源，以备后用</p><p>3、计划第二天需要看的内容</p><h2 id="2021-03-27"><a href="#2021-03-27" class="headerlink" title="2021.03.27"></a>2021.03.27</h2><p>自定义改ROM</p><p><a href="https://my.oschina.net/ibuwai/blog/719486">https://my.oschina.net/ibuwai/blog/719486</a></p><p>使用xposed开启调试功能</p><p><a href="https://security.tencent.com/index.php/opensource/detail/17">https://security.tencent.com/index.php/opensource/detail/17</a></p><p>android native hook 技术</p><p><a href="https://eternalsakura13.com/2018/02/04/hook1/#more">https://eternalsakura13.com/2018/02/04/hook1/#more</a></p><p>手把手教你构建C语言编译器</p><p><a href="https://lotabout.me/2015/write-a-C-interpreter-0/">https://lotabout.me/2015/write-a-C-interpreter-0/</a></p><h2 id="2021-03-28"><a href="#2021-03-28" class="headerlink" title="2021.03.28"></a>2021.03.28</h2><p>大致看了一下自己的学习计划，准备在底层知识上有更多的积累，准备考研那就好好沉淀一下技术。</p><p>1、看CTF wiki PWN部分</p><p><a href="https://ctf-wiki.org/pwn/readme/">https://ctf-wiki.org/pwn/readme/</a></p><p>浏览的时候发现一个比较nb的项目</p><p><a href="https://github.com/CreditTone/hooker">https://github.com/CreditTone/hooker</a></p><p>Android Frida hook，可以辅助逆向分析，抽个时间了解一下该项目的具体使用情况如何。</p><p>记得整理一个最近的计划表出来，兼顾技术和考研学习（比如最近想学习PWN、算法、数据结构、计算机系统、计算机网路、实战化分析二进制漏洞、Android漏洞挖掘、Android web层的漏洞挖掘、自动化逆向工具、unix网路编程等等技术）</p><h2 id="2021-03-29"><a href="#2021-03-29" class="headerlink" title="2021.03.29"></a>2021.03.29</h2><p>到达上海开始工作，今天主要在审计代码，寻找漏洞，同样的遇到一个比较棘手的问题，就是各种架构下的动态调试问题。</p><p>看到一个总结IDA使用的好文章</p><p><a href="https://xz.aliyun.com/t/4205#toc-0">https://xz.aliyun.com/t/4205#toc-0</a></p><p>可以参考一下</p><h4 id="晚上总结"><a href="#晚上总结" class="headerlink" title="晚上总结"></a>晚上总结</h4><p>金天太累了感觉没啥总结的。啊哈哈哈，呜呜呜，睡觉</p><h2 id="2021-03-30"><a href="#2021-03-30" class="headerlink" title="2021.03.30"></a>2021.03.30</h2><p>以前看到过一个联动调试的插件，最近又正好在学习这方面的，不放好好研究一下</p><p>联动调试插件文章</p><p><a href="https://bbs.pediy.com/thread-252634.htm">https://bbs.pediy.com/thread-252634.htm</a></p><p>早晨看到有个fart脱壳技术的文章，可以结合前面的几篇一起分析</p><p><a href="https://bbs.pediy.com/thread-266716.htm">https://bbs.pediy.com/thread-266716.htm</a></p><p>看看能不能改一个是和nexus6p的镜像</p><p>进程隐藏技术，主要是对抗文件遍历，进程遍历</p><p><a href="https://github.com/g0dA/linuxStack/blob/master/%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E7%9A%84%E6%94%BB%E4%B8%8E%E9%98%B2-%E6%94%BB%E7%AF%87.md">https://github.com/g0dA/linuxStack/blob/master/%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E7%9A%84%E6%94%BB%E4%B8%8E%E9%98%B2-%E6%94%BB%E7%AF%87.md</a></p><p>这篇文章总结的非常好。</p><p>今日发现：</p><p>1、frida hook的原理是什么？</p><p>frida hook的原理通常是采用动态二进制插桩技术</p><p><a href="https://www.jianshu.com/p/51e6aef175a2">https://www.jianshu.com/p/51e6aef175a2</a></p><p>frida源码分析</p><p><a href="https://mabin004.github.io/2018/07/31/Mac%E4%B8%8A%E7%BC%96%E8%AF%91Frida/">https://mabin004.github.io/2018/07/31/Mac%E4%B8%8A%E7%BC%96%E8%AF%91Frida/</a></p><p><a href="https://zhuanlan.zhihu.com/p/41662447">https://zhuanlan.zhihu.com/p/41662447</a></p><p>2、关于如何对抗抓包？代理检测？</p><p>这个的答案挺像之前看的一篇文章中提到的，<a href="https://bbs.pediy.com/thread-260658.htm#msg_header_h1_3%EF%BC%8C%E4%BD%86%E6%98%AF%E8%BF%98%E6%9C%89%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%98%AF%E4%BB%8E%E5%BC%80%E5%8F%91%E7%9A%84%E8%A7%92%E5%BA%A6%E6%9D%A5%E8%BF%9B%E8%A1%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86">https://bbs.pediy.com/thread-260658.htm#msg_header_h1_3，但是还有一篇博客是从开发的角度来进行，但是找不到了</a></p><p>3、目前自己对防止抓https流量的方法</p><p>这个是攻与防</p><p><a href="https://xz.aliyun.com/t/8047">https://xz.aliyun.com/t/8047</a></p><p>感觉可以结合SSL pinning技术好好探讨研究一番</p><p>4、APK的签名机制是什么，apk文件下的三个与签名有关的文件的作用</p><p>5、arm64与arm32汇编</p><h4 id="晚上总结-1"><a href="#晚上总结-1" class="headerlink" title="晚上总结"></a>晚上总结</h4><p>今天面试了阿里，越发觉得自己的底层知识不太熟悉，比如ARM汇编和汇编指令，看来得继续加强底层知识的积累和学习。</p><p>今天看了昨天收藏的那篇IDA指南，感觉确实不错</p><p>晚上研究了一下面试过程中没有回答出来的问题</p><p>发现一个小tips：学习应该注重原理而不是处于应用中</p><p>加油，奥利给，学习不断进步。</p><h2 id="2021-03-31"><a href="#2021-03-31" class="headerlink" title="2021.03.31"></a>2021.03.31</h2><p>刚好发现一个ARM汇编的好博主写的文章</p><p>该博主下的文章找个时间都可以好好读一下，东南大学，应该是研究生吧</p><p><a href="https://zhuanlan.zhihu.com/p/82490125">https://zhuanlan.zhihu.com/p/82490125</a></p><p>这才是大佬，底层知识扎实</p><p>博客地址：<a href="https://www.zhihu.com/people/lan-xin-yu/posts?page=1">https://www.zhihu.com/people/lan-xin-yu/posts?page=1</a></p><p>今天在看IOS逆向相关的，看到如下优秀的文章：</p><p><a href="https://fuping.site/2020/12/16/IOS-APP-tomatodo-Cracked/">https://fuping.site/2020/12/16/IOS-APP-tomatodo-Cracked/</a></p><h2 id="2021-04-02"><a href="#2021-04-02" class="headerlink" title="2021.04.02"></a>2021.04.02</h2><p>看到两篇很不错的固件分析例子，有时间可以复现一下：</p><p>1、路由器固件分析、<a href="http://www.anquanke.com/post/id/236133">http://www.anquanke.com/post/id/236133</a></p><p>2、嵌入式设备的固件分析</p><p><a href="https://bbs.pediy.com/thread-266803.htm">https://bbs.pediy.com/thread-266803.htm</a></p><h2 id="2021-04-03"><a href="#2021-04-03" class="headerlink" title="2021.04.03"></a>2021.04.03</h2><p>看到一个fastbin attach的例题</p><p><a href="https://bbs.pediy.com/thread-266822.htm">https://bbs.pediy.com/thread-266822.htm</a></p><h2 id="2021-04-06"><a href="#2021-04-06" class="headerlink" title="2021.04.06"></a>2021.04.06</h2><p>这几天都在忙着总结实习期间学习的内容，总结成自己的知识和文章，后面也需要把前面收集的文章总结一下，持续技术输出。</p><p>最近在总结抓包相关的知识点</p><p>发现一篇不错的文章</p><p>1、<a href="https://zhuanlan.zhihu.com/p/22816331">https://zhuanlan.zhihu.com/p/22816331</a></p><p>今天继续总结</p><p>看到一篇绕过ssl pinning的4中锁定</p><p><strong>绕过 Android SSL 验证和证书锁定的四种方法</strong></p><p><a href="https://www.wangan.com/articles/149">https://www.wangan.com/articles/149</a></p><p>值得收藏学习一下</p><h2 id="2021-04-07"><a href="#2021-04-07" class="headerlink" title="2021.04.07"></a>2021.04.07</h2><p>昨天把抓包的把多种绕过总结了一下，看看今天研究点啥</p><p>上次看到一个脱壳的文章，总结的挺好的，可以考虑研究一下</p><p><a href="https://mp.weixin.qq.com/s/MIj735X2ZXHLqtpcE8MKow">https://mp.weixin.qq.com/s/MIj735X2ZXHLqtpcE8MKow</a></p><p>发现目前可能一二三代壳都是有办法基于自动化工具进行脱壳处理，但是壳的难度是逐步的在增加，可能需要定制化ROM来脱壳。</p><p><a href="https://mp.weixin.qq.com/s/n1ZLV_SQV-mI2Rtatyz2ow">https://mp.weixin.qq.com/s/n1ZLV_SQV-mI2Rtatyz2ow</a></p><p>看到了一个IOS过反调试的文章可以学学</p><p><a href="https://bbs.pediy.com/thread-266860.htm">https://bbs.pediy.com/thread-266860.htm</a></p><p>frida使用的经验贴，在这里面开源的frida脚本还是很不错的</p><p><a href="https://bbs.pediy.com/thread-265160.htm">https://bbs.pediy.com/thread-265160.htm</a></p><h2 id="2021-04-08"><a href="#2021-04-08" class="headerlink" title="2021.04.08"></a>2021.04.08</h2><p>今天还是接着昨天的开源项目的分析工作，最近也没什么事，就是自己总结学习吧。</p><p>早上起来看到一篇glibc的文章，总结的挺好的，收藏一下，后面还可以学习使用</p><p><a href="http://www.anquanke.com/post/id/236078">http://www.anquanke.com/post/id/236078</a></p><p>看到一个frida hook 操作手册</p><p><a href="https://www.996station.com/1030">https://www.996station.com/1030</a></p><p>x64dbg食用指南，感觉写的挺不错的</p><p><a href="https://bbs.pediy.com/thread-266488.htm">https://bbs.pediy.com/thread-266488.htm</a></p><p>刚好现在在总结一代壳的脱壳，这里就来了一篇一代壳实现方法</p><p><a href="https://bbs.pediy.com/thread-263641.htm">https://bbs.pediy.com/thread-263641.htm</a></p><p><a href="https://bbs.pediy.com/thread-263290.htm">https://bbs.pediy.com/thread-263290.htm</a></p><p>第三代fart脱壳</p><p><a href="https://bbs.pediy.com/thread-260052.htm">https://bbs.pediy.com/thread-260052.htm</a></p><p>如何写一个android inline hook</p><p><a href="https://bbs.pediy.com/thread-257020.htm">https://bbs.pediy.com/thread-257020.htm</a></p><h2 id="2021-04-10"><a href="#2021-04-10" class="headerlink" title="2021.04.10"></a>2021.04.10</h2><p>今天周末，继续研究开源项目</p><p>在研究过程中看到一篇比较不错的文章，可以研究一下：</p><p>1、使用Frida给apk脱壳并穿透加固Hook函数</p><p><a href="https://xz.aliyun.com/t/7670#toc-2">https://xz.aliyun.com/t/7670#toc-2</a></p><h2 id="2021-04-11"><a href="#2021-04-11" class="headerlink" title="2021.04.11"></a>2021.04.11</h2><p>今天在看到两个干调试的demo，值得研究一下</p><p><a href="https://github.com/vvb2060">https://github.com/vvb2060</a></p><p>这个人的github上面有很多优质的研究，值得学习研究一番</p><p>有个检测root的工具可以研究一下</p><p><a href="https://www.coolapk.com/apk/io.github.vvb2060.mahoshojo">https://www.coolapk.com/apk/io.github.vvb2060.mahoshojo</a></p><h2 id="2021-04-12"><a href="#2021-04-12" class="headerlink" title="2021.04.12"></a>2021.04.12</h2><p>又开始上班啦，每日上网冲浪寻找值得学习的文章，又看到好东西了。</p><p>1、分析乐固的文章</p><p><a href="https://bbs.pediy.com/thread-266972.htm">https://bbs.pediy.com/thread-266972.htm</a></p><p>这个使用frida爆破答案的方法还是值得学习一下的</p><p><a href="https://bbs.pediy.com/thread-266950.htm">https://bbs.pediy.com/thread-266950.htm</a></p><p>看完了r0ysue的frida 的API文章，写的确实不错，值得学习。</p><p><a href="https://www.anquanke.com/post/id/195215#h3-4">https://www.anquanke.com/post/id/195215#h3-4</a></p><p>还有第二篇，爽歪歪</p><p><a href="https://www.anquanke.com/post/id/195869">https://www.anquanke.com/post/id/195869</a></p><h2 id="2021-04-14"><a href="#2021-04-14" class="headerlink" title="2021.04.14"></a>2021.04.14</h2><p>去除OLLVM分析，好文章</p><p><a href="https://bbs.pediy.com/thread-267018.htm">https://bbs.pediy.com/thread-267018.htm</a></p><h2 id="2021-04-15"><a href="#2021-04-15" class="headerlink" title="2021.04.15"></a>2021.04.15</h2><p>今日在分析httpcanary抓包工具的原理，主要是想实现二进制文件的http的抓包，发现这个强大的工具还是挺不错的，基本上是才用中间人+VPN的抓包方式。下面是看到的两篇好文章。</p><p><a href="https://juejin.cn/post/6844903831579394055">https://juejin.cn/post/6844903831579394055</a></p><p><a href="https://www.mdeditor.tw/pl/2CHS">https://www.mdeditor.tw/pl/2CHS</a></p><h2 id="2021-04-19"><a href="#2021-04-19" class="headerlink" title="2021.04.19"></a>2021.04.19</h2><p>终于决定辞职回学习沉浸式的自我学习，今后的计划是开始准备考研，最后还是决定去试一下，但是并不把考研作为最后的筹码，积极面试阿里，暑假后打算边工作边复习考研，如果考上研究生就读，没考上就继续工作。加油!!!!!</p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日checklist（4.23-6.04）</title>
    <link href="/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%884.23-6.04%EF%BC%89/"/>
    <url>/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%884.23-6.04%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="2021-04-23"><a href="#2021-04-23" class="headerlink" title="2021.04.23"></a>2021.04.23</h3><p>昨天了解到了fuzz技术，回来不就是为了学习挖洞，所以还是要开始整起来，看了泉哥的博客，发现了一些值得关注的学习点。</p><p>1、</p><p>fuzz实战之libfuzzer</p><p><a href="https://www.secpulse.com/archives/71898.html">https://www.secpulse.com/archives/71898.html</a></p><p>这个是一个开源的fuzzer工具，并且也是附带了实际的例子存在，所以是一个了解入门fuzz技术的好路子。</p><p>2、frida在fazz中的使用</p><p><a href="http://riusksk.me/2019/11/30/Frida%E6%A1%86%E6%9E%B6%E5%9C%A8Fuzzing%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/">http://riusksk.me/2019/11/30/Frida%E6%A1%86%E6%9E%B6%E5%9C%A8Fuzzing%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</a></p><p>最近也是在研究和使用frida，并且内心也是有这个想法利用frida干点实际性的项目，这个fuzz框架就给我提供了一点很好学习思路。</p><p>3、android半自动化漏洞挖掘的项目的开发思想</p><p><a href="http://riusksk.me/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/">http://riusksk.me/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</a></p><p>4、pwn堆溢出技巧，带沙箱的题目</p><p><a href="http://www.anquanke.com/post/id/236832">http://www.anquanke.com/post/id/236832</a></p><h3 id="2021-04-25"><a href="#2021-04-25" class="headerlink" title="2021.04.25"></a>2021.04.25</h3><p>ARP欺骗，记录一下，突然想起阿里面试的ARP欺骗</p><p><a href="https://zhuanlan.zhihu.com/p/28771785">https://zhuanlan.zhihu.com/p/28771785</a></p><p><a href="https://zhuanlan.zhihu.com/p/28818627">https://zhuanlan.zhihu.com/p/28818627</a></p><p><a href="https://zhuanlan.zhihu.com/p/28865553">https://zhuanlan.zhihu.com/p/28865553</a></p><h3 id="2021-04-26"><a href="#2021-04-26" class="headerlink" title="2021.04.26"></a>2021.04.26</h3><p>看到一个参加看雪2w班的师傅的github，挺有意思的。</p><p><a href="https://github.com/Simp1er/AndroidSec">https://github.com/Simp1er/AndroidSec</a></p><h3 id="2021-04-27"><a href="#2021-04-27" class="headerlink" title="2021.04.27"></a>2021.04.27</h3><p>看angr的api使用，发现了一些比较不错的点可以用来学习。</p><p>比如从CTF出发的angr-ctf框架</p><p>下面是相关的文章和实际例子</p><p><a href="https://bbs.pediy.com/thread-267227.htm">https://bbs.pediy.com/thread-267227.htm</a></p><p><a href="https://github.com/jakespringer/angr_ctf">https://github.com/jakespringer/angr_ctf</a></p><p>这个是一个练习使用angr的好例子</p><p>除此之外，还有官方的API文档还有使用例子的文档</p><p><a href="https://docs.angr.io/core-concepts/toplevel">https://docs.angr.io/core-concepts/toplevel</a></p><p>在上面的链接上面是存在一个examples，里面记录的就是CTF的题目和脚本。</p><p><a href="https://angr.io/api-doc/angr.html">https://angr.io/api-doc/angr.html</a></p><p>都是值得学习的例子</p><p>先知社区中的这个博主对angr有比较系统的使用文章</p><p><a href="https://xz.aliyun.com/u/11261">https://xz.aliyun.com/u/11261</a></p><p>玩转符号执行，该文章是基于编译原理之上动态符号执行</p><p><a href="https://bbs.pediy.com/thread-226589.htm">https://bbs.pediy.com/thread-226589.htm</a></p><p>实战的CTF例子</p><p><a href="https://bbs.pediy.com/thread-259882.htm">https://bbs.pediy.com/thread-259882.htm</a></p><p>以前都收集了一个系列文章，再次放到这里来集中点：</p><p><a href="http://www.anquanke.com/member/143126">http://www.anquanke.com/member/143126</a></p><p>可以尝试跟着这个系列进行学习</p><h3 id="2021-05-07"><a href="#2021-05-07" class="headerlink" title="2021.05.07"></a>2021.05.07</h3><p>昨天在学习hook  java层的内容时候，使用到了z3解约器，这个工具的使用还是挺有必要的。</p><p><a href="https://z3prover.github.io/api/html/namespacez3py.html">https://z3prover.github.io/api/html/namespacez3py.html</a></p><p>这是官方文档。</p><h3 id="2021-05-08"><a href="#2021-05-08" class="headerlink" title="2021.05.08"></a>2021.05.08</h3><p>看到一个VMP的解析，从实现到逆向分析，不过是win下的，并不是android端的。</p><p><a href="https://bbs.pediy.com/thread-267369.htm">https://bbs.pediy.com/thread-267369.htm</a></p><p>使用xposed框架实现的android inline hook的开源项目以及对这个项目的分析</p><p><a href="https://github.com/ele7enxxh/Android-Inline-Hook">https://github.com/ele7enxxh/Android-Inline-Hook</a></p><p><a href="https://www.jianshu.com/p/730c86ca8ff7">https://www.jianshu.com/p/730c86ca8ff7</a></p><p><a href="https://www.jianshu.com/p/2684e251124d">https://www.jianshu.com/p/2684e251124d</a></p><p>正好最近在研究frida与ollvm相关的知识点，使用到了frida版本的inline hook，可以对比学习一下如何写inline hook</p><h3 id="2021-05-09"><a href="#2021-05-09" class="headerlink" title="2021.05.09"></a>2021.05.09</h3><p>看到一个师傅才发的队脱壳的理解的文章</p><p><a href="https://mp.weixin.qq.com/s/FSRIEr9pgyXSImjfUD3t_Q">https://mp.weixin.qq.com/s/FSRIEr9pgyXSImjfUD3t_Q</a></p><h3 id="2021-05-13"><a href="#2021-05-13" class="headerlink" title="2021.05.13"></a>2021.05.13</h3><p>看到一个对JNI常用的一下函数的解析</p><p><a href="https://www.jianshu.com/p/a3973c4035a9">https://www.jianshu.com/p/a3973c4035a9</a></p><h3 id="2021-05-17"><a href="#2021-05-17" class="headerlink" title="2021.05.17"></a>2021.05.17</h3><p>看课程的过程中看到一个非常不错的博客，是腾讯高级开发工程师的博客，腾讯的APP检测系统开发者</p><p><a href="https://shuwoom.com/?cat=4">https://shuwoom.com/?cat=4</a></p><p>他写的关于app安全的文章还是值得一读的。</p><h3 id="2021-05-18"><a href="#2021-05-18" class="headerlink" title="2021.05.18"></a>2021.05.18</h3><p>这个关于反调试的文章以前也看到过，但是并未复现和深入研究，所以在这里记录一下，可以结合着看雪ID我爱吃菠菜的文章一起来深入研究。</p><p><a href="https://gtoad.github.io/2017/06/25/Android-Anti-Debug/">https://gtoad.github.io/2017/06/25/Android-Anti-Debug/</a></p><p>还存在项目的demo，可以来练手</p><h3 id="2021-05-19"><a href="#2021-05-19" class="headerlink" title="2021.05.19"></a>2021.05.19</h3><p>今天在看unidbg相关的知识，对r0env进行了个性化的改造，算是环境有一个比较不错的工具合集。</p><p>刚好看到一篇关于unidbg工具的使用</p><p><a href="https://www.52pojie.cn/thread-1367840-1-1.html">https://www.52pojie.cn/thread-1367840-1-1.html</a></p><p>是一个不错的文章，同时这个工具也是不错的工具。</p><p>同样看到一个使用该工具对抗ollvm的帖子</p><p><a href="https://bbs.pediy.com/thread-267687.htm">https://bbs.pediy.com/thread-267687.htm</a></p><h3 id="2021-05-20"><a href="#2021-05-20" class="headerlink" title="2021.05.20"></a>2021.05.20</h3><p> 今天是520，不过学习还是要继续前进，看到一个关于浏览器v8的分析文章，写得挺好的，虽然浏览器漏洞挖掘现在已经很难挖了，不过还是可以研究一下。</p><p><a href="http://www.anquanke.com/post/id/237501">http://www.anquanke.com/post/id/237501</a></p><h3 id="2021-05-21"><a href="#2021-05-21" class="headerlink" title="2021.05.21"></a>2021.05.21</h3><p>今天在看一个关于给apk加SDK的项目，收集到以下的内容，感觉还是挺好用，相当于恢复源码，在这里我记录一下：</p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1293297">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1293297</a></p><p><a href="https://bbs.pediy.com/thread-262722.htm">https://bbs.pediy.com/thread-262722.htm</a></p><p><a href="https://github.com/Efaker/FakerAndroid">https://github.com/Efaker/FakerAndroid</a></p><p>逆向工具-AndroidNativeEmu的使用</p><p><a href="https://mp.weixin.qq.com/s/KwVXiKuPwT8RkXvslETgSw">https://mp.weixin.qq.com/s/KwVXiKuPwT8RkXvslETgSw</a></p><p>还不错</p><h3 id="2021-05-22"><a href="#2021-05-22" class="headerlink" title="2021.05.22"></a>2021.05.22</h3><p>seeflower的github上的内容，是跟着肉丝学的,可以参考一下</p><p><a href="https://github.com/SeeFlowerX/AndroidReverse_Note">https://github.com/SeeFlowerX/AndroidReverse_Note</a></p><h3 id="2021-05-24"><a href="#2021-05-24" class="headerlink" title="2021.05.24"></a>2021.05.24</h3><p>这两天在研究android网络库相关的知识，主要是还是Okhttp和HttpURLconnection两个在android端的使用。主要的目标就是能够写出通杀的脚本，（重复找轮子）</p><p>okhttp3混淆：<a href="https://github.com/siyujie/OkHttpLogger-Frida">https://github.com/siyujie/OkHttpLogger-Frida</a></p><p>学习okhttp3抓包相关的知识点还是要看r0ysue写的3篇文章，还是很经典的。</p><h3 id="2021-05-25"><a href="#2021-05-25" class="headerlink" title="2021.05.25"></a>2021.05.25</h3><p>今天继续在追网络协议这块的抓包和自吐相关的工作。发现一个小技巧就是在使用objection的时候，并不能hook住构造函数。实际上我们是可以自己修改源码的。具体修改方法如下：</p><p>修改~/.pyenv/versions/3.8.0/lib/python3.8/site-packages/objection/agent.js的第9211行（objection版本1.8.4），加上.concat([“$init”])之后，可以hook构造函数。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12733198/1621938347614-d479110c-e7a7-4c74-b42e-ee50c459c159.png" alt="img"></p><p>当然针对1.9.6的是修改</p><p>objection 1.9.6是在同样的文件agent.js中的第20238行</p><p>今天在研究网络这块遗留并没有看完的部分，在这里记录一下</p><p>1、android Socket</p><p><a href="https://juejin.cn/post/6844903567799631879">https://juejin.cn/post/6844903567799631879</a></p><p>2、android retrofit</p><p><a href="https://blog.csdn.net/jdsjlzx/article/details/52015347">https://blog.csdn.net/jdsjlzx/article/details/52015347</a></p><h3 id="2021-05-26"><a href="#2021-05-26" class="headerlink" title="2021.05.26"></a>2021.05.26</h3><p>腾讯发了一个面向开发人员的安全编程的文档，值的收藏一下</p><p><a href="https://github.com/Tencent/secguide">https://github.com/Tencent/secguide</a></p><p>基于多维度特征的Android恶意软件检测方法</p><p><a href="https://mp.weixin.qq.com/s/LwcWN3YBNqHMLcHCotTDeg">https://mp.weixin.qq.com/s/LwcWN3YBNqHMLcHCotTDeg</a></p><p>fuzz linux kernel</p><p><a href="https://docs.google.com/presentation/d/19JaXHFMT-R2le6x-vPKw5D1Cxlw2aLtxHEIDwWBNXCQ/edit#slide=id.gda44520c30_7_54">https://docs.google.com/presentation/d/19JaXHFMT-R2le6x-vPKw5D1Cxlw2aLtxHEIDwWBNXCQ/edit#slide=id.gda44520c30_7_54</a></p><h3 id="2021-06-04"><a href="#2021-06-04" class="headerlink" title="2021.06.04"></a>2021.06.04</h3><p>利用逆向分析框架 Angr 分析一个代码混淆的样本</p><p><a href="https://napongizero.github.io/blog/Defeating-Code-Obfuscation-with-Angr">https://napongizero.github.io/blog/Defeating-Code-Obfuscation-with-Angr</a></p><p>看到两个github关于机器学习的</p><p><a href="https://github.com/TheisTrue/MLofAndrew-Ng">https://github.com/TheisTrue/MLofAndrew-Ng</a></p><p><a href="https://github.com/Ayatans/Machine-Learning-homework">https://github.com/Ayatans/Machine-Learning-homework</a></p><p>先收集着，万一呢</p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日checklist（6.05-7.30）</title>
    <link href="/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%886.05-7.30%EF%BC%89/"/>
    <url>/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%886.05-7.30%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="2021-06-05"><a href="#2021-06-05" class="headerlink" title="2021.06.05"></a>2021.06.05</h3><p>1、android NDK AES算法实现</p><p><a href="https://www.jianshu.com/p/0390f598c34c">https://www.jianshu.com/p/0390f598c34c</a></p><p><a href="https://github.com/luck-apple/aesTool">https://github.com/luck-apple/aesTool</a></p><p>2、binutils中关于binary的工具</p><p><a href="https://www.gnu.org/software/binutils/">https://www.gnu.org/software/binutils/</a></p><p>实习过程中研究过一点mqtt相关的安全研究</p><p>3、mqtt安全初探</p><p><a href="https://www.secpulse.com/archives/160231.html">https://www.secpulse.com/archives/160231.html</a></p><p>4、抓包笔记，看雪2w班笔记</p><p><a href="https://bbs.pediy.com/thread-267940.htm">https://bbs.pediy.com/thread-267940.htm</a></p><p>5、翻到一个搞二进制研究的大佬的论文博客，可以搜刮一下</p><p><a href="https://www.yuque.com/vx63q1/fn5b3o">https://www.yuque.com/vx63q1/fn5b3o</a></p><p>现在基本很难逆向的框架flutter，略微尝试了一下，确实挺难得，主要是现在搞的人少</p><p><a href="https://flutterchina.club/get-started/codelab/#%E7%AC%AC1%E6%AD%A5-%E5%88%9B%E5%BB%BA-flutter-app">https://flutterchina.club/get-started/codelab/#%E7%AC%AC1%E6%AD%A5-%E5%88%9B%E5%BB%BA-flutter-app</a></p><p><a href="https://blog.tst.sh/reverse-engineering-flutter-apps-part-1/">https://blog.tst.sh/reverse-engineering-flutter-apps-part-1/</a></p><p><a href="https://blog.tst.sh/reverse-engineering-flutter-apps-part-2/">https://blog.tst.sh/reverse-engineering-flutter-apps-part-2/</a></p><p><a href="https://tech.meituan.com/2020/09/18/flutter-in-meituan.html">https://tech.meituan.com/2020/09/18/flutter-in-meituan.html</a></p><p><a href="https://blog.csdn.net/yhsnihao/article/details/110477720">https://blog.csdn.net/yhsnihao/article/details/110477720</a></p><p><a href="https://bbs.pediy.com/thread-261941.htm">https://bbs.pediy.com/thread-261941.htm</a></p><p><a href="https://blog.nviso.eu/2019/08/13/intercepting-traffic-from-android-flutter-applications/">https://blog.nviso.eu/2019/08/13/intercepting-traffic-from-android-flutter-applications/</a></p><p><a href="https://rloura.wordpress.com/2020/12/04/reversing-flutter-for-android-wip/">https://rloura.wordpress.com/2020/12/04/reversing-flutter-for-android-wip/</a></p><h3 id="2021-06-06"><a href="#2021-06-06" class="headerlink" title="2021.06.06"></a>2021.06.06</h3><p>今天记录一下最近在做的几个专题，好提醒一下自己</p><h4 id="1、Socket抓包通杀专题"><a href="#1、Socket抓包通杀专题" class="headerlink" title="1、Socket抓包通杀专题"></a>1、Socket抓包通杀专题</h4><p>主要是分析android下如何实现通杀，学习网络协议的分析和溯源</p><p>目前完成度：80%</p><h4 id="2、github上优秀的frida工具分析"><a href="#2、github上优秀的frida工具分析" class="headerlink" title="2、github上优秀的frida工具分析"></a>2、github上优秀的frida工具分析</h4><p>主要的目的是学习frida更多的高级技巧同时也是学习优秀工具的开发原理</p><p>目前完成度：10%</p><h4 id="3、模拟执行so，最高目标对抗混淆"><a href="#3、模拟执行so，最高目标对抗混淆" class="headerlink" title="3、模拟执行so，最高目标对抗混淆"></a>3、模拟执行so，最高目标对抗混淆</h4><p>主要是学习各种模拟执行框架，在不依靠真机的情况下，模拟出so中的函数，达到溯源的目的。同时也是为分析类似于ollvm这类强混淆做准备。</p><p>①、ExAndroidNativeEmu</p><p>②、unicorn</p><p>③、unidbg</p><p>目前完成度：5%</p><h4 id="4、新提上一个专题：各种汇编反汇编器的使用研究"><a href="#4、新提上一个专题：各种汇编反汇编器的使用研究" class="headerlink" title="4、新提上一个专题：各种汇编反汇编器的使用研究"></a>4、新提上一个专题：各种汇编反汇编器的使用研究</h4><p>主要是针对现在市场上出来挺多的汇编与反汇编器的产品，有开源免费使用的，有商用的，主要的目的是研究各个软件的优势，同时也是可以起到研究反编译原理。</p><p>目前完成度：1%（目前仅仅收集了一些工具而已）</p><h3 id="2021-06-07"><a href="#2021-06-07" class="headerlink" title="2021.06.07"></a>2021.06.07</h3><p>1、Linux下的fork与pthread的区别（多进程 与多线程的区别）</p><p><a href="http://notes.maxwi.com/2016/08/17/linux-fork/">http://notes.maxwi.com/2016/08/17/linux-fork/</a></p><p>2、珍惜大佬的逆向辅助工具，可以学习一下</p><p><a href="https://github.com/w296488320/XposedOkHttpCat">https://github.com/w296488320/XposedOkHttpCat</a></p><p>3、基于xposed的动态分析工具，可惜xposed不能hook native层</p><p><a href="https://github.com/ac-pm/Inspeckage">https://github.com/ac-pm/Inspeckage</a></p><h3 id="2021-06-08"><a href="#2021-06-08" class="headerlink" title="2021.06.08"></a>2021.06.08</h3><p>1、pwntools的使用教程</p><p><a href="https://docs.pwntools.com/en/stable/intro.html">https://docs.pwntools.com/en/stable/intro.html</a></p><p>2、大佬又开源一个脱壳机</p><p><a href="https://github.com/CodingGay/BlackDex">https://github.com/CodingGay/BlackDex</a></p><p>3、netgear固件格式分析及后门植入重打包</p><p><a href="https://www.secpulse.com/archives/160480.html">https://www.secpulse.com/archives/160480.html</a></p><p>4、/proc在CTF中的应用，虽然和web相关但是文中举例子还是很不错的，二进制选手也可以看懂</p><p><a href="https://www.anquanke.com/post/id/241148">https://www.anquanke.com/post/id/241148</a></p><h3 id="2021-06-09"><a href="#2021-06-09" class="headerlink" title="2021.06.09"></a>2021.06.09</h3><p>1、Pwn学习笔记</p><p><a href="https://bbs.pediy.com/thread-266142.htm">https://bbs.pediy.com/thread-266142.htm</a></p><p>2、通过GDB调试学习堆</p><p><a href="https://bbs.pediy.com/thread-266934.htm">https://bbs.pediy.com/thread-266934.htm</a></p><p>3、Android uaf 提权</p><p><a href="https://bbs.pediy.com/forum-150-1-154.htm">https://bbs.pediy.com/forum-150-1-154.htm</a></p><p>4、二进制漏洞技能图谱</p><p><a href="https://bbs.pediy.com/forum-150-1-160.htm">https://bbs.pediy.com/forum-150-1-160.htm</a></p><h3 id="2021-06-10"><a href="#2021-06-10" class="headerlink" title="2021.06.10"></a>2021.06.10</h3><p>1、Linux内核docker逃逸</p><p><a href="https://paper.seebug.org/1602/">https://paper.seebug.org/1602/</a></p><p>2、不同版本的libc的UAF的利用</p><p><a href="https://www.anquanke.com/post/id/241316#h2-0">https://www.anquanke.com/post/id/241316#h2-0</a></p><h3 id="2021-06-15"><a href="#2021-06-15" class="headerlink" title="2021.06.15"></a>2021.06.15</h3><p>1、关于android 的inline hook相关的文章，并且存在练习的demo</p><p><a href="https://bbs.pediy.com/thread-268086.htm">https://bbs.pediy.com/thread-268086.htm</a></p><h3 id="2021-06-21"><a href="#2021-06-21" class="headerlink" title="2021.06.21"></a>2021.06.21</h3><p>今天继续研究loadLibrary函数的加载流程，也就是so加载流程的分析</p><p><a href="http://gityuan.com/2017/03/26/load_library/">http://gityuan.com/2017/03/26/load_library/</a></p><p>[<a href="https://wooyun.js.org/drops/Android%20Linker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html]">https://wooyun.js.org/drops/Android%20Linker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html]</a>(<a href="https://wooyun.js.org/drops/Android">https://wooyun.js.org/drops/Android</a> Linker学习笔记.html)</p><p><a href="https://bbs.pediy.com/thread-255674.htm">https://bbs.pediy.com/thread-255674.htm</a></p><p><a href="https://blog.csdn.net/fireroll/article/details/50102009">https://blog.csdn.net/fireroll/article/details/50102009</a></p><p><a href="https://my.oschina.net/kings0527/blog/522553">https://my.oschina.net/kings0527/blog/522553</a></p><p>现在技术混淆</p><p>混淆：资源混淆、代码混淆（Java混淆、Native混淆）、反反编译器（花指令、重打包对抗）、反调试（17种反调试收集、签名校验、模拟器检测、hook检测、root检测）、加固（业务场景加固、Java源码加固（华为方舟Java2C）、Dex加固（整体型、抽取型、Smali2C、VMP），so加固（节加密、函数加密、动态注册、hook重定向、自定义linker））</p><p><a href="https://zhuanlan.zhihu.com/p/119150300">https://zhuanlan.zhihu.com/p/119150300</a></p><p><a href="https://www.twblogs.net/a/5bb03e142b7177781a0fe408?lang=zh-cn">https://www.twblogs.net/a/5bb03e142b7177781a0fe408?lang=zh-cn</a></p><p><a href="https://zhuanlan.zhihu.com/p/22652847">https://zhuanlan.zhihu.com/p/22652847</a></p><p><a href="https://zhuanlan.zhihu.com/p/30851148">https://zhuanlan.zhihu.com/p/30851148</a></p><p><a href="https://www.52pojie.cn/thread-767989-1-1.html">https://www.52pojie.cn/thread-767989-1-1.html</a></p><h3 id="2021-06-23"><a href="#2021-06-23" class="headerlink" title="2021.06.23"></a>2021.06.23</h3><p>android8 下动态调试so</p><p><a href="https://www.jianshu.com/p/4be6d14946bd">https://www.jianshu.com/p/4be6d14946bd</a></p><h3 id="2021-06-24"><a href="#2021-06-24" class="headerlink" title="2021.06.24"></a>2021.06.24</h3><p>android源码分析——APP的安装流程</p><p><a href="https://juejin.cn/post/6844904078015725576">https://juejin.cn/post/6844904078015725576</a></p><p>关于自定义linker相关的知识点和参考性文章</p><p>1、通过捕获段错误实现的自定义linker</p><p><a href="https://bbs.pediy.com/thread-255711.htm">https://bbs.pediy.com/thread-255711.htm</a></p><p>2、vmp壳原理分析笔记</p><p><a href="https://bbs.pediy.com/thread-225798.htm#msg_header_h2_3">https://bbs.pediy.com/thread-225798.htm#msg_header_h2_3</a></p><p>3、360加固保护分析</p><p><a href="https://bbs.pediy.com/thread-260049.htm">https://bbs.pediy.com/thread-260049.htm</a></p><h3 id="2021-07-02"><a href="#2021-07-02" class="headerlink" title="2021.07.02"></a>2021.07.02</h3><p>IOT漏洞分享</p><p><a href="http://blog.nsfocus.net/bitde-fender/">http://blog.nsfocus.net/bitde-fender/</a></p><h3 id="2021-07-16"><a href="#2021-07-16" class="headerlink" title="2021.07.16"></a>2021.07.16</h3><p>入职阿里的第二天，开始进行Android安全的研究</p><p>1、概述APK完整性保护的逆向分析及防护策略</p><p><a href="https://bbs.pediy.com/thread-268480.htm">https://bbs.pediy.com/thread-268480.htm</a></p><p>2、dex文件简要的解析，改文章主要是对当前比较流行的两个工具作为案例来进行讲解，一个是FART，一个是dex2jar</p><p><a href="https://bbs.pediy.com/thread-268465.htm">https://bbs.pediy.com/thread-268465.htm</a></p><h3 id="2021-07-18"><a href="#2021-07-18" class="headerlink" title="2021.07.18"></a>2021.07.18</h3><p>探讨FART与youpk脱壳机原理的文章</p><p><a href="https://bbs.pediy.com/thread-260052.htm">https://bbs.pediy.com/thread-260052.htm</a></p><h3 id="2021-07-19"><a href="#2021-07-19" class="headerlink" title="2021.07.19"></a>2021.07.19</h3><p>关于加壳的一些想法和总结</p><p><a href="https://langgithub.github.io/2020/06/09/Android%E8%84%B1%E5%A3%B3%E7%B3%BB%E5%88%97-%E8%83%8C%E6%99%AF/">https://langgithub.github.io/2020/06/09/Android%E8%84%B1%E5%A3%B3%E7%B3%BB%E5%88%97-%E8%83%8C%E6%99%AF/</a></p><h3 id="2021-07-21"><a href="#2021-07-21" class="headerlink" title="2021.07.21"></a>2021.07.21</h3><p>绕过Android9以上非SDK接口调用限制</p><p><a href="https://bbs.pediy.com/thread-268523.htm">https://bbs.pediy.com/thread-268523.htm</a></p><h3 id="2021-07-27"><a href="#2021-07-27" class="headerlink" title="2021.07.27"></a>2021.07.27</h3><p>1、OWASP上公布了一个设计好的IOT项目，可以通过该项目来学习IOT安全</p><p><a href="https://github.com/OWASP/IoTGoat">https://github.com/OWASP/IoTGoat</a></p><p>2、OLLVM Deflattener</p><p><a href="https://www.anquanke.com/post/id/248154">https://www.anquanke.com/post/id/248154</a></p><p>3、几篇关于IOT设备的文章，作者还是很用心在写</p><p>CVE-2016-1554</p><p><a href="https://genteeldevil.github.io/2021/07/14/CVE-2016-1554/">https://genteeldevil.github.io/2021/07/14/CVE-2016-1554/</a></p><p>CVE-2021-35973</p><p>[<a href="https://genteeldevil.github.io/2021/07/14/CVE-2021-35973%EF%BC%9ANetgear%20wac104%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87/]">https://genteeldevil.github.io/2021/07/14/CVE-2021-35973%EF%BC%9ANetgear%20wac104%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87/]</a>(<a href="https://genteeldevil.github.io/2021/07/14/CVE-2021-35973%EF%BC%9ANetgear">https://genteeldevil.github.io/2021/07/14/CVE-2021-35973：Netgear</a> wac104身份认证绕过/)</p><p>CVE-2021-33514</p><p>[<a href="https://genteeldevil.github.io/2021/07/14/CVE-2021-35973%EF%BC%9ANetgear%20wac104%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87/]">https://genteeldevil.github.io/2021/07/14/CVE-2021-35973%EF%BC%9ANetgear%20wac104%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87/]</a>(<a href="https://genteeldevil.github.io/2021/07/14/CVE-2021-35973%EF%BC%9ANetgear">https://genteeldevil.github.io/2021/07/14/CVE-2021-35973：Netgear</a> wac104身份认证绕过/)</p><p>加密固件解析</p><p><a href="https://genteeldevil.github.io/2021/07/26/%E5%8A%A0%E5%AF%86%E5%9B%BA%E4%BB%B6%E4%B9%8B%E4%BE%9D%E6%8D%AE%E8%80%81%E5%9B%BA%E4%BB%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E5%AF%86/">https://genteeldevil.github.io/2021/07/26/%E5%8A%A0%E5%AF%86%E5%9B%BA%E4%BB%B6%E4%B9%8B%E4%BE%9D%E6%8D%AE%E8%80%81%E5%9B%BA%E4%BB%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E5%AF%86/</a></p><h3 id="2021-07-28"><a href="#2021-07-28" class="headerlink" title="2021.07.28"></a>2021.07.28</h3><p>1、Android之整体脱壳原理与实践</p><p><a href="https://juejin.cn/post/6962096676576165918">https://juejin.cn/post/6962096676576165918</a></p><p>2、加壳与脱壳</p><p><a href="http://www.juziss.cn/2020/09/22/app%E7%9A%84%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/">http://www.juziss.cn/2020/09/22/app%E7%9A%84%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/</a></p><h3 id="2021-07-29"><a href="#2021-07-29" class="headerlink" title="2021.07.29"></a>2021.07.29</h3><p>1、一款家用路由器漏洞分析</p><p><a href="https://bbs.pediy.com/thread-268623.htm">https://bbs.pediy.com/thread-268623.htm</a></p><h3 id="2021-07-30"><a href="#2021-07-30" class="headerlink" title="2021.07.30"></a>2021.07.30</h3><p>1、利用angr去混淆的不足和优势</p><p><a href="https://www.52pojie.cn/thread-1484714-1-1.html">https://www.52pojie.cn/thread-1484714-1-1.html</a></p><p>2、某APP的sign值分析</p><p><a href="https://www.52pojie.cn/thread-1479871-1-1.html">https://www.52pojie.cn/thread-1479871-1-1.html</a></p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日checklist（8.02-10.06）</title>
    <link href="/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%888.02-10.06%EF%BC%89/"/>
    <url>/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%888.02-10.06%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="2021-08-02"><a href="#2021-08-02" class="headerlink" title="2021.08.02"></a>2021.08.02</h3><p>1、实现简单Android inline hook</p><p><a href="https://www.52pojie.cn/thread-1499227-1-1.html">https://www.52pojie.cn/thread-1499227-1-1.html</a></p><h3 id="2021-08-03"><a href="#2021-08-03" class="headerlink" title="2021.08.03"></a>2021.08.03</h3><p>1、某商超小程序加密算法分析</p><p><a href="https://www.52pojie.cn/thread-1474964-1-1.html">https://www.52pojie.cn/thread-1474964-1-1.html</a></p><p>2、滑块加密分析</p><p><a href="https://www.52pojie.cn/thread-1479607-1-1.html">https://www.52pojie.cn/thread-1479607-1-1.html</a></p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1486705">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1486705</a></p><h3 id="2021-08-04"><a href="#2021-08-04" class="headerlink" title="2021.08.04"></a>2021.08.04</h3><p>1、基于IDA python的去处OLLVM的方法</p><p><a href="https://www.52pojie.cn/thread-1488350-1-1.html">https://www.52pojie.cn/thread-1488350-1-1.html</a></p><p>2、FART的改造升级到FART10</p><p><a href="https://bbs.pediy.com/thread-268760.htm">https://bbs.pediy.com/thread-268760.htm</a></p><h3 id="2021-08-06"><a href="#2021-08-06" class="headerlink" title="2021.08.06"></a>2021.08.06</h3><p>1、发现一个博客，技术栈包括Android、JS、小程序，内容还是很丰富的。</p><p><a href="https://zhaomenghuan.js.org/note/">https://zhaomenghuan.js.org/note/</a></p><p>2、IDA python去除OLLVM的实战篇，对抗腾讯的加固</p><p><a href="https://www.52pojie.cn/thread-1488919-1-1.html">https://www.52pojie.cn/thread-1488919-1-1.html</a></p><h3 id="2021-08-08"><a href="#2021-08-08" class="headerlink" title="2021.08.08"></a>2021.08.08</h3><p>1、Android NDK开发 （发现这个作者总结的很到位，记录一下）</p><p><a href="https://kevinspider.github.io/ndk/">https://kevinspider.github.io/ndk/</a></p><p>2、So基础入门（挺适合查漏补缺）</p><p><a href="https://kevinspider.github.io/so1/">https://kevinspider.github.io/so1/</a></p><p>3、Frida 抓包 （其中有阿里系产品实例）</p><p><a href="https://kevinspider.github.io/zhuabao/">https://kevinspider.github.io/zhuabao/</a></p><p>4、frida 使用总结 hook Java和So</p><p><a href="https://kevinspider.github.io/fridahookjava/">https://kevinspider.github.io/fridahookjava/</a></p><p><a href="https://kevinspider.github.io/fridahookso/">https://kevinspider.github.io/fridahookso/</a></p><h3 id="2021-08-09"><a href="#2021-08-09" class="headerlink" title="2021.08.09"></a>2021.08.09</h3><p>1、在github上非常出名的逆向工程的教程，其中涵盖 x86、x64、32 位 ARM 和 64 位 ARM 架构</p><p><a href="https://github.com/These-us/Reverse-Engineering">https://github.com/These-us/Reverse-Engineering</a></p><h3 id="2021-08-10"><a href="#2021-08-10" class="headerlink" title="2021.08.10"></a>2021.08.10</h3><p>1、大数据入门上面发布的一个小练习题解</p><p><a href="https://www.52pojie.cn/thread-1491001-1-1.html">https://www.52pojie.cn/thread-1491001-1-1.html</a></p><h3 id="2021-08-11"><a href="#2021-08-11" class="headerlink" title="2021.08.11"></a>2021.08.11</h3><p>1、Frida获取阿里系App签名函数地址以及调用</p><p><a href="https://www.52pojie.cn/thread-1491319-1-1.html">https://www.52pojie.cn/thread-1491319-1-1.html</a></p><p>2、利用污点分析批量挖掘路由器固件安全漏洞</p><p><a href="https://www.4hou.com/posts/GzBr">https://www.4hou.com/posts/GzBr</a></p><h3 id="2021-08-12"><a href="#2021-08-12" class="headerlink" title="2021.08.12"></a>2021.08.12</h3><p>1、基于IDA python 实现去除OLLVM</p><p><a href="https://www.52pojie.cn/thread-1492187-1-1.html">https://www.52pojie.cn/thread-1492187-1-1.html</a></p><h3 id="2021-08-15"><a href="#2021-08-15" class="headerlink" title="2021.08.15"></a>2021.08.15</h3><p>1、Android APK的加固方法</p><p><a href="https://bbs.pediy.com/thread-268910.htm">https://bbs.pediy.com/thread-268910.htm</a></p><h3 id="2021-08-16"><a href="#2021-08-16" class="headerlink" title="2021.08.16"></a>2021.08.16</h3><p>1、一套关于Android安全的教程，涉及到android的漏洞知识</p><p><a href="https://github.com/Ralireza/Android-Security-Teryaagh">https://github.com/Ralireza/Android-Security-Teryaagh</a></p><h3 id="2021-08-21"><a href="#2021-08-21" class="headerlink" title="2021.08.21"></a>2021.08.21</h3><p>1、微信逆向分析</p><p><a href="https://bbs.pediy.com/thread-269003.htm">https://bbs.pediy.com/thread-269003.htm</a></p><p>2、一个非常nice的hook框架，在android加固开发中还是很受用的</p><p><a href="https://github.com/asLody/SandHook">https://github.com/asLody/SandHook</a></p><h3 id="2021-08-24"><a href="#2021-08-24" class="headerlink" title="2021.08.24"></a>2021.08.24</h3><p>1、fuzz 课程 github上比较优秀的文章</p><p><a href="https://github.com/antonio-morales/Fuzzing101">https://github.com/antonio-morales/Fuzzing101</a></p><h3 id="2021-08-24-1"><a href="#2021-08-24-1" class="headerlink" title="2021.08.24"></a>2021.08.24</h3><p>1、支付宝 v8 引擎分析</p><p><a href="https://mp.weixin.qq.com/s/QS0QT7TIcEzZhR6asCOecg">https://mp.weixin.qq.com/s/QS0QT7TIcEzZhR6asCOecg</a></p><p>2、AST-hook 可以hook JS，基本上实现JS版本的objection</p><p><a href="https://github.com/CC11001100/ast-hook-for-js-RE">https://github.com/CC11001100/ast-hook-for-js-RE</a></p><h3 id="2021-08-25"><a href="#2021-08-25" class="headerlink" title="2021.08.25"></a>2021.08.25</h3><p>1、关于IOT的wiki</p><p><a href="https://github.com/The-Art-of-Hacking/h4cker/tree/master/IoT">https://github.com/The-Art-of-Hacking/h4cker/tree/master/IoT</a></p><p>2、游戏安全，挺全的一个知识清单，同时也覆盖有练习</p><p><a href="https://github.com/dsasmblr/game-hacking">https://github.com/dsasmblr/game-hacking</a></p><p>3、机器学习安全相关的文章集合，内容非常丰富</p><p><a href="https://github.com/404notf0und/AI-for-Security-Learning">https://github.com/404notf0und/AI-for-Security-Learning</a></p><p>4、D-Link DIR-645路由器溢出分析</p><p><a href="https://bbs.pediy.com/thread-269063.htm">https://bbs.pediy.com/thread-269063.htm</a></p><h3 id="2021-08-27"><a href="#2021-08-27" class="headerlink" title="2021.08.27"></a>2021.08.27</h3><p>1、ida python使用笔记</p><p><a href="https://wonderkun.cc/2020/12/11/idapython%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/#more">https://wonderkun.cc/2020/12/11/idapython%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</a></p><p>2、Exploiting the Promise.allsettled bug in V8</p><p>主要是360挖掘的一个piexl4 远程提权的漏洞过程</p><p><a href="https://vul.360.net/archives/144">https://vul.360.net/archives/144</a></p><p>3、Escape from chrome sandbox to root</p><p>这是讲的沙箱部分到提权</p><p><a href="https://vul.360.net/archives/217">https://vul.360.net/archives/217</a></p><h3 id="2021-08-29"><a href="#2021-08-29" class="headerlink" title="2021.08.29"></a>2021.08.29</h3><p>1、在学习龙哥的csdn第一个案例收集的资料</p><p><a href="https://blog.csdn.net/zhoumi_/article/details/119609682">https://blog.csdn.net/zhoumi_/article/details/119609682</a></p><p><a href="https://blog.csdn.net/weixin_46734340/article/details/118857038?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_46734340/article/details/118857038?spm=1001.2014.3001.5501</a></p><h3 id="2021-08-30"><a href="#2021-08-30" class="headerlink" title="2021.08.30"></a>2021.08.30</h3><p>1、m1下安装Android 模拟器可行性方案</p><p><a href="https://blog.drov.com.cn/2021/06/apple-m1-android-avd.html">https://blog.drov.com.cn/2021/06/apple-m1-android-avd.html</a></p><p>2、Android技术笔记，讲解Android开发的知识</p><p><a href="https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode">https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode</a></p><p>3、某某合伙人app的sign分析</p><p><a href="https://blog.csdn.net/weixin_46734340/article/details/117756589?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_46734340/article/details/117756589?spm=1001.2014.3001.5501</a></p><h3 id="2021-08-31"><a href="#2021-08-31" class="headerlink" title="2021.08.31"></a>2021.08.31</h3><p>1、移除OLLVM、不透明谓词，目前适用于x86-64</p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1502997">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1502997</a></p><p>可以发掘其思路</p><p>2、autojs 这个开源的框架</p><p><a href="https://github.com/hyb1996/Auto.js">https://github.com/hyb1996/Auto.js</a></p><h3 id="2021-09-01"><a href="#2021-09-01" class="headerlink" title="2021.09.01"></a>2021.09.01</h3><p>1、源码解析 angr模拟执行</p><p><a href="https://www.anquanke.com/post/id/251983">https://www.anquanke.com/post/id/251983</a></p><p>2、bhook，实际上就是在xhook上进行的优化</p><p><a href="https://github.com/bytedance/bhook/tree/main/doc">https://github.com/bytedance/bhook/tree/main/doc</a></p><h3 id="2021-09-02"><a href="#2021-09-02" class="headerlink" title="2021.09.02"></a>2021.09.02</h3><p>1、对小米手机进行漏洞挖掘</p><p><a href="http://blog.takemyhand.xyz/2021/07/hacking-on-xiaomis-android-apps.html">http://blog.takemyhand.xyz/2021/07/hacking-on-xiaomis-android-apps.html</a></p><h3 id="2021-09-06"><a href="#2021-09-06" class="headerlink" title="2021.09.06"></a>2021.09.06</h3><p>1、一个关于移动安全入门的教程视频</p><p><a href="https://www.hacker101.com/playlists/mobile_hacking">https://www.hacker101.com/playlists/mobile_hacking</a></p><p><a href="https://www.hacker101.com/resources">https://www.hacker101.com/resources</a></p><p>2、黑客技巧总结，内容写的还不错</p><p><a href="https://github.com/carlospolop/hacktricks">https://github.com/carlospolop/hacktricks</a></p><p><a href="https://book.hacktricks.xyz/">https://book.hacktricks.xyz/</a></p><h3 id="2021-09-07"><a href="#2021-09-07" class="headerlink" title="2021.09.07"></a>2021.09.07</h3><p>1、用rust语言编写一个Android模拟器，算是可以用来作为练习，并且提供的源码</p><p><a href="https://fuzzing.science/page/rudroid-worlds-worst-android-emulator/">https://fuzzing.science/page/rudroid-worlds-worst-android-emulator/</a></p><h3 id="2021-09-09"><a href="#2021-09-09" class="headerlink" title="2021.09.09"></a>2021.09.09</h3><p>1、xposed下打印调用栈</p><p><a href="https://blog.csdn.net/QQ1084283172/article/details/79378374">https://blog.csdn.net/QQ1084283172/article/details/79378374</a></p><p>2、xposed入门</p><p><a href="https://www.freebuf.com/articles/terminal/189021.html">https://www.freebuf.com/articles/terminal/189021.html</a></p><h3 id="2021-09-13"><a href="#2021-09-13" class="headerlink" title="2021.09.13"></a>2021.09.13</h3><p>1、关于虚拟化相关的漏洞挖掘的list</p><p>Starting to release my own Awesome Exploits ⭐️ collection of security research links: <a href="https://t.co/Q5XbthU4Oj">https://t.co/Q5XbthU4Oj</a> Part 1/n: Virtualization with Oracle VirtualBox and Microsoft Hyper-V</p><p><a href="https://workflowy.com/s/awesome-exploit-list/WOA5PZgYpFeJSkZT">https://workflowy.com/s/awesome-exploit-list/WOA5PZgYpFeJSkZT</a></p><p>2、一个非常优秀的ida插件，貌似媲美F5</p><p><a href="https://github.com/airbus-cert/Yagi">https://github.com/airbus-cert/Yagi</a></p><h3 id="2021-09-14"><a href="#2021-09-14" class="headerlink" title="2021.09.14"></a>2021.09.14</h3><p>1、一款在线hex转arm汇编的网站</p><p><a href="https://armconverter.com/">https://armconverter.com/</a></p><h3 id="2021-09-22"><a href="#2021-09-22" class="headerlink" title="2021.09.22"></a>2021.09.22</h3><p>1、使用frida 来拦截flutter的流量的脚本</p><p><a href="https://github.com/Hamz-a/boring-flutter">https://github.com/Hamz-a/boring-flutter</a></p><p>2、PE viewer 工具，多平台</p><p><a href="https://github.com/horsicq/XPEViewer">https://github.com/horsicq/XPEViewer</a></p><h3 id="2021-09-28"><a href="#2021-09-28" class="headerlink" title="2021.09.28"></a>2021.09.28</h3><p>1、JS逆向之rpc</p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1519694">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1519694</a></p><p>2、在Linux下可以完整的启动Android系统</p><p><a href="https://github.com/waydroid/waydroid">https://github.com/waydroid/waydroid</a></p><p>3、二进制漏洞研究入门上篇</p><p><a href="https://ti.dbappsecurity.com.cn/blog/articles/2020/06/05/binary-vul-share-part1/">https://ti.dbappsecurity.com.cn/blog/articles/2020/06/05/binary-vul-share-part1/</a></p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日checklist（10.06-11.14）</title>
    <link href="/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%8810.06-11.14%EF%BC%89/"/>
    <url>/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%8810.06-11.14%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="2021-10-06"><a href="#2021-10-06" class="headerlink" title="2021.10.06"></a>2021.10.06</h3><p>1、使用rust写得一款新的符号执行与污点分析框架</p><p><a href="https://github.com/aemmitt-ns/radius">https://github.com/aemmitt-ns/radius</a></p><p>可以用于逆向工程和模糊执行</p><p>2、一款关于owasp上漏洞的靶场</p><p><a href="https://github.com/juice-shop/juice-shop">https://github.com/juice-shop/juice-shop</a></p><p>尽管漏洞很多是web的漏洞</p><p>3、一篇关于堆的利用的文章，内容很全面，根据真实的漏洞案例分析</p><p><a href="https://github.com/hac425xxx/heap-exploitation-in-real-world">https://github.com/hac425xxx/heap-exploitation-in-real-world</a></p><h3 id="2021-10-07"><a href="#2021-10-07" class="headerlink" title="2021.10.07"></a>2021.10.07</h3><p>1、学习ARM汇编的视频教程</p><p><a href="https://space.bilibili.com/37877654/channel/detail?cid=193314&amp;ctype=0">https://space.bilibili.com/37877654/channel/detail?cid=193314&amp;ctype=0</a></p><p>2、淘系APP使用unidbg来进行模拟执行</p><p><a href="http://www.qinless.com/179">http://www.qinless.com/179</a></p><p>该人的博客内容还是有几篇不错的，JD、小红书、PDD之类的模拟执行</p><p><a href="http://www.qinless.com/all">http://www.qinless.com/all</a></p><p>3、利用改机修改内核文件来实现无感知的调用栈关系打印</p><p><a href="https://github.com/yhnu/op7t">https://github.com/yhnu/op7t</a></p><p>作者是在修改内核的基础上来实现日志打印和调用链恢复</p><p>4、基于golang实现的frida的工具，并且在该工具中添加了很多功能</p><p><a href="https://github.com/a97077088/fd">https://github.com/a97077088/fd</a></p><h3 id="2021-10-08"><a href="#2021-10-08" class="headerlink" title="2021.10.08"></a>2021.10.08</h3><p>1、一款基于frida的动态分析框架，支持Android&amp;IOS</p><p><a href="https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security">https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security</a></p><p>2、一款可以查看IDA调用关系的插件，可以很直观呈现</p><p><a href="https://github.com/herosi/CTO">https://github.com/herosi/CTO</a></p><h3 id="2021-10-12"><a href="#2021-10-12" class="headerlink" title="2021.10.12"></a>2021.10.12</h3><p>1、还是再关注一下这个项目的进度，看看新的root方案</p><p><a href="https://github.com/abcz316/linuxKernelRoot">https://github.com/abcz316/linuxKernelRoot</a></p><p>2、某生鲜的抓包，算半个阿里系吧，重点是这个是使用的flutter开发的，比较前言</p><p><a href="https://mp.weixin.qq.com/s/4Emx3ebRyc8mSG1BT0AZ2A">https://mp.weixin.qq.com/s/4Emx3ebRyc8mSG1BT0AZ2A</a></p><p>3、使用平头哥开发的脱壳工具实战APP，非常适合上手的练习材料</p><p><a href="https://mp.weixin.qq.com/s/RV8Z3ZXH2P_fqG_GS7hCRg">https://mp.weixin.qq.com/s/RV8Z3ZXH2P_fqG_GS7hCRg</a></p><p>4、该博客的文章都还是很有深度和广度，写了一系列的Android逆向的技巧的文章，这里就记录一下，值得关注</p><p><a href="https://www.cnblogs.com/theseventhson/p/15161954.html">https://www.cnblogs.com/theseventhson/p/15161954.html</a></p><h3 id="2021-10-13"><a href="#2021-10-13" class="headerlink" title="2021.10.13"></a>2021.10.13</h3><p>1、如何哑巴学英语，技术人来讲学英语</p><p><a href="https://kenshinji.me/wo-shi-ru-he-cong-ya-ba-ying-yu-dao-wu-zhang-ai-ying-wen-gong-zuo-gou-tong-de/">https://kenshinji.me/wo-shi-ru-he-cong-ya-ba-ying-yu-dao-wu-zhang-ai-ying-wen-gong-zuo-gou-tong-de/</a></p><h3 id="2021-10-14"><a href="#2021-10-14" class="headerlink" title="2021.10.14"></a>2021.10.14</h3><p>1、Unicorn 中文文档</p><p>[<a href="https://github.com/kabeor/Unicorn-Engine-Documentation/blob/master/Unicorn-Engine%20Documentation.md]">https://github.com/kabeor/Unicorn-Engine-Documentation/blob/master/Unicorn-Engine%20Documentation.md]</a>(<a href="https://github.com/kabeor/Unicorn-Engine-Documentation/blob/master/Unicorn-Engine">https://github.com/kabeor/Unicorn-Engine-Documentation/blob/master/Unicorn-Engine</a> Documentation.md)</p><p>2、一种简单的java函数的hook思路，源码在星球中有</p><p><a href="https://bbs.pediy.com/thread-269787.htm">https://bbs.pediy.com/thread-269787.htm</a></p><p>但是看的有点难以理解，应该是Android源码的不熟悉</p><p>3、某生鲜微信小程序的mfsig值分析</p><p><a href="https://bbs.pediy.com/thread-268375.htm">https://bbs.pediy.com/thread-268375.htm</a></p><h3 id="2021-10-16"><a href="#2021-10-16" class="headerlink" title="2021.10.16"></a>2021.10.16</h3><p>1、一款IDA插件，用与识别未命名的函数</p><p><a href="https://github.com/aliyunav/Finger">https://github.com/aliyunav/Finger</a></p><h3 id="2021-10-17"><a href="#2021-10-17" class="headerlink" title="2021.10.17"></a>2021.10.17</h3><p>1、珍惜大佬写的密码学自吐工具，作为最近提效的工具之一吧，参考完善</p><p><a href="https://github.com/w296488320/XposedOkHttpCat">https://github.com/w296488320/XposedOkHttpCat</a></p><p>除此之外，在r0yuse的博客中也提到自吐，小肩膀也有自吐工具，参考一下吧，打磨一下看看能不能做个提效工具</p><h3 id="2021-10-19"><a href="#2021-10-19" class="headerlink" title="2021.10.19"></a>2021.10.19</h3><p>1、如何学习pwn中的堆</p><p><a href="https://github.com/shellphish/how2heap">https://github.com/shellphish/how2heap</a></p><p>这文章是真的详细</p><h3 id="2021-10-21"><a href="#2021-10-21" class="headerlink" title="2021.10.21"></a>2021.10.21</h3><p>1、免费的fuzzing 浏览器的教程</p><p><a href="https://academy.fuzzinglabs.com/introduction-browser-fuzzing?coupon=YOUTUBE">https://academy.fuzzinglabs.com/introduction-browser-fuzzing?coupon=YOUTUBE</a></p><p>2、Android漏洞利用101</p><p><a href="https://www.youtube.com/watch?v=squuwVQiPgg">https://www.youtube.com/watch?v=squuwVQiPgg</a></p><p>3、很好的绕过检测的hook方案</p><p><a href="https://bbs.pediy.com/thread-269866.htm">https://bbs.pediy.com/thread-269866.htm</a></p><p>4、从inlinehook的角度去检测Frida</p><p><a href="https://bbs.pediy.com/thread-269862.htm">https://bbs.pediy.com/thread-269862.htm</a> </p><h3 id="2021-10-22"><a href="#2021-10-22" class="headerlink" title="2021.10.22"></a>2021.10.22</h3><p>1、byteCTF2021线上赛的一个pwn题目，是android漏洞，知道学习一下</p><p><a href="https://bbs.pediy.com/thread-269849.htm">https://bbs.pediy.com/thread-269849.htm</a></p><p>2、逆向flutter的引擎</p><p><a href="https://github.com/ptswarm/reFlutter">https://github.com/ptswarm/reFlutter</a></p><p>3、CVE-2019-2215复现及分析</p><p>影响多款手机，刚好手中有这台设备，可以复现</p><p><a href="https://bbs.pediy.com/thread-264932.htm">https://bbs.pediy.com/thread-264932.htm</a></p><h3 id="2021-10-26"><a href="#2021-10-26" class="headerlink" title="2021.10.26"></a>2021.10.26</h3><p>1、吾爱破解春节题目2021</p><p><a href="https://www.52pojie.cn/thread-1532826-1-1.html">https://www.52pojie.cn/thread-1532826-1-1.html</a></p><h3 id="2021-10-27"><a href="#2021-10-27" class="headerlink" title="2021.10.27"></a>2021.10.27</h3><p>1、根据B站周壑老师的视频讲解的windows下的vmp相关的问题</p><p><a href="https://bbs.pediy.com/thread-269976.htm">https://bbs.pediy.com/thread-269976.htm</a></p><p>2、unidbg底层支持unicorn，讲解了原生支持的hook框架</p><p><a href="https://bbs.pediy.com/thread-269964.htm">https://bbs.pediy.com/thread-269964.htm</a></p><p>3、在windows下安装xposed，如果可以还是很强的的</p><p><a href="https://github.com/LSPosed/MagiskOnWSA">https://github.com/LSPosed/MagiskOnWSA</a></p><p>4、ARM下double free 漏洞的讲解</p><p><a href="https://github.com/stong/how-to-exploit-a-double-free">https://github.com/stong/how-to-exploit-a-double-free</a></p><h3 id="2021-10-29"><a href="#2021-10-29" class="headerlink" title="2021.10.29"></a>2021.10.29</h3><p>1、代码混淆研究新方向</p><p><a href="https://bbs.pediy.com/thread-270019.htm">https://bbs.pediy.com/thread-270019.htm</a></p><p>2、基于frida的Android二进制分析工具</p><p><a href="https://github.com/Ch0pin/medusa">https://github.com/Ch0pin/medusa</a></p><h3 id="2021-10-31"><a href="#2021-10-31" class="headerlink" title="2021.10.31"></a>2021.10.31</h3><p>1、unidbg hook 大全</p><p><a href="https://reao.io/archives/90/">https://reao.io/archives/90/</a></p><h3 id="2021-11-02"><a href="#2021-11-02" class="headerlink" title="2021.11.02"></a>2021.11.02</h3><p>1、非常值得关注的Android官方漏洞通告</p><p><a href="https://source.android.com/security/bulletin">https://source.android.com/security/bulletin</a></p><p>2、讲解AFL源码解析的教程</p><p><a href="http://fuzzing.in/codelabs/fuzzing_opensource/index.html?index=../..index#0">http://fuzzing.in/codelabs/fuzzing_opensource/index.html?index=..%2F..index#0</a></p><h3 id="2021-11-03"><a href="#2021-11-03" class="headerlink" title="2021.11.03"></a>2021.11.03</h3><p>1、使用trace进行算法还原</p><p><a href="https://www.52pojie.cn/thread-1537069-1-1.html">https://www.52pojie.cn/thread-1537069-1-1.html</a></p><h3 id="2021-11-04"><a href="#2021-11-04" class="headerlink" title="2021.11.04"></a>2021.11.04</h3><p>1、App小红书 so逆向</p><p><a href="https://bbs.pediy.com/thread-270117.htm">https://bbs.pediy.com/thread-270117.htm</a></p><h3 id="2021-11-05"><a href="#2021-11-05" class="headerlink" title="2021.11.05"></a>2021.11.05</h3><p>1、fuzzing book 一个很好的fuzz教程</p><p><a href="https://www.fuzzingbook.org/html/ReleaseNotes.html">https://www.fuzzingbook.org/html/ReleaseNotes.html</a></p><p>2、fuzz in Linux </p><p><a href="http://fuzzing.in/codelabs/fuzzing_linux/index.html?index=../..index#0">http://fuzzing.in/codelabs/fuzzing_linux/index.html?index=..%2F..index#0</a></p><h3 id="2021-11-06"><a href="#2021-11-06" class="headerlink" title="2021.11.06"></a>2021.11.06</h3><p>1、学习llvm的中文资料</p><p><a href="https://github.com/xiaoweiChen/Learn-LLVM-12/">https://github.com/xiaoweiChen/Learn-LLVM-12/</a></p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日checklist（11.12-12.31）</title>
    <link href="/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%8811.12-12.31%EF%BC%89/"/>
    <url>/2022/01/05/%E6%AF%8F%E6%97%A5checklist%EF%BC%8811.12-12.31%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="2021-11-12"><a href="#2021-11-12" class="headerlink" title="2021.11.12"></a>2021.11.12</h3><p>离职阿里，结束了一段实习生活，很好又体验了一个新的方向，不过内心中还是有一个梦想就是挖洞，所以借着去字节的空窗期，专心的研究挖洞和专题体系知识。</p><h3 id="2021-11-14"><a href="#2021-11-14" class="headerlink" title="2021.11.14"></a>2021.11.14</h3><p>1、关于IOS、macos相关的安全漏洞的收集资料</p><p><a href="https://github.com/houjingyi233/macOS-iOS-system-security">https://github.com/houjingyi233/macOS-iOS-system-security</a></p><h3 id="2021-11-18"><a href="#2021-11-18" class="headerlink" title="2021.11.18"></a>2021.11.18</h3><p>1、seedlab Ret2libc 与ROP writeUp </p><p><a href="https://www.anquanke.com/post/id/258025">https://www.anquanke.com/post/id/258025</a></p><p>2、从黑盒到灰盒再到pwn-教育平板挖掘</p><p><a href="https://tttang.com/archive/1327/">https://tttang.com/archive/1327/</a></p><p>3、pwn college Arizona State University 大学发起的一门关于二进制安全的课程，像现在向全世界开放该课题</p><p><a href="https://pwn.college/">https://pwn.college/</a></p><p>4、fuzz with libAFL</p><p><a href="https://www.youtube.com/watch?v=ztGfxbvcrms">https://www.youtube.com/watch?v=ztGfxbvcrms</a></p><p>5、Linux 内核利用</p><p><a href="https://github.com/xairy/linux-kernel-exploitation">https://github.com/xairy/linux-kernel-exploitation</a></p><h3 id="2021-11-20"><a href="#2021-11-20" class="headerlink" title="2021.11.20"></a>2021.11.20</h3><p>1、Android安全研讨会，在这个里面含有多个模块的PPT</p><p><a href="https://valsamaras.medium.com/android-security-workshop-5eadeb50fba">https://valsamaras.medium.com/android-security-workshop-5eadeb50fba</a></p><h3 id="2021-11-22"><a href="#2021-11-22" class="headerlink" title="2021.11.22"></a>2021.11.22</h3><p>1、爱奇艺风控团队的笔记</p><p><a href="https://github.com/WalterInSH/risk-management-note">https://github.com/WalterInSH/risk-management-note</a></p><h3 id="2021-11-25"><a href="#2021-11-25" class="headerlink" title="2021.11.25"></a>2021.11.25</h3><p>1、brida工具</p><p>frida+BP使用</p><p><a href="https://github.com/federicodotta/Brida">https://github.com/federicodotta/Brida</a></p><h3 id="2021-11-27"><a href="#2021-11-27" class="headerlink" title="2021.11.27"></a>2021.11.27</h3><p>1、unicorn CTF题目，一道pwn题目，灵感来源于一枚0day</p><p><a href="https://github.com/jwang-a/CTF/tree/master/MyChallenges/Pwn/Unicorns_Aisle">https://github.com/jwang-a/CTF/tree/master/MyChallenges/Pwn/Unicorns_Aisle</a></p><h3 id="2021-12-04"><a href="#2021-12-04" class="headerlink" title="2021.12.04"></a>2021.12.04</h3><p>1、一款基于容器的在Ubuntu等常规的Linux系统下使用Android系统</p><p><a href="https://github.com/waydroid/waydroid">https://github.com/waydroid/waydroid</a></p><p>2、虚拟机保护加固机制，基于虚拟化的重整</p><p><a href="https://github.com/mrphrazer/r2con2021_deobfuscation">https://github.com/mrphrazer/r2con2021_deobfuscation</a></p><p><a href="https://www.youtube.com/watch?v=b6udPT79itk">https://www.youtube.com/watch?v=b6udPT79itk</a></p><p>3、Android app CTF 机车APP挑战，在项目中含有writeup</p><p><a href="https://github.com/nowsecure/cybertruckchallenge19">https://github.com/nowsecure/cybertruckchallenge19</a></p><h3 id="2021-12-06"><a href="#2021-12-06" class="headerlink" title="2021.12.06"></a>2021.12.06</h3><p>1、通过混合布尔算术表达式进行代码重构</p><p>实际上大致看下来就是对计算进行混淆，这样可以减小Z3来计算</p><p><a href="https://github.com/arnaugamez/talks/tree/master/2021/00_intent">https://github.com/arnaugamez/talks/tree/master/2021/00_intent</a></p><h3 id="2021-12-10"><a href="#2021-12-10" class="headerlink" title="2021.12.10"></a>2021.12.10</h3><p>1、frida+Unicorn结合的调试器，值得关注</p><p><a href="https://github.com/Abbbbbi/UniDa">https://github.com/Abbbbbi/UniDa</a></p><p>2、某系统漏洞挖掘之固件分析</p><p><a href="https://bbs.pediy.com/thread-270709.htm">https://bbs.pediy.com/thread-270709.htm</a></p><h3 id="2021-12-11"><a href="#2021-12-11" class="headerlink" title="2021.12.11"></a>2021.12.11</h3><p>1、解决本地代码混淆的动态二进制检测技术</p><p><a href="https://www.romainthomas.fr/publication/20-bh-asia-dbi/">https://www.romainthomas.fr/publication/20-bh-asia-dbi/</a></p><h3 id="2021-12-13"><a href="#2021-12-13" class="headerlink" title="2021.12.13"></a>2021.12.13</h3><p>1、codeql 检测log4j2</p><p><a href="https://github.com/hac425xxx/codeql-snippets">https://github.com/hac425xxx/codeql-snippets</a></p><h3 id="2021-12-15"><a href="#2021-12-15" class="headerlink" title="2021.12.15"></a>2021.12.15</h3><p>1、某dex-vmp安全分析与还原</p><p><a href="https://www.anquanke.com/post/id/263197">https://www.anquanke.com/post/id/263197</a></p><p>2、运行时改变进程名</p><p><a href="https://github.com/darvincisec/RuntimeProcessNameChange">https://github.com/darvincisec/RuntimeProcessNameChange</a></p><p>3、反内存dump</p><p><a href="https://github.com/darvincisec/AntiDebugandMemoryDump">https://github.com/darvincisec/AntiDebugandMemoryDump</a></p><p>4、检测frida</p><p><a href="https://github.com/darvincisec/DetectFrida">https://github.com/darvincisec/DetectFrida</a></p><p>5、检测Magisk hide</p><p><a href="https://github.com/darvincisec/DetectMagiskHide">https://github.com/darvincisec/DetectMagiskHide</a></p><h3 id="2021-12-16"><a href="#2021-12-16" class="headerlink" title="2021.12.16"></a>2021.12.16</h3><p>1、一款静态分析IDA插件</p><p><a href="https://github.com/airbus-seclab/bincat">https://github.com/airbus-seclab/bincat</a></p><h3 id="2021-12-22"><a href="#2021-12-22" class="headerlink" title="2021.12.22"></a>2021.12.22</h3><p>1、高版本堆tcache一般利用手法总结（glibc2.27-2.32）</p><p><a href="https://tttang.com/archive/1362/">https://tttang.com/archive/1362/</a></p><h3 id="2021-12-23"><a href="#2021-12-23" class="headerlink" title="2021.12.23"></a>2021.12.23</h3><p>1、高级密码学PDF</p><p><a href="https://github.com/cryptosubtlety/intuitive-advanced-cryptography/blob/master/advancedcrypto.pdf">https://github.com/cryptosubtlety/intuitive-advanced-cryptography/blob/master/advancedcrypto.pdf</a></p><p>2、Android应用中不安全的TLS证书检查</p><p><a href="https://www.guardsquare.com/blog/insecure-tls-certificate-checking-in-android-apps">https://www.guardsquare.com/blog/insecure-tls-certificate-checking-in-android-apps</a></p><h3 id="2021-12-25"><a href="#2021-12-25" class="headerlink" title="2021.12.25"></a>2021.12.25</h3><p>1、一款静态分析框架，可以解析dex文件</p><p><a href="https://github.com/Fare9/KUNAI-static-analyzer">https://github.com/Fare9/KUNAI-static-analyzer</a></p><p>2、一个机器学习课程指南</p><p><a href="https://github.com/dair-ai/ML-YouTube-Courses">https://github.com/dair-ai/ML-YouTube-Courses</a></p><p>并且这个github上还存在一些不错的内容，我看内容都是基于人工智能方向</p><p>3、浏览器PWN</p><p><a href="https://github.com/SpiralBL0CK/Browser-Pwning-">https://github.com/SpiralBL0CK/Browser-Pwning-</a></p><h3 id="2021-12-26"><a href="#2021-12-26" class="headerlink" title="2021.12.26"></a>2021.12.26</h3><p>1、动手制作一个Linux iso镜像</p><p><a href="https://www.cnblogs.com/aWxvdmVseXc0/p/15553891.html">https://www.cnblogs.com/aWxvdmVseXc0/p/15553891.html</a></p><p>2、Android 一二三代加固方案</p><p><a href="https://github.com/windy-purple/androidshell">https://github.com/windy-purple/androidshell</a></p><p>3、使用C语言来解析so</p><p><a href="https://github.com/windy-purple/parseso">https://github.com/windy-purple/parseso</a></p><p>4、使用python来解析dex</p><p><a href="https://github.com/windy-purple/parserDex">https://github.com/windy-purple/parserDex</a></p><h3 id="2021-12-27"><a href="#2021-12-27" class="headerlink" title="2021.12.27"></a>2021.12.27</h3><p>1、基于youpk的web界面的脱壳工具，实际上就是一个更加集成化的操作</p><p><a href="https://github.com/westinyang/unpacker-panel">https://github.com/westinyang/unpacker-panel</a></p><p>2、ART在安全攻防中的应用</p><p><a href="https://bbs.pediy.com/thread-270942.htm">https://bbs.pediy.com/thread-270942.htm</a></p><p>3、基于gridra的逆向入门课程</p><p><a href="https://www.youtube.com/playlist?list=PLHJns8WZXCdvb-EDfSqi5Fdtd9O7y0u5J">https://www.youtube.com/playlist?list=PLHJns8WZXCdvb-EDfSqi5Fdtd9O7y0u5J</a></p><h3 id="2021-12-28"><a href="#2021-12-28" class="headerlink" title="2021.12.28"></a>2021.12.28</h3><p>1、恶意软件分析课程，使用gridra进行分析</p><p><a href="https://class.malware.re/">https://class.malware.re/</a></p><p>2、mac vuln相关的报告和paper</p><p><a href="https://github.com/hetmehtaa/Mac_Vuln">https://github.com/hetmehtaa/Mac_Vuln</a></p><p>3、fuzzing and exploitation Linux kernel</p><p><a href="https://github.com/pjlantz/optee-qemu">https://github.com/pjlantz/optee-qemu</a></p><p>4、如何批量挖掘macos、ios内核信息泄露漏洞</p><p><a href="https://github.com/maldiohead/Slides/blob/main/Batch_find_macO_iOS_kernel_info_leak.pdf">https://github.com/maldiohead/Slides/blob/main/Batch_find_macO_iOS_kernel_info_leak.pdf</a></p><p>5、hacking the DIR-615，总共五篇文章</p><p><a href="https://noob3xploiter.medium.com/hacking-the-dlink-dir-615-for-fun-and-no-profit-a2f1689f9920">part1</a> <a href="https://noob3xploiter.medium.com/hacking-the-dlink-dir-615-for-fun-and-no-profit-part-2-cve-2020-10215-586204d42bba">part2</a> <a href="https://noob3xploiter.medium.com/hacking-the-dlink-dir-615-for-fun-and-no-profit-part-3-cve-2020-10213-8340a89e9f57">part3</a> <a href="https://noob3xploiter.medium.com/hacking-the-dlink-dir-615-for-fun-and-no-profit-part-4-buffer-overflow-f278ecfdb3c4">part4</a> <a href="https://noob3xploiter.medium.com/hacking-the-dlink-dir-615-for-fun-and-no-profit-part-5-multiple-rces-d508f58e2471">part5</a></p><p>6、破解tenda AC10-1200 目前有四篇</p><p><a href="https://noob3xploiter.medium.com/hacking-the-tenda-ac10-1200-part-1-cve-2018-16334-fe9401e48471">part1</a> <a href="https://noob3xploiter.medium.com/hacking-the-tenda-ac10-1200-router-part-2-strcpy-buffer-overflow-92cd88e1d503">part2</a> <a href="https://noob3xploiter.medium.com/hacking-the-tenda-ac10-1200-router-part-3-yet-another-buffer-overflow-4eb322f64823">part3</a> <a href="https://noob3xploiter.medium.com/hacking-the-tenda-ac10-1200-router-part-4-sscanf-buffer-overflow-75ae0e06abb6">part4</a></p><h3 id="2021-12-29"><a href="#2021-12-29" class="headerlink" title="2021.12.29"></a>2021.12.29</h3><p>1、fuzzing book</p><p><a href="https://www.fuzzingbook.org/">https://www.fuzzingbook.org/</a></p><p>2、xss game</p><p><a href="https://xss.pwnfunction.com/">https://xss.pwnfunction.com/</a></p><p>3、绕过canary保护的6中方法</p><p><a href="https://www.anquanke.com/post/id/262846">https://www.anquanke.com/post/id/262846</a></p><h3 id="2021-12-30"><a href="#2021-12-30" class="headerlink" title="2021.12.30"></a>2021.12.30</h3><p>1、Javascript引擎的利用：JavaScript9案例研究</p><p><a href="https://zerodayengineering.com/research/javascript-engines-exploitation-jscript9.html">https://zerodayengineering.com/research/javascript-engines-exploitation-jscript9.html</a></p><p>2、IOS内核信息泄露漏洞</p><p><a href="https://github.com/maldiohead/Slides/blob/main/Batch_find_macO_iOS_kernel_info_leak.pdf">https://github.com/maldiohead/Slides/blob/main/Batch_find_macO_iOS_kernel_info_leak.pdf</a></p><p>3、HITB LAB: ARM IoT Firmware Extraction And Emulation Using ARMX</p><p>一款ARM IOT模拟器</p><p><a href="https://www.youtube.com/watch?v=Y1bFNZde33Q">https://www.youtube.com/watch?v=Y1bFNZde33Q</a></p><p><a href="https://github.com/therealsaumil/emux">https://github.com/therealsaumil/emux</a></p><p>4、HITB LAB - EXPLIoT Framework 一款测试IOT的设备框架，支持众多的物联网协议</p><p><a href="https://www.youtube.com/watch?v=LXg9BijthwA">https://www.youtube.com/watch?v=LXg9BijthwA</a></p><p><a href="https://expliot.readthedocs.io/en/latest/">https://expliot.readthedocs.io/en/latest/</a></p><p><a href="https://gitlab.com/expliot_framework/expliot">https://gitlab.com/expliot_framework/expliot</a></p><p>5、When Fuzzing Meets SAP Network Services fuzz网路协议</p><p><a href="https://www.youtube.com/watch?v=c0O9EuV9yrE">https://www.youtube.com/watch?v=c0O9EuV9yrE</a></p><p>6、MIPS-X: The Next IoT Frontier 打造一款mips的物联网模拟</p><p><a href="https://www.youtube.com/watch?v=DBdhEWct8HE">https://www.youtube.com/watch?v=DBdhEWct8HE</a></p><p>7、Low Level BootROM Protocol Fuzzing Secure Memory Regions一个对BootROM进行fuzz的演讲</p><p><a href="https://www.youtube.com/watch?v=Xi__bbKtWlA">https://www.youtube.com/watch?v=Xi__bbKtWlA</a></p><p>8、利用libfuzzer对TG进行fuzz寻找漏洞</p><p><a href="https://www.youtube.com/watch?v=kugsqIZhk7c">https://www.youtube.com/watch?v=kugsqIZhk7c</a></p>]]></content>
    
    
    <categories>
      
      <category>checklist</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>checklist——漏洞挖掘</title>
    <link href="/2021/12/24/checklist%E2%80%94%E2%80%94%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <url>/2021/12/24/checklist%E2%80%94%E2%80%94%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>该checklist是专门服务于闭关这三个月，主要是记录与漏洞挖掘相关的内容，同时也会把之前收集的与漏洞挖掘相关的内容归类于此，便于学习和查看。</p><h3 id="2020-10-20"><a href="#2020-10-20" class="headerlink" title="2020.10.20"></a>2020.10.20</h3><p>1、通过CTF学习Android漏洞，实战dozer</p><p><a href="https://bbs.pediy.com/thread-261854.htm">https://bbs.pediy.com/thread-261854.htm</a></p><h3 id="2020-11-17"><a href="#2020-11-17" class="headerlink" title="2020.11.17"></a>2020.11.17</h3><p>1、Android 本地拒绝服务漏洞</p><p><a href="https://blogs.360.cn/post/android-app%E9%80%9A%E7%94%A8%E5%9E%8B%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A.html">https://blogs.360.cn/post/android-app%E9%80%9A%E7%94%A8%E5%9E%8B%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A.html</a></p><h3 id="2020-11-18"><a href="#2020-11-18" class="headerlink" title="2020.11.18"></a>2020.11.18</h3><p>1、Android 漏洞checklist </p><p><a href="https://github.com/guanchao/AndroidChecklist">https://github.com/guanchao/AndroidChecklist</a></p><p><a href="https://github.com/M31N99/Mobile-Security-Checklist">https://github.com/M31N99/Mobile-Security-Checklist</a></p><p>2、Android APP 常见的漏洞</p><p><a href="https://ayesawyer.github.io/2019/08/21/Android-App%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/">https://ayesawyer.github.io/2019/08/21/Android-App%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/</a></p><p>3、Activity导出实验</p><p><a href="http://tea9.xyz/post/2970212528.html">http://tea9.xyz/post/2970212528.html</a></p><p>4、ContentProvider路径穿越漏洞</p><p><a href="https://keenlab.tencent.com/zh/whitepapers/%E8%85%BE%E8%AE%AF%E5%AE%89%E5%85%A8%E7%A7%91%E6%81%A9%E5%AE%9E%E9%AA%8C%E5%AE%A42018%E5%B9%B4Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E7%99%BD%E7%9A%AE%E4%B9%A6.pdf">https://keenlab.tencent.com/zh/whitepapers/腾讯安全科恩实验室2018年Android应用安全白皮书.pdf</a></p><p><a href="https://www.freebuf.com/articles/terminal/105857.html">https://www.freebuf.com/articles/terminal/105857.html</a></p><p><a href="http://01hackcode.com/wiki/7.3">http://01hackcode.com/wiki/7.3</a></p><p><a href="https://mabin004.github.io/2019/04/15/Android-Download-Provider%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">https://mabin004.github.io/2019/04/15/Android-Download-Provider漏洞分析/</a></p><h3 id="2020-11-20"><a href="#2020-11-20" class="headerlink" title="2020.11.20"></a>2020.11.20</h3><p>1、利用Android APP中的漏洞</p><p><a href="https://ayesawyer.github.io/2019/05/28/%E5%88%A9%E7%94%A8App%E4%B8%AD%E7%9A%84%E6%BC%8F%E6%B4%9E/">https://ayesawyer.github.io/2019/05/28/%E5%88%A9%E7%94%A8App%E4%B8%AD%E7%9A%84%E6%BC%8F%E6%B4%9E/</a></p><h3 id="2020-11-23"><a href="#2020-11-23" class="headerlink" title="2020.11.23"></a>2020.11.23</h3><p>1、实战webview跨域风险</p><p><a href="http://www.nxadmin.com/mobile-sec/1657.html">http://www.nxadmin.com/mobile-sec/1657.html</a></p><p>2、webview 中的JavaScript interface 开放风险</p><p><a href="http://www.nxadmin.com/mobile-sec/1657.html">http://www.nxadmin.com/mobile-sec/1657.html</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2020-11-28"><a href="#2020-11-28" class="headerlink" title="2020.11.28"></a>2020.11.28</h3><p>1、webview白名单绕过</p><p><a href="https://mabin004.github.io/2019/04/23/Android-WebView%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/">https://mabin004.github.io/2019/04/23/Android-WebView%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/</a></p><h3 id="2020-12-14"><a href="#2020-12-14" class="headerlink" title="2020.12.14"></a>2020.12.14</h3><p>1、off-by-one</p><p><a href="http://d0m021ng.github.io/2017/03/01/PWN/Linux%E5%A0%86%E6%BC%8F%E6%B4%9E%E4%B9%8Boff-by-one/">http://d0m021ng.github.io/2017/03/01/PWN/Linux堆漏洞之off-by-one/</a></p><p><a href="https://wizardforcel.gitbooks.io/sploitfun-linux-x86-exp-tut/content/3.html">https://wizardforcel.gitbooks.io/sploitfun-linux-x86-exp-tut/content/3.html</a></p><p><a href="http://www.peckerwood.top/post/off-by-one-heap-based/">http://www.peckerwood.top/post/off-by-one-heap-based/</a></p><h3 id="2021-12-16"><a href="#2021-12-16" class="headerlink" title="2021.12.16"></a>2021.12.16</h3><p>1、三道IOT相关的pwn题目</p><p><a href="https://mp.weixin.qq.com/s/x19DiiitMeAm5VAupqzfdg">https://mp.weixin.qq.com/s/x19DiiitMeAm5VAupqzfdg</a></p><p><a href="https://www.anquanke.com/post/id/224972">https://www.anquanke.com/post/id/224972</a></p><h3 id="2020-12-23"><a href="#2020-12-23" class="headerlink" title="2020.12.23"></a>2020.12.23</h3><p>1、深入分析Android binder越界访问漏洞CVE-2020-0041</p><p><a href="https://www.anquanke.com/post/id/202385">https://www.anquanke.com/post/id/202385</a></p><h3 id="2020-12-26"><a href="#2020-12-26" class="headerlink" title="2020.12.26"></a>2020.12.26</h3><p>1、CVE-2020-0423 Android内核提权漏洞分析</p><p><a href="https://bbs.pediy.com/thread-264616.htm">https://bbs.pediy.com/thread-264616.htm</a></p><h3 id="2021-01-04"><a href="#2021-01-04" class="headerlink" title="2021.01.04"></a>2021.01.04</h3><p>1、CVE-2019-2215 Android的漏洞</p><p><a href="https://bbs.pediy.com/thread-264932.htm">https://bbs.pediy.com/thread-264932.htm</a></p><p>2、Android PWN</p><p><a href="https://www.anquanke.com/post/id/204393#h2-7">https://www.anquanke.com/post/id/204393#h2-7</a></p><h3 id="2021-01-06"><a href="#2021-01-06" class="headerlink" title="2021.01.06"></a>2021.01.06</h3><p>1、frida fuzz技术</p><p><a href="http://riusksk.me/2019/11/30/Frida%E6%A1%86%E6%9E%B6%E5%9C%A8Fuzzing%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/">http://riusksk.me/2019/11/30/Frida框架在Fuzzing中的应用/</a></p><p>2、android逻辑漏洞半自动挖掘</p><p><a href="http://riusksk.me/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/">http://riusksk.me/2019/11/02/Jandroid：半自动化Android应用逻辑漏洞挖掘/</a></p><p>3、fuzz技术汇总</p><p><a href="https://github.com/secfigo/Awesome-Fuzzing">https://github.com/secfigo/Awesome-Fuzzing</a></p><p><a href="http://riusksk.me/2019/07/14/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E5%AD%A6%E4%B9%A0%E7%9A%84Fuzzer%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">http://riusksk.me/2019/07/14/一些值得学习的Fuzzer开源项目/</a></p><h3 id="2021-01-07"><a href="#2021-01-07" class="headerlink" title="2021.01.07"></a>2021.01.07</h3><p>1、CVE-2020-14364 QEMU逃逸</p><p><a href="https://www.anquanke.com/post/id/227283">https://www.anquanke.com/post/id/227283</a></p><p>2、QEMU逃逸</p><p><a href="https://bbs.pediy.com/thread-265501.htm">https://bbs.pediy.com/thread-265501.htm</a></p><h3 id="2021-01-24"><a href="#2021-01-24" class="headerlink" title="2021.01.24"></a>2021.01.24</h3><p>1、URL scheme风险分析</p><p><a href="https://www.jianshu.com/p/7b09cbac1df4">https://www.jianshu.com/p/7b09cbac1df4</a></p><p><a href="http://01hackcode.com/wiki/7.7">http://01hackcode.com/wiki/7.7</a></p><p><a href="https://xz.aliyun.com/t/3233">https://xz.aliyun.com/t/3233</a></p><h3 id="2021-01-25"><a href="#2021-01-25" class="headerlink" title="2021.01.25"></a>2021.01.25</h3><p>1、ROPEmporium全解</p><p><a href="https://bbs.pediy.com/thread-256914.htm">https://bbs.pediy.com/thread-256914.htm</a></p><h3 id="2021-01-30"><a href="#2021-01-30" class="headerlink" title="2021.01.30"></a>2021.01.30</h3><p>1、CVE-2020-12351：Linux蓝牙模块拒绝服务漏洞分析</p><p><a href="https://bbs.pediy.com/thread-265744.htm">https://bbs.pediy.com/thread-265744.htm</a></p><h3 id="2021-02-03"><a href="#2021-02-03" class="headerlink" title="2021.02.03"></a>2021.02.03</h3><p>1、D-link 远程代码执行漏洞分析 CVE-2020-24581</p><p><a href="https://www.anquanke.com/post/id/229323">https://www.anquanke.com/post/id/229323</a></p><h3 id="2021-02-28"><a href="#2021-02-28" class="headerlink" title="2021.02.28"></a>2021.02.28</h3><p>1、Android内核提权漏洞CVE-2019-2215 binder UAF</p><p><a href="https://bbs.pediy.com/thread-266198.htm">https://bbs.pediy.com/thread-266198.htm</a></p><h3 id="2021-03-05"><a href="#2021-03-05" class="headerlink" title="2021.03.05"></a>2021.03.05</h3><p>1、IOT设备漏洞复现到固件后门植入</p><p><a href="https://www.anquanke.com/post/id/232845">https://www.anquanke.com/post/id/232845</a></p><h3 id="2021-03-10"><a href="#2021-03-10" class="headerlink" title="2021.03.10"></a>2021.03.10</h3><p> 1、Teanda路由器CVE分析</p><p><a href="https://www.anquanke.com/post/id/231445">https://www.anquanke.com/post/id/231445</a></p><p>2、思科RV110W CVE-2020-3331漏洞调试与iot靶场搭建</p><p><a href="https://www.anquanke.com/post/id/233859">https://www.anquanke.com/post/id/233859</a></p><h3 id="2021-04-02"><a href="#2021-04-02" class="headerlink" title="2021.04.02"></a>2021.04.02</h3><p>1、D-link路由器漏洞研究分享</p><p><a href="http://www.anquanke.com/post/id/236133">http://www.anquanke.com/post/id/236133</a></p><p>2、嵌入式设备的固件分析</p><p><a href="https://bbs.pediy.com/thread-266803.htm">https://bbs.pediy.com/thread-266803.htm</a></p><h3 id="2021-04-03"><a href="#2021-04-03" class="headerlink" title="2021.04.03"></a>2021.04.03</h3><p>看到一个fastbin attach的例题</p><p><a href="https://bbs.pediy.com/thread-266822.htm">https://bbs.pediy.com/thread-266822.htm</a></p><h3 id="2021-04-23"><a href="#2021-04-23" class="headerlink" title="2021.04.23"></a>2021.04.23</h3><p>昨天了解到了fuzz技术，回来不就是为了学习挖洞，所以还是要开始整起来，看了泉哥的博客，发现了一些值得关注的学习点。</p><p>1、</p><p>fuzz实战之libfuzzer</p><p><a href="https://www.secpulse.com/archives/71898.html">https://www.secpulse.com/archives/71898.html</a></p><p>这个是一个开源的fuzzer工具，并且也是附带了实际的例子存在，所以是一个了解入门fuzz技术的好路子。</p><p>2、frida在fazz中的使用</p><p><a href="http://riusksk.me/2019/11/30/Frida%E6%A1%86%E6%9E%B6%E5%9C%A8Fuzzing%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/">http://riusksk.me/2019/11/30/Frida%E6%A1%86%E6%9E%B6%E5%9C%A8Fuzzing%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</a></p><p>最近也是在研究和使用frida，并且内心也是有这个想法利用frida干点实际性的项目，这个fuzz框架就给我提供了一点很好学习思路。</p><p>3、android半自动化漏洞挖掘的项目的开发思想</p><p><a href="http://riusksk.me/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/">http://riusksk.me/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</a></p><p>4、pwn堆溢出技巧，带沙箱的题目</p><p><a href="http://www.anquanke.com/post/id/236832">http://www.anquanke.com/post/id/236832</a></p><h3 id="2021-05-20"><a href="#2021-05-20" class="headerlink" title="2021.05.20"></a>2021.05.20</h3><p>1、好友的文章集合，内容还是挺有深度的</p><p><a href="https://www.anquanke.com/member.html?memberId=146878">https://www.anquanke.com/member.html?memberId=146878</a></p><h3 id="2021-05-26"><a href="#2021-05-26" class="headerlink" title="2021.05.26"></a>2021.05.26</h3><p>1、fuzz linux kernel</p><p><a href="https://docs.google.com/presentation/d/19JaXHFMT-R2le6x-vPKw5D1Cxlw2aLtxHEIDwWBNXCQ/edit#slide=id.gda44520c30_7_54">https://docs.google.com/presentation/d/19JaXHFMT-R2le6x-vPKw5D1Cxlw2aLtxHEIDwWBNXCQ/edit#slide=id.gda44520c30_7_54</a></p><h3 id="2021-06-09"><a href="#2021-06-09" class="headerlink" title="2021.06.09"></a>2021.06.09</h3><p>1、Pwn学习笔记</p><p><a href="https://bbs.pediy.com/thread-266142.htm">https://bbs.pediy.com/thread-266142.htm</a></p><p>2、通过GDB调试学习堆</p><p><a href="https://bbs.pediy.com/thread-266934.htm">https://bbs.pediy.com/thread-266934.htm</a></p><h3 id="2021-07-29"><a href="#2021-07-29" class="headerlink" title="2021.07.29"></a>2021.07.29</h3><p>1、一款家用路由器漏洞分析</p><p><a href="https://bbs.pediy.com/thread-268623.htm">https://bbs.pediy.com/thread-268623.htm</a></p><h3 id="2021-08-25"><a href="#2021-08-25" class="headerlink" title="2021.08.25"></a>2021.08.25</h3><p>1、D-Link DIR-645路由器溢出分析</p><p><a href="https://bbs.pediy.com/thread-269063.htm">https://bbs.pediy.com/thread-269063.htm</a></p><h3 id="2021-08-27"><a href="#2021-08-27" class="headerlink" title="2021.08.27"></a>2021.08.27</h3><p>1、Exploiting the Promise.allsettled bug in V8</p><p>主要是360挖掘的一个piexl4 远程提权的漏洞过程</p><p><a href="https://vul.360.net/archives/144">https://vul.360.net/archives/144</a></p><p>2、Escape from chrome sandbox to root</p><p>这是讲的沙箱部分到提权</p><p><a href="https://vul.360.net/archives/217">https://vul.360.net/archives/217</a></p><h3 id="2021-09-06"><a href="#2021-09-06" class="headerlink" title="2021.09.06"></a>2021.09.06</h3><p>1、一款全平台的黑客手册，其中涵盖了基于所有平台所有方向。</p><p><a href="https://book.hacktricks.xyz/">https://book.hacktricks.xyz/</a></p><h3 id="2021-10-06"><a href="#2021-10-06" class="headerlink" title="2021.10.06"></a>2021.10.06</h3><p>1、一篇关于堆的利用的文章，内容很全面，根据真实的漏洞案例分析</p><p><a href="https://github.com/hac425xxx/heap-exploitation-in-real-world">https://github.com/hac425xxx/heap-exploitation-in-real-world</a></p><h3 id="2021-11-17"><a href="#2021-11-17" class="headerlink" title="2021.11.17"></a>2021.11.17</h3><p>1、如何学习C++</p><p><a href="https://github.com/linyacool/WebServer">https://github.com/linyacool/WebServer</a></p><p>可以仿照这个写一个webserver</p><p>抄侯捷stl书</p><p>stl食用方法<a href="http://www.alinshans.com/2017/09/18/p1709181/">http://www.alinshans.com/2017/09/18/p1709181/</a></p><p>Sakura的stl，仅供参考<a href="https://github.com/eternalsakura/sakura_stl">https://github.com/eternalsakura/sakura_stl</a></p><p>2、初学漏洞挖掘的练习网站</p><p>①、这个类似于CTF-wiki，不过内容是不一样的。</p><p><a href="https://guyinatuxedo.github.io/index.html">https://guyinatuxedo.github.io/index.html</a></p><p>②、练习pwn题目的网站，虽然国内也有buuctf，但是题目质量参差不齐，练习题目还是适合用国际赛事或者质量比较高的赛事。</p><p><a href="https://pwnable.tw/challenge/">https://pwnable.tw/challenge/</a></p><p>3、漏洞利用相关的书籍</p><p><a href="https://github.com/hdbreaker/ExploitingBooks">https://github.com/hdbreaker/ExploitingBooks</a></p><p>其中有本代码审计的艺术值得学习</p><p>4、 kernel pwn  入门指南，内容不错</p><p><a href="https://www.anquanke.com/post/id/258874">https://www.anquanke.com/post/id/258874</a></p><p>两道题目，kernel pwn</p><p><a href="https://www.anquanke.com/post/id/258146">https://www.anquanke.com/post/id/258146</a></p><p>5、网络协议fuzz，练习材料超级马里奥</p><p><a href="https://github.com/RUB-SysSec/nyx-net">https://github.com/RUB-SysSec/nyx-net</a></p><p>6、AFL++ for andoid + QEMU</p><p><a href="https://alephsecurity.com/2021/11/16/fuzzing-qemu-android/">https://alephsecurity.com/2021/11/16/fuzzing-qemu-android/</a></p><p>fuzz闭源Android代码</p><h3 id="2021-11-18"><a href="#2021-11-18" class="headerlink" title="2021.11.18"></a>2021.11.18</h3><p>1、seedlab Ret2libc 与ROP writeUp </p><p><a href="https://www.anquanke.com/post/id/258025">https://www.anquanke.com/post/id/258025</a></p><p>2、从黑盒到灰盒再到pwn-教育平板挖掘</p><p><a href="https://tttang.com/archive/1327/">https://tttang.com/archive/1327/</a></p><p>3、pwn college Arizona State University 大学发起的一门关于二进制安全的课程，像现在向全世界开放该课题</p><p><a href="https://pwn.college/">https://pwn.college/</a></p><h3 id="2021-11-24"><a href="#2021-11-24" class="headerlink" title="2021.11.24"></a>2021.11.24</h3><p>1、oos-fuzz</p><p>oss-fuzz上面有很多针对第三方库的fuzz，它都是部署成了docker，所以很方便的拉下来在本地测试。</p><p>想改进的话，也可以看看里面原先放着的fuzz长什么样，能不能想到比它的更好的思路。</p><p><a href="https://github.com/google/oss-fuzz/tree/master/projects">https://github.com/google/oss-fuzz/tree/master/projects</a></p><p>2、对QEMU Device Fuzzer的优化</p><p><a href="https://qiuhao.org/CN_QEMU_device_fuzzer_fork_based_on_ops_weight.pdf">https://qiuhao.org/CN_QEMU_device_fuzzer_fork_based_on_ops_weight.pdf</a></p><p><a href="https://lists.gnu.org/archive/html/qemu-devel/2021-01/msg01722.html">https://lists.gnu.org/archive/html/qemu-devel/2021-01/msg01722.html</a></p><p>3、来自于github安全团队的系列文章</p><p>其中就讲述到使用oos-fuzz来进行实战</p><p><a href="https://github.blog/2021-11-02-blue-teaming-create-security-advisory-process/">https://github.blog/2021-11-02-blue-teaming-create-security-advisory-process/</a></p><h3 id="2021-11-25"><a href="#2021-11-25" class="headerlink" title="2021.11.25"></a>2021.11.25</h3><p>1、对初学者的漏洞挖掘指南</p><p>①、<a href="https://github.com/antonio-morales/Fuzzing101">https://github.com/antonio-morales/Fuzzing101</a></p><p>对AFL的使用完全没有经验的同学请从这个项目开始练手，完成里面的每个练习并记录下笔记。</p><p>②、<a href="https://lcamtuf.blogspot.com/2015/01/afl-fuzz-making-up-grammar-with.htmlhttps://lcamtuf.blogspot.com/2015/04/finding-bugs-in-sqlite-easy-way.html">https://lcamtuf.blogspot.com/2015/01/afl-fuzz-making-up-grammar-with.htmlhttps://lcamtuf.blogspot.com/2015/04/finding-bugs-in-sqlite-easy-way.html</a></p><p>这篇文章里提到了一个小trick，你可以通过-x testcases/_extras/sql.dict来指定一组token，从而让AFL遇到这些token关键字的时候将其作为一个整体识别，而不破坏关键字，要尝试这个思路可能要选择比较老的sqlite来fuzz。</p><p>③、<a href="https://www.mcafee.com/blogs/other-blogs/mcafee-labs/vulnerability-discovery-in-open-source-libraries-part-1-tools-of-the-trade/">https://www.mcafee.com/blogs/other-blogs/mcafee-labs/vulnerability-discovery-in-open-source-libraries-part-1-tools-of-the-trade/</a></p><p><a href="https://www.mcafee.com/blogs/other-blogs/mcafee-labs/fuzzing-imagemagick-and-digging-deeper-into-cve-2020-27829/">https://www.mcafee.com/blogs/other-blogs/mcafee-labs/fuzzing-imagemagick-and-digging-deeper-into-cve-2020-27829/</a></p><p>mcafee团队使用afl对开源库进行的fuzz，很常规的方法，不过意外的收获了很多cve。</p><p>④、<a href="https://www.shielder.it/blog/2021/02/hunting-for-bugs-in-telegrams-animated-stickers-remote-attack-surface/">https://www.shielder.it/blog/2021/02/hunting-for-bugs-in-telegrams-animated-stickers-remote-attack-surface/</a></p><p>通过 Fuzz 发现 Telegram’s animated stickers 的远程攻击漏洞，虽然作者并没有实现完整的0-click漏洞利用，但是它审查攻击面和快速进行Fuzz的思路仍然值得借鉴。</p><h3 id="2021-11-27"><a href="#2021-11-27" class="headerlink" title="2021.11.27"></a>2021.11.27</h3><p>1、该博客作者使用libFuzz来对fuzzing 101进行复现实战</p><p><a href="https://epi052.gitlab.io/notes-to-self/blog/2021-11-20-fuzzing-101-with-libafl-part-3/">https://epi052.gitlab.io/notes-to-self/blog/2021-11-20-fuzzing-101-with-libafl-part-3/</a></p><h3 id="2021-12-03"><a href="#2021-12-03" class="headerlink" title="2021.12.03"></a>2021.12.03</h3><p>1、今天在看泉哥博客中推荐的半自动化挖洞工具Jandroid的使用，发现是基于反编译代码进行的trace，在阅读其插件代码时还是挺吃力的，看来只能动态调试该代码。</p><p>目测来看和数据流污点分析技术的大同小异，都是需要去标点漏洞链</p><p><a href="https://riusksk.me/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/">https://riusksk.me/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</a></p><p><a href="https://labs.f-secure.com/blog/automating-pwn2own-with-jandroid/">https://labs.f-secure.com/blog/automating-pwn2own-with-jandroid/</a></p><h3 id="2021-12-04"><a href="#2021-12-04" class="headerlink" title="2021.12.04"></a>2021.12.04</h3><p>1、360安全研究员 2019年的演讲 the Binder to root</p><p>cve-2019-2025</p><p>[<a href="https://conference.hitb.org/hitbsecconf2019ams/materials/D2T2%20-%20Binder%20-%20The%20Bridge%20to%20Root%20-%20Hongli%20Han%20&amp;%20Mingjian%20Zhou.pdf]">https://conference.hitb.org/hitbsecconf2019ams/materials/D2T2%20-%20Binder%20-%20The%20Bridge%20to%20Root%20-%20Hongli%20Han%20&amp;%20Mingjian%20Zhou.pdf]</a>(<a href="https://conference.hitb.org/hitbsecconf2019ams/materials/D2T2">https://conference.hitb.org/hitbsecconf2019ams/materials/D2T2</a> - Binder - The Bridge to Root - Hongli Han &amp; Mingjian Zhou.pdf)</p><p>2、一个攻击链来root Android手机</p><p><a href="https://github.com/secmob/TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices">https://github.com/secmob/TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices</a></p><p>3、Poc for Android RCE CVE-2019-2107</p><p><a href="https://github.com/marcinguy/CVE-2019-2107">https://github.com/marcinguy/CVE-2019-2107</a></p><p>该作者框架下含有多个Android RCE的分析文章</p><p><a href="https://github.com/marcinguy">https://github.com/marcinguy</a></p><p>4、Android kernel CVE POC集合</p><p><a href="https://github.com/ScottyBauer/Android_Kernel_CVE_POCs">https://github.com/ScottyBauer/Android_Kernel_CVE_POCs</a></p><p>5、Linux-kernel-exploitation 一个持续更新的博文</p><p><a href="https://github.com/xairy/linux-kernel-exploitation">https://github.com/xairy/linux-kernel-exploitation</a></p><p><a href="https://github.com/xairy/kernel-exploits">https://github.com/xairy/kernel-exploits</a></p><p>6、如何去利用一个double free</p><p><a href="https://github.com/stong/how-to-exploit-a-double-free">https://github.com/stong/how-to-exploit-a-double-free</a></p><p>7、讲解llvm编译器的系列文章，在fuzz过程中是可以采用该编译器器</p><p><a href="https://blog.yossarian.net/series">https://blog.yossarian.net/series</a></p><p>8、一些包含多个漏洞的Android APP 挑战题目</p><p><a href="https://github.com/B3nac/InjuredAndroid">https://github.com/B3nac/InjuredAndroid</a></p><p><a href="https://github.com/dineshshetty/Android-InsecureBankv2">https://github.com/dineshshetty/Android-InsecureBankv2</a></p><p><a href="https://github.com/RavikumarRamesh/hpAndro1337">https://github.com/RavikumarRamesh/hpAndro1337</a></p><p><a href="https://github.com/OWASP/MSTG-Hacking-Playground">https://github.com/OWASP/MSTG-Hacking-Playground</a></p><p><a href="https://github.com/OWASP/owasp-mstg/tree/master/Crackmes">https://github.com/OWASP/owasp-mstg/tree/master/Crackmes</a></p><p><a href="https://github.com/satishpatnayak/AndroGoat">https://github.com/satishpatnayak/AndroGoat</a></p><p><a href="https://github.com/rewanthtammana/Damn-Vulnerable-Bank">https://github.com/rewanthtammana/Damn-Vulnerable-Bank</a></p><p>[</p><p>](<a href="https://github.com/B3nac/InjuredAndroid)9%E3%80%81Android%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%A1%A8">https://github.com/B3nac/InjuredAndroid)9、Android安全检查表</a> webview</p><p>该博客下面有好几篇挺新的漏洞分析文章</p><p><a href="https://blog.oversecured.com/">https://blog.oversecured.com/</a></p><p><a href="https://blog.oversecured.com/Android-security-checklist-webview/">https://blog.oversecured.com/Android-security-checklist-webview/</a></p><p>10、Android版本的TikTok组合漏洞分析</p><p>多个XSS利用</p><p>启动任意组件</p><p>最后RCE</p><p><a href="https://dphoeniixx.medium.com/tiktok-for-android-1-click-rce-240266e78105">https://dphoeniixx.medium.com/tiktok-for-android-1-click-rce-240266e78105</a></p><p>11、讲解Android Webview的漏洞利用</p><p><a href="https://www.nuckingfoob.me/android-webview-csp-iframe-sandbox-bypass/index.html">https://www.nuckingfoob.me/android-webview-csp-iframe-sandbox-bypass/index.html</a></p><p>12、Android漏洞CVE 的poc</p><p><a href="https://github.com/jiayy/android_vuln_poc-exp">https://github.com/jiayy/android_vuln_poc-exp</a></p><h3 id="2021-12-05"><a href="#2021-12-05" class="headerlink" title="2021.12.05"></a>2021.12.05</h3><p>1、高级二进制仿真框架</p><p><a href="https://github.com/qilingframework/qiling">https://github.com/qilingframework/qiling</a></p><p>2、syzkaller 一款fuzz工具</p><p><a href="https://github.com/google/syzkaller">https://github.com/google/syzkaller</a></p><h3 id="2021-12-06"><a href="#2021-12-06" class="headerlink" title="2021.12.06"></a>2021.12.06</h3><p>1、CVE-2021-42008 利用Linux 6pack驱动程序中存在的16年的漏洞</p><p><a href="https://syst3mfailure.io/sixpack-slab-out-of-bounds">https://syst3mfailure.io/sixpack-slab-out-of-bounds</a></p><p>作者开源了利用的exp来提权，不可多得的文章</p><p><a href="https://github.com/0xdevil/CVE-2021-42008">https://github.com/0xdevil/CVE-2021-42008</a></p><h3 id="2021-12-08"><a href="#2021-12-08" class="headerlink" title="2021.12.08"></a>2021.12.08</h3><p>1、基于管理程序的快照fuzz工具</p><p>建立在KAFL、Redqueen之上，并且含有相关的论文paper</p><p><a href="https://github.com/RUB-SysSec/nyx-net">https://github.com/RUB-SysSec/nyx-net</a></p><h3 id="2021-12-16-1"><a href="#2021-12-16-1" class="headerlink" title="2021.12.16"></a>2021.12.16</h3><p>1、深入研究 NSO 零点击 iMessage 漏洞：远程代码执行</p><p><a href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html">https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html</a></p><h3 id="2021-12-17"><a href="#2021-12-17" class="headerlink" title="2021.12.17"></a>2021.12.17</h3><p>1、对JVM的进程内的fuzz工具，基于libfuzzer</p><p><a href="https://github.com/CodeIntelligenceTesting/jazzer">https://github.com/CodeIntelligenceTesting/jazzer</a></p><p>2、关于堆的利用，一系列文章</p><p><a href="https://www.52pojie.cn/home.php?mod=space&amp;uid=1573412&amp;do=thread&amp;view=me&amp;from=space">https://www.52pojie.cn/home.php?mod=space&amp;uid=1573412&amp;do=thread&amp;view=me&amp;from=space</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优秀项目收集</title>
    <link href="/2021/12/24/%E4%BC%98%E7%A7%80%E9%A1%B9%E7%9B%AE%E6%94%B6%E9%9B%86/"/>
    <url>/2021/12/24/%E4%BC%98%E7%A7%80%E9%A1%B9%E7%9B%AE%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h3 id="相关项目收集"><a href="#相关项目收集" class="headerlink" title="相关项目收集"></a>相关项目收集</h3><ul><li><a href="https://github.com/chago/ADVMP">ADVMP</a> 一款七年前实现的vmp加固工具</li><li><a href="https://github.com/amimo/dcc">DCC</a> 一款比较新的dex2c的加固工具</li><li><a href="https://github.com/maoabc/nmmp">nmmp</a> 针对dex进行的vmp的保护</li><li><a href="https://geneblue.github.io/2019/09/13/android/sec--android-dex-vmp/">Android Dex-vmp虚拟保护技术</a></li><li>Dex控制流混淆 <a href="https://github.com/CodingGay/BlackObfuscator">BlackObfuscator</a></li><li><a href="https://github.com/DeNA/DeClang">DeClang</a> 一款基于ollvm的混淆工具</li><li><a href="https://github.com/strazzere/android-unpacker">kisskiss</a> 基于特征识别的内存转储脱壳方法</li><li><a href="https://github.com/halfkiss/ZjDroid">zjdroid</a> 基于 Xposed 的动态逆向分析框架</li><li><a href="https://github.com/zyq8709/DexHunter">Dexhunter </a>过修改系统源码实现主动的类加载</li><li><a href="https://github.com/rewhy/adaptiveunpacker">PackerGrind</a>  多层次监控的运行时数据收集 <a href="https://www4.comp.polyu.edu.hk/~csxluo/Packergrind-TSE.pdf">paper</a></li><li><a href="https://github.com/F8LEFT/FUPK3">FUPK3</a>  运行时系统数据提取以及重组</li><li><a href="https://tigress.wtf/">tigress</a> 混淆工具</li><li><a href="https://github.com/asLody/VirtualApp">VirtualApp</a> 一款运行于Android系统的沙盒产品</li><li><a href="https://github.com/CodingGay/BlackDex">BlackDex</a> 一个运行在Android手机上的脱壳工具</li><li><a href="https://github.com/android-hacker/VirtualXposed">VirtualXposed</a> <strong>非ROOT</strong>环境下运行Xposed模块的实现</li><li><a href="https://github.com/heartbee/Va_Fdex2">Fdex2</a> 一款基于VA的脱壳工具</li><li><a href="https://github.com/liumengdeqq/CustomAppVMP">CustomAppVMP</a> 参考ADVMP做的</li><li><a href="https://github.com/These-us/dpt-shell">dpt-shell</a> 函数抽取壳的实现</li></ul>]]></content>
    
    
    <categories>
      
      <category>Android安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android安全</tag>
      
      <tag>Android加固</tag>
      
      <tag>Android脱壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021论文阅读计划——12月</title>
    <link href="/2021/12/24/2021%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92%E2%80%94%E2%80%9412%E6%9C%88/"/>
    <url>/2021/12/24/2021%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92%E2%80%94%E2%80%9412%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个就是来作为论文阅读的计划表，根据搜集的符合自身发展方向以及感兴趣的。论文阅读这这里基本上就是已经完成过大致浏览，都是经过筛选。</p><p>基本上涉及的内容如下</p><blockquote><p>1、Android加固、保护、脱壳相关</p><p>2、Android自动化相关、自动化恶意检测相关</p><p>3、ML、DL应用于二进制相关的论文</p><p>4、其他感兴趣的，暂时没有分类的</p></blockquote><h4 id="阅读要求"><a href="#阅读要求" class="headerlink" title="阅读要求"></a>阅读要求</h4><ul><li><p>精读论文，提炼出论文的核心技术和知识点</p></li><li><p>通过检索网站去寻求该论文的相关连的论文或者是被引用</p></li><li><p>尝试实现论文技术的落地应用（这个可以先寻找作者的实现，或者结合多个论文一起实现落地）</p></li></ul><h3 id="论文阅读助手"><a href="#论文阅读助手" class="headerlink" title="论文阅读助手"></a>论文阅读助手</h3><p>首选是论文搜索引擎</p><p>1、<a href="https://scholar.google.com.hk/?hl=zh-CN">google 学术</a></p><p>这个搜索引擎比较的全面，而且内容也是可以直接使用语法来进行搜索</p><p>2、<a href="https://www.semanticscholar.org/">semantic scholar</a></p><p>个人使用感觉会比google的好用，在搜索的论文中还会展示论文被那些论文引用，该论文中的引用，还会直观的显示论文是否可以直接被下载，缺点就是对中文论文的涉及很少。</p><p>3、<a href="https://chn.oversea.cnki.net/index/">中国知网海外版</a></p><p>在海外版本中是可以直接下载PDF论文的，这个比国内版好用很多。</p><p>辅助论文分析</p><p>1、<a href="https://www.paper-digest.com/">Paper digest</a></p><p>这是一款快速提取论文中的关键字的网站，可以提炼论文，在泛读论文的时候是可以用一下的。</p><p>2、<a href="https://www.deepl.com/translator/files">DeepL Translator</a></p><p>一款能够直接把pdf、word、ppt类的文档直接翻译成任何一种语言的网站，还是挺好用的。</p><p>3、<a href="https://www.connectedpapers.com/">connected papers</a></p><p>这款论文查看器，可以将相近的和引用的论文进行可视化，形成一个关系图，并且可以阅读和下载其他论文，缺点就是搜索不太方便，需要配合上面的论文搜索引擎来做。</p><p>4、<a href="https://researchrabbitapp.com/home">researchabbit</a></p><p>这款功能上和connected paper相似，但是界面做的非常丰富，是我最喜欢的一个论文关系网查看的界面，非常人性化，缺点可能都是很少覆盖中文论文</p><h3 id="论文列表"><a href="#论文列表" class="headerlink" title="论文列表"></a>论文列表</h3><h5 id="撤销内核错误的解决办法（undo-workarounds-for-kernel-bugs）"><a href="#撤销内核错误的解决办法（undo-workarounds-for-kernel-bugs）" class="headerlink" title="撤销内核错误的解决办法（undo workarounds for kernel bugs）"></a>撤销内核错误的解决办法（<a href="https://www.usenix.org/conference/usenixsecurity21/presentation/talebi">undo workarounds for kernel bugs</a>）</h5><blockquote><p>在发现内核漏洞后，通常在完成补丁修复是需要去推动上游，本篇论文就是去自动生成patch来缓解漏洞的危害，为了有效的缓解漏洞，论文中提供了一款Hecaton的静态分析工具，通过对Android设备的内核进行评估，发现这种方法是可以有效的缓解内核错误和漏洞。</p></blockquote><h5 id="通过Log-Guided-fuzz去发现-SmartTVs-漏洞（Android-SmartTVs-Vulnerability-Discoverry-via-Log-Guided-Fuzzing）"><a href="#通过Log-Guided-fuzz去发现-SmartTVs-漏洞（Android-SmartTVs-Vulnerability-Discoverry-via-Log-Guided-Fuzzing）" class="headerlink" title="通过Log-Guided fuzz去发现 SmartTVs 漏洞（Android SmartTVs Vulnerability Discoverry via Log-Guided Fuzzing）"></a>通过Log-Guided fuzz去发现 SmartTVs 漏洞（<a href="https://www.usenix.org/conference/usenixsecurity21/presentation/aafer">Android SmartTVs Vulnerability Discoverry via Log-Guided Fuzzing</a>）</h5><blockquote><p>一种新颖的动态模糊测试技术，来对SmartTVs这类物联网设备进行fuzz，利用该技术分析了11个电视盒子，并且发现了37个独特的漏洞，高危网络威胁，可以破坏启动环境设置，内存损坏等等。</p></blockquote><h5 id="Android内核补丁生态系统研究（An-Investigation-of-the-Android-kernel-Patch-Ecosystem）"><a href="#Android内核补丁生态系统研究（An-Investigation-of-the-Android-kernel-Patch-Ecosystem）" class="headerlink" title="Android内核补丁生态系统研究（An Investigation of the Android kernel Patch Ecosystem）"></a>Android内核补丁生态系统研究（<a href="https://www.usenix.org/conference/usenixsecurity21/presentation/zhang-zheng">An Investigation of the Android kernel Patch Ecosystem</a>）</h5><blockquote><p>对Android内核生态系统中的补丁传播行为进行研究，分析Android安全公告发布以来可用的CVE和补丁，以及开源的内核（例如Linux和AOSP）和数百个主要是二进制的OEM内核。</p></blockquote><h5 id="SelectiveTaint-使用静态二进制重写进行高效的数据流跟踪（SelectiveTaint：Efficient-Data-Flow-Tracking-With-Static-Binary）"><a href="#SelectiveTaint-使用静态二进制重写进行高效的数据流跟踪（SelectiveTaint：Efficient-Data-Flow-Tracking-With-Static-Binary）" class="headerlink" title="SelectiveTaint:使用静态二进制重写进行高效的数据流跟踪（SelectiveTaint：Efficient Data Flow Tracking With Static Binary）"></a>SelectiveTaint:使用静态二进制重写进行高效的数据流跟踪（<a href="https://www.usenix.org/conference/usenixsecurity21/presentation/chen-sanchuan">SelectiveTaint：Efficient Data Flow Tracking With Static Binary</a>）</h5><blockquote><p>SelectiveTaint静态扫描二进制代码中感兴趣的污染源，想比传统的libdft来讲，性能是的到挺大的提升。</p></blockquote><h5 id="使用近端梯度进行细粒度数据流跟踪（Fine-Grained-Dataflow-Tracking-with-Proximal-Gradients）"><a href="#使用近端梯度进行细粒度数据流跟踪（Fine-Grained-Dataflow-Tracking-with-Proximal-Gradients）" class="headerlink" title="使用近端梯度进行细粒度数据流跟踪（Fine Grained Dataflow Tracking with Proximal Gradients）"></a>使用近端梯度进行细粒度数据流跟踪（<a href="https://www.usenix.org/conference/usenixsecurity21/presentation/ryan">Fine Grained Dataflow Tracking with Proximal Gradients</a>）</h5><blockquote><p>使用动态污点分析进行数据流跟踪是系统安全中的一种重要方法，近端梯度分析，是一种新颖的、具有理论基础的方法，可以跟踪更加准确和细粒度的数据流信息。在真实的测试过程中，发现22个漏洞，20个已经被确认，2个侧信道泄露。</p></blockquote><h5 id="Android内核的自动化热补丁生成（Automatic-Hot-Patch-Generation-for-Android-Kernel）"><a href="#Android内核的自动化热补丁生成（Automatic-Hot-Patch-Generation-for-Android-Kernel）" class="headerlink" title="Android内核的自动化热补丁生成（Automatic Hot Patch Generation for Android Kernel）"></a>Android内核的自动化热补丁生成（<a href="https://www.usenix.org/conference/usenixsecurity20/presentation/xu">Automatic Hot Patch Generation for Android Kernel</a>）</h5><blockquote><p>研究了2012到2016年373个Android内核CVE自动生成漏洞补丁的可行性，开发了一款自动热补丁生成工具——VULMET，该工具通过学习官方补丁来生成保留语义的热补丁。实验表明，该工具可以为真实的android内核CVE生成正确的热补丁。</p></blockquote><h5 id="计算机安全中机器学习的注意事项（Dos-and-Don’ts-of-Machine-Learning-in-Computer-Security）"><a href="#计算机安全中机器学习的注意事项（Dos-and-Don’ts-of-Machine-Learning-in-Computer-Security）" class="headerlink" title="计算机安全中机器学习的注意事项（Dos and Don’ts of Machine Learning in Computer Security）"></a>计算机安全中机器学习的注意事项（<a href="https://www.usenix.org/conference/usenixsecurity22/presentation/arp">Dos and Don’ts of Machine Learning in Computer Security</a>）</h5><blockquote><p>在本文中，我们以批判的眼光看待这个问题。首先，我们确定了基于学习的安全系统的设计、实施和评估中的常见缺陷。我们对过去 10 年顶级安全会议的 30 篇论文进行了研究，证实这些陷阱在当前的安全文献中很普遍。在实证分析中，我们进一步证明了个别陷阱如何导致不切实际的性能和解释，阻碍对手头安全问题的理解。作为补救措施，我们提出了可操作的建议，以支持研究人员尽可能避免或减轻陷阱。此外，我们在将机器学习应用于安全时发现了开放性问题，并为进一步研究提供了方向。</p></blockquote><h5 id="2021安全相关论文合集（合集地址）"><a href="#2021安全相关论文合集（合集地址）" class="headerlink" title="2021安全相关论文合集（合集地址）"></a>2021安全相关论文合集（<a href="https://mp.weixin.qq.com/s/zOSSwAl-Ax41Kx6OB_-6vQ">合集地址</a>）</h5><blockquote><p>这是上海交通大学安全小组的论文年度总结，其中包含了这一年中安全相关的论文。</p></blockquote><h5 id="MUZZ：线程感知灰盒模糊测试，用于在多线程程序中进行有效的错误搜索（MUZZ-Thread-aware-Grey-box-Fuzzing-for-Effective-Bug-Hunting-in-Multithreaded-Programs）"><a href="#MUZZ：线程感知灰盒模糊测试，用于在多线程程序中进行有效的错误搜索（MUZZ-Thread-aware-Grey-box-Fuzzing-for-Effective-Bug-Hunting-in-Multithreaded-Programs）" class="headerlink" title="MUZZ：线程感知灰盒模糊测试，用于在多线程程序中进行有效的错误搜索（MUZZ: Thread-aware Grey-box Fuzzing for Effective Bug Hunting in Multithreaded Programs）"></a>MUZZ：线程感知灰盒模糊测试，用于在多线程程序中进行有效的错误搜索（<a href="https://www.usenix.org/conference/usenixsecurity20/presentation/chen-hongxu">MUZZ: Thread-aware Grey-box Fuzzing for Effective Bug Hunting in Multithreaded Programs</a>）</h5><blockquote><p>我们在十二个真实世界的多线程程序上评估 Muzz。实验表明，Muzz 在与多线程相关的种子生成和并发漏洞检测方面都优于 AFL。此外，通过针对生成的种子重放目标程序，Muzz 还揭示了比 AFL 更多的并发错误（例如，数据竞争、线程泄漏）。Muzz 总共检测到 8 个新的并发漏洞和 19 个新的并发错误。在撰写本文时，已报告的四个问题已收到 CVE ID。</p></blockquote><h5 id="使用上下文敏感的软件故障注入模糊错误处理代码（Fuzzing-Error-Handling-Code-using-Context-Sensitive-Software-Fault-Injection）"><a href="#使用上下文敏感的软件故障注入模糊错误处理代码（Fuzzing-Error-Handling-Code-using-Context-Sensitive-Software-Fault-Injection）" class="headerlink" title="使用上下文敏感的软件故障注入模糊错误处理代码（Fuzzing Error Handling Code using Context-Sensitive Software Fault Injection）"></a>使用上下文敏感的软件故障注入模糊错误处理代码（<a href="https://www.usenix.org/conference/usenixsecurity20/presentation/jiang">Fuzzing Error Handling Code using Context-Sensitive Software Fault Injection</a>）</h5><blockquote><p>在本文中，我们提出了一种名为 FIFUZZ 的新模糊测试框架，以有效地测试错误处理代码并检测错误。FIFUZZ的核心是一种上下文敏感的软件故障注入（SFI）方法，它可以有效地覆盖不同调用上下文中的错误处理代码，以发现隐藏在复杂上下文的错误处理代码中的深层错误。我们已经实现了 FIFUZZ 并在 9 个广泛使用的 C 程序上对其进行了评估。它报告了 317 个警报，这些警报是由 50 个独特错误引起的根本原因。其中 32 个错误已得到相关开发人员的确认。我们还将 FIFUZZ 与现有的模糊测试工具（包括 AFL、AFLFast、AFLSmart 和 FairFuzz）进行了比较，发现 FIFUZZ 发现了这些工具遗漏的许多错误。</p></blockquote><h5 id="parema-基于虚拟机的Android打包解包框架（parema-An-Unpacking-Framework-for-Demystifying-VM-Based-Android-Packers）"><a href="#parema-基于虚拟机的Android打包解包框架（parema-An-Unpacking-Framework-for-Demystifying-VM-Based-Android-Packers）" class="headerlink" title="parema 基于虚拟机的Android打包解包框架（parema An Unpacking Framework for Demystifying VM-Based Android Packers）"></a>parema 基于虚拟机的Android打包解包框架（parema An Unpacking Framework for Demystifying VM-Based Android Packers）</h5><blockquote><p>安卓打包程序已经被开发者广泛采用，以保护应用程序不被剽窃。与此同时，各种解包工具通过直接内存倾倒来解包应用程序。为了抵御这些现成的解包工具，打包者开始采用基于虚拟机（VM）的保护技术，用内存中的定制字节码（PCode）取代原来的Dalvik字节码（DCode）。这击败了使用内存转储机制的解压器。然而，对于这种打包器是否能为安卓应用提供足够的保护，我们知之甚少。</p></blockquote><h5 id="PackerGrind-一种适用于Android应用程序的解包系统（PackerGrind-An-Adaptive-Unpacking-System-for-Android-Apps）"><a href="#PackerGrind-一种适用于Android应用程序的解包系统（PackerGrind-An-Adaptive-Unpacking-System-for-Android-Apps）" class="headerlink" title="PackerGrind 一种适用于Android应用程序的解包系统（PackerGrind: An Adaptive Unpacking System for Android Apps）"></a>PackerGrind 一种适用于Android应用程序的解包系统（PackerGrind: An Adaptive Unpacking System for Android Apps）</h5><blockquote><p>我们开发了一个新的系统，称为PackerGrind，基于这种自适应方法来解开Android打包程序。对实际打包应用程序的评估表明，PackerGrind可以成功地揭示打包程序的保护机制，有效地处理它们的演变，并以较低的开销恢复Dex文件。应用程序开发人员越来越多地使用打包服务（或打包程序）来保护其代码不被反向工程或修改。然而，恶意开发者也利用这种打包技术来防止恶意软件被静态恶意软件分析和检测系统分析和检测。虽然已经有关于打开包装的Android应用程序包装的研究，但它们通常利用手动反向工程包装行为来打开特定打包者打包的应用程序，而不能适用于进化的和新的打包者。本文提出了一种能够适应进化和新遇到的封隔器解包的新的解包方法。同时，我们开发了一个新的系统，称为PackerGrind，基于这种自适应方法来解开Android打包程序。对实际打包应用程序的评估表明，PackerGrind可以成功地揭示打包程序的保护机制，有效地处理它们的演化，并以较低的开销恢复Dex文件。</p></blockquote><h5 id="Obfuscator-LLVM-面向大众的软件保护（Obfuscator-LLVM-—-Software-Protection-for-the-Masses）"><a href="#Obfuscator-LLVM-面向大众的软件保护（Obfuscator-LLVM-—-Software-Protection-for-the-Masses）" class="headerlink" title="Obfuscator-LLVM 面向大众的软件保护（Obfuscator-LLVM — Software Protection for the Masses）"></a>Obfuscator-LLVM 面向大众的软件保护（Obfuscator-LLVM — Software Protection for the Masses）</h5><blockquote><p>实际上，保护一个软件不受篡改、恶意修改或反向工程的影响是一项非常困难的任务。本文提出并讨论了一个基于LLVM编译套件的软件混淆原型工具。我们的工具构建为不同的通道，其中一些通道是开放源代码的，并且是免费提供的，该工具用于LLVM中间表示（IR）代码。这种方法带来了几个优点，包括它与语言无关，并且基本上独立于目标体系结构。我们目前的原型支持基本指令替换、插入与不透明谓词混合的伪控件结构、控件注意、过程合并以及直接在控件注意机制中嵌入代码和数据校验和的代码防篡改算法。</p></blockquote><h5 id="Happer：通过硬件辅助方法解包Android应用程序（Happer-Unpacking-Android-Apps-via-a-Hardware-Assisted-Approach）"><a href="#Happer：通过硬件辅助方法解包Android应用程序（Happer-Unpacking-Android-Apps-via-a-Hardware-Assisted-Approach）" class="headerlink" title="Happer：通过硬件辅助方法解包Android应用程序（Happer: Unpacking Android Apps via a Hardware-Assisted Approach）"></a>Happer：通过硬件辅助方法解包Android应用程序（Happer: Unpacking Android Apps via a Hardware-Assisted Approach）</h5><blockquote><p>在本文中，我们提出了一种新的硬件辅助方法，该方法首先监控打包行为，然后选择合适的方法来解包打包的应用程序。此外，我们还开发了一个名为Happer的原型，该原型使用了一种特定于领域的语言，名为行为描述语言（behavior description language，BDL），以便在解决了一些技术难题后，能够方便地扩展Happer。我们用12个商用安卓打包机和超过24k个安卓应用程序进行了广泛的实验，以评估Happer。结果表明，Happer观察到27种堆积行为，其中17种尚未被先前的研究阐明。根据观察到的打包行为，Happer采用适当的方法收集所有隐藏的Dex数据，并将其组装为有效的Dex文件。</p></blockquote><h5 id="FlowDroid：针对Android应用程序的精确上下文、流、场、对象敏感和生命周期感知污染分析（FlowDroid-Precise-Context-Flow-Field-Object-sensitive-and-Lifecycle-aware-Taint-Analysis-for-Android-Apps）"><a href="#FlowDroid：针对Android应用程序的精确上下文、流、场、对象敏感和生命周期感知污染分析（FlowDroid-Precise-Context-Flow-Field-Object-sensitive-and-Lifecycle-aware-Taint-Analysis-for-Android-Apps）" class="headerlink" title="FlowDroid：针对Android应用程序的精确上下文、流、场、对象敏感和生命周期感知污染分析（FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps）"></a>FlowDroid：针对Android应用程序的精确上下文、流、场、对象敏感和生命周期感知污染分析（FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps）</h5><blockquote><p>在这项工作中，我们介绍了FLOWDROID，一种针对Android应用程序的新颖且高度精确的静态污染分析。Android生命周期的精确模型允许分析正确处理Android框架调用的回调，而上下文、流量、字段和对象敏感性允许分析减少错误警报的数量。新颖的按需算法有助于FLOWDROID同时保持高效率和高精度。我们还提出了DROIDBENCH，这是一个开放的测试套件，用于评估专门用于Android应用程序的污染分析工具的有效性和准确性。正如我们使用SecuriBench Micro、DROIDBENCH和一组著名的Android测试应用程序进行的一组实验所显示的那样，FLOWDROID在保持低误报率的同时发现了非常高比例的数据泄漏。在DROIDBENCH上，FLOWDROID实现了93%的召回率和86%的准确率，大大优于商业工具IBM AppScan Source和Fortify SCA。FLOWDROID成功地在Google Play的500个应用程序和VirusShare项目的1000个恶意软件应用程序中发现漏洞。</p></blockquote><h5 id="利用二进制代码虚拟化保护Android应用程序免受应用程序重新打包（Exploiting-Binary-level-Code-Virtualization-to-Protect-Android-Applications-Against-App-Repackaging）"><a href="#利用二进制代码虚拟化保护Android应用程序免受应用程序重新打包（Exploiting-Binary-level-Code-Virtualization-to-Protect-Android-Applications-Against-App-Repackaging）" class="headerlink" title="利用二进制代码虚拟化保护Android应用程序免受应用程序重新打包（Exploiting Binary-level Code Virtualization to Protect Android Applications Against App Repackaging）"></a>利用二进制代码虚拟化保护Android应用程序免受应用程序重新打包（Exploiting Binary-level Code Virtualization to Protect Android Applications Against App Repackaging）</h5><blockquote><p>本文介绍了CodeCloak，一种新的反重新打包系统，用于在本机代码级别保护Android应用程序。CodeCloak采用二进制级别的代码虚拟化技术来保护目标应用程序。在本机代码级别，它使用新设计的基于堆栈的虚拟化结构来混淆和保护已编译为本机指令的关键算法实现。它利用多种动态代码保护方案来增加运行时程序行为的多样性，旨在增加执行代码反向工程的难度。我们在典型的应用程序重新打包场景下评估CodeClok。实验结果表明，CodeCloak能够以最小的开销有效地保护应用程序免受重新打包攻击。</p></blockquote><h5 id="通过动态字节码调度增强基于虚拟机的代码混淆安全性（Enhance-Virtual-Machine-Based-Code-Obfuscation-SecurityThrough-Dynamic-Bytecode-Scheduling）"><a href="#通过动态字节码调度增强基于虚拟机的代码混淆安全性（Enhance-Virtual-Machine-Based-Code-Obfuscation-SecurityThrough-Dynamic-Bytecode-Scheduling）" class="headerlink" title="通过动态字节码调度增强基于虚拟机的代码混淆安全性（Enhance Virtual-Machine-Based Code Obfuscation SecurityThrough Dynamic Bytecode Scheduling）"></a>通过动态字节码调度增强基于虚拟机的代码混淆安全性（Enhance Virtual-Machine-Based Code Obfuscation SecurityThrough Dynamic Bytecode Scheduling）</h5><blockquote><p>提出了一种新的基于虚拟机的软件保护代码混淆方法Dsvmp。Dsvmp将两种技术结合在一起，提供比以前基于VM的方法更强的代码保护。首先，它使用动态指令调度器随机引导程序执行不同的路径，而不违反不同运行的正确性。通过随机选择程序执行路径，应用程序暴露了多种行为，使得攻击者更难重用从以前运行或类似应用程序收集的知识来发起攻击。其次，它使用多个VM进一步混淆从VM操作码到本机机器指令的映射，以便在运行时将相同的操作码映射到不同的本机指令，从而使代码分析更加困难。我们已经在一个原型系统中实现了Dsvmp，并使用一组广泛使用的应用程序对其进行了评估。实验结果表明，与两种基于虚拟机的商用代码混淆工具相比，Dsvmp在运行时开销和代码大小方面都具有可比性，从而提供了更强的保护。</p></blockquote><h5 id="DexX：Android双层解包框架（A-Double-Layer-Unpacking-Framework-for-Android）"><a href="#DexX：Android双层解包框架（A-Double-Layer-Unpacking-Framework-for-Android）" class="headerlink" title="DexX：Android双层解包框架（A Double Layer Unpacking Framework for Android）"></a>DexX：Android双层解包框架（A Double Layer Unpacking Framework for Android）</h5><blockquote><p>在本文中，我们提出了一个通用的解包框架DexX来提取受这些打包服务保护的dex文件。我们将DexX应用于打包的安卓应用程序，实验结果表明，我们的DexX能够有效、准确地提取和恢复大多数知名商业打包商打包的原始可执行文件（dex文件）</p></blockquote><h5 id="DexHunter：从加固的Android应用中提取隐藏代码（Toward-Extracting-Hidden-Code-from-Packed-Android-Applications）"><a href="#DexHunter：从加固的Android应用中提取隐藏代码（Toward-Extracting-Hidden-Code-from-Packed-Android-Applications）" class="headerlink" title="DexHunter：从加固的Android应用中提取隐藏代码（Toward Extracting Hidden Code from Packed Android Applications）"></a>DexHunter：从加固的Android应用中提取隐藏代码（Toward Extracting Hidden Code from Packed Android Applications）</h5><blockquote><p>在本文中，我们通过回答两个问题对这些服务进行了首次系统调查：（1）这些服务使用的主要技术是什么，以及它们对应用程序的影响？（2） 打包应用程序中的原始dex文件能否恢复？如果是，如何进行？我们不仅展示了他们的技术并评估了他们的效果，还提出并开发了一个名为DexHunter的新系统，用于提取受这些服务保护的dex文件。值得注意的是，DexHunter同时支持Dalvik虚拟机（DVM）和新的Android运行时（ART）。实验结果表明，DexHunter可以有效地从打包的应用程序中提取dex文件。</p></blockquote><h5 id="Android应用程序的编译时代码虚拟化（Compile-time-Code-Virtualization-for-Android-Applications）"><a href="#Android应用程序的编译时代码虚拟化（Compile-time-Code-Virtualization-for-Android-Applications）" class="headerlink" title="Android应用程序的编译时代码虚拟化（Compile-time Code Virtualization for Android Applications）"></a>Android应用程序的编译时代码虚拟化（Compile-time Code Virtualization for Android Applications）</h5><blockquote><p>本文提出了一种将代码虚拟化从 DEX 级别转移到native级别的新方法，该方法具有强大的安全性和良好的隐蔽性，并且成本适中。 我们的方法包含两个组件：预编译和编译时虚拟化。 预编译旨在通过识别和反编译消耗大量执行时间的关键函数来提高性能。 编译时虚拟化建立在广泛使用的 LLVM 编译器框架之上。 它会自动将 DEX 字节码转换为常见的 LLVM 中间表示，其中可以为 DEX 代码应用统一的代码虚拟化通行证。 我们已经实现了我们技术的工作原型 Dex2VM，并将其应用于八个具有代表性的 Android 应用程序。 我们的实验结果表明，所提出的方法可以有效地保护目标代码免受专门为代码虚拟化设计的最先进的代码逆向工程工具的影响，并且只需适度的成本即可实现良好的隐身性。</p></blockquote><h5 id="简要介绍和分析最新的安卓安全问题和方法（Brief-View-and-Analysis-to-Latest-Android-Security-Issues-and-Approaches）"><a href="#简要介绍和分析最新的安卓安全问题和方法（Brief-View-and-Analysis-to-Latest-Android-Security-Issues-and-Approaches）" class="headerlink" title="简要介绍和分析最新的安卓安全问题和方法（Brief View and Analysis to Latest Android Security Issues and Approaches）"></a>简要介绍和分析最新的安卓安全问题和方法（Brief View and Analysis to Latest Android Security Issues and Approaches）</h5><blockquote><p>1.我们介绍了安卓安全的最新情况（第2节），包括安卓恶意软件在过去几年的演变，以及安卓的安全推广。类似的研究并没有解决这一问题，但这对于未来的工作是必要的，因为恶意软件正变得越来越复杂，而对恶意软件的了解对应对措施有很大帮助。此外，安卓系统已经发生了重大变化，各种安全功能可以与现有的检测方法相结合。2.我们对最新研究进行了全面收集和合理分类（第3节）。与以前的研究不同，我们不使用常见的静态/动态/混合分类，因为传统的静态和动态分析具有不可忽略的影响，并且大多数工作结合了多种特征和方法。相反，我们根据他们使用的方法对他们进行分类。我们也对他们的利弊进行了分析。3.通过详细的描述或统计，讨论了现有研究中忽略的一些缺失部分，并介绍了未来工作的一些有希望的方向（第4节）。</p></blockquote><h5 id="Android-Native层二进制代码自动去混淆（Automated-Deobfuscation-of-Android-Native-Binary-Code）"><a href="#Android-Native层二进制代码自动去混淆（Automated-Deobfuscation-of-Android-Native-Binary-Code）" class="headerlink" title="Android Native层二进制代码自动去混淆（Automated Deobfuscation of Android Native Binary Code）"></a>Android Native层二进制代码自动去混淆（Automated Deobfuscation of Android Native Binary Code）</h5><blockquote><p>在本文中，我们提出了 DiANa，这是一个自动化系统，用于促进 Android 应用程序中本地二进制代码的去混淆。 具体来说，给定由 Obfuscator-LLVM（最流行的本机代码混淆器）混淆的二进制文件，DiANa 能够恢复原始控制流图。 据我们所知，DiANa 是第一个旨在解决 Android 原生二进制反混淆问题的系统。 我们在不同的场景中应用了 DiANa，实验结果证明了基于通用相似性比较指标的 DiANa 的有效性。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>论文计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞挖掘指南</title>
    <link href="/2021/12/24/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8C%87%E5%8D%97/"/>
    <url>/2021/12/24/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>既然本文档的标题是漏洞挖掘指南，那为了后续更加方便学习，因此在这里就来好好的做一版漏洞挖掘指南。</p><h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><blockquote><p>涉及的主要是大学中的计算机基本课程，夯实计算机基础。</p></blockquote><h4 id="C-与STL内容"><a href="#C-与STL内容" class="headerlink" title="C++与STL内容"></a>C++与STL内容</h4><blockquote><p>编程是学习漏洞挖掘和代码审计最基础的技能,参考笔记：<a href="https://github.com/Kiprey/Skr_Learning/tree/master/week1-2">https://github.com/Kiprey/Skr_Learning/tree/master/week1-2</a></p></blockquote><p>学习STL无疑是学习侯捷的课程，不会的查看侯捷的书籍</p><p>同时在github上看到了不错的<a href="https://github.com/0voice/cpp_new_features">C++的教程</a>，内容总结得非常不错</p><p><strong>课程资源</strong></p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1Nq9ic1K5ipUJKFke6Hi-RA">https://pan.baidu.com/s/1Nq9ic1K5ipUJKFke6Hi-RA</a> 提取码: 8bpw </p></blockquote><blockquote><p>–来自百度网盘超级会员v5的分享</p></blockquote><p>至于C++语言，在大学都是修过，这里就不过多的推荐教程</p><p>刷一波AcWing的语法基础课</p><blockquote><p>教程<a href="https://www.acwing.com/activity/content/21/">https://www.acwing.com/activity/content/21/</a></p></blockquote><h4 id="CSAPP"><a href="#CSAPP" class="headerlink" title="CSAPP"></a>CSAPP</h4><p>深入学习计算机系统</p><p>斯坦福大学的<a href="https://www.bilibili.com/video/BV1iW411d7hd?spm_id_from=333.999.0.0">CSAPP</a>是很不错的，全英文教学，不过B站有翻译好的</p><p>完成课后作业是很有帮助</p><blockquote><p> <a href="http://csapp.cs.cmu.edu/3e/labs.html">http://csapp.cs.cmu.edu/3e/labs.html</a></p></blockquote><p><a href="https://github.com/Kiprey/Skr_Learning/tree/master/week9-19/CSAPP-Lab">课后作业参考</a></p><p>不过也可以看国内的视频</p><blockquote><p><a href="https://www.bilibili.com/video/BV1kE411X7S5">https://www.bilibili.com/video/BV1kE411X7S5</a></p></blockquote><blockquote><p><a href="https://www.bilibili.com/video/BV1rE41127Re">https://www.bilibili.com/video/BV1rE41127Re</a> </p></blockquote><blockquote><p><a href="https://www.bilibili.com/video/BV1jE411874k">https://www.bilibili.com/video/BV1jE411874k</a></p></blockquote><h4 id="编译原理-CS144"><a href="#编译原理-CS144" class="headerlink" title="编译原理 CS144"></a>编译原理 CS144</h4><blockquote><p>学习编译原理是至关重要的，很多大学都不开设这门课程，但是在实战中或安全研究中会用到大量编译原理的知识。</p></blockquote><p>学习编译原理首推的<a href="https://www.bilibili.com/video/BV1NE411376V?spm_id_from=333.999.0.0">斯坦福的CS143</a></p><p>除此之外，<a href="https://www.bilibili.com/video/BV1zW411t7YE?spm_id_from=333.999.0.0">哈工大的编译原理</a>也是很不错的教程</p><p>SFU大学的编译器。基于LLVM</p><p><a href="http://anoopsarkar.github.io/compilers-class/syllabus.html">http://anoopsarkar.github.io/compilers-class/syllabus.html</a></p><p>学习任务就是自己实现一个小语言的解释器或者编译器</p><p>优秀笔记</p><p>1、<a href="https://github.com/Kiprey/Skr_Learning/tree/master/week3-6">https://github.com/Kiprey/Skr_Learning/tree/master/week3-6</a></p><h4 id="网络编程-unix编程"><a href="#网络编程-unix编程" class="headerlink" title="网络编程/unix编程"></a>网络编程/unix编程</h4><blockquote><p>掌握进程间通信、多进程多线程等等知识</p><p>建议直接跟着《unix网络编程》这本书进行学习，实现相关的功能</p></blockquote><p>可以完成两个基本覆盖知识点的开源项目</p><p>1、<a href="https://github.com/linyacool/WebServer">tinyserver</a></p><p>2、<a href="https://kiprey.github.io/2021/05/WebServer-1/">webServer</a>  <a href="https://github.com/linyacool/WebServer">源码</a></p><p><a href="https://www.bilibili.com/video/BV1TA411q75p?p=1&share_medium=iphone&share_plat=ios&share_source=QQ&share_tag=s_i&timestamp=1616325343&unique_k=HsCpcU">网络编程实战课程</a>还是值得看看的</p><h4 id="编译原理实战——LLVM-IR-Pass代码优化"><a href="#编译原理实战——LLVM-IR-Pass代码优化" class="headerlink" title="编译原理实战——LLVM IR Pass代码优化"></a>编译原理实战——LLVM IR Pass代码优化</h4><p>参考课程：[ <a href="https://uoft-ecosystem.github.io/CSCD70/Slides%20%26%20Recordings.html">多伦多大学课程</a> <a href="https://github.com/UofT-EcoSystem/CSCD70">CSCD70github资料</a></p><p>参考笔记：<a href="https://github.com/Kiprey/Skr_Learning/tree/master/week7-8">https://github.com/Kiprey/Skr_Learning/tree/master/week7-8</a></p><p>学习书籍：<a href="https://github.com/xiaoweiChen/Learn-LLVM-12">学习LLVM12</a></p><p>官方文档：<a href="https://llvm.org/docs/WritingAnLLVMPass.html">LLVM文档</a></p><p>学习教程：1、<a href="https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html">https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html</a></p><p>2、<a href="https://llvm.org/docs/tutorial/index.html">https://llvm.org/docs/tutorial/index.html</a></p><p>3、【首推】<a href="https://github.com/These-us/awesome-llvm-security">https://github.com/These-us/awesome-llvm-security</a></p><p>相关的开源项目</p><p>1、<a href="https://github.com/chenx6/baby_obfuscator">一款基于ollvm魔改工具</a></p><p>2、<a href="https://github.com/veritas501/ToyObfuscator">LLVM增强的ollvm</a></p><p>3、<a href="https://github.com/NudistBeaaach/Chained-CFG-obfuscation-pass">LLVM CFG混淆pass</a></p><p>4、<a href="https://github.com/banach-space/llvm-tutor">A collection of out-of-tree LLVM passes for teaching and learning</a></p><p>5、<a href="https://github.com/chris124567/obfus">使用全新的pass-manager管理llvm pass</a></p><h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><p>CS144 <a href="https://cs144.github.io/">计算机网络</a></p><p>视频链接：<a href="https://www.bilibili.com/video/BV137411Z7LR?from=search&seid=5561201338480593178&spm_id_from=333.337.0.0">CS144</a></p><p>中科大的<a href="https://www.bilibili.com/video/BV1JV411t7ow?p=1">计算机网络</a>课程讲解也是不错的</p><p>课后实验笔记</p><p>1、<a href="https://github.com/huangrt01/TCP-Lab">lab-writeup</a></p><p>2、<a href="https://blog.csdn.net/kangyupl/article/details/108589594">Stanford CS144 学习笔记</a></p><h4 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h4><blockquote><p>首先推荐的是哈工大的<a href="https://www.bilibili.com/video/BV1t4411e7LH?from=search&seid=1912602767882056182&spm_id_from=333.337.0.0">计算机组成原理</a></p></blockquote><p>其次便是stanford的CS111这门课程，主要讲解的便是线程、并发、加锁这类的操作。</p><p>视频课程：<a href="https://www.youtube.com/watch?v=_LFGjZ0Sc6I&list=PLai-xIlqf4JmTNR9aPCwIAOySs1GOm8sQ">CS111</a></p><p>课表：<a href="https://web.stanford.edu/~ouster/cs111-spring21/all_lectures/">CS111 2021</a></p><p>当然伯克利大学的课程也是不错，并且也有视频课程</p><p>视频课程：<a href="https://www.youtube.com/channel/UCnhpOONF1c1FtipDF8LPdqQ/videos">CS162</a></p><p>课表：<a href="https://inst.eecs.berkeley.edu/~cs162/sp20/">CS162 2020</a></p><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>如果是想要学习kernel相关的知识，那么操作系统是一门很好的课程来带入我们学习内核</p><p>国外的课程推荐：<a href="https://www.bilibili.com/video/BV19k4y1C7kA">麻省理工的操作系统</a></p><p>相关的笔记：<a href="https://blog.csdn.net/u013577996/article/details/108679997">Mit6.S081学习笔记</a></p><p>相关的课表：<a href="https://pdos.csail.mit.edu/6.828/2020/schedule.html">MIT6.S081的课表和教材</a></p><p>上面这个是本科生的独立的课程，后面又分出一门课专门为研究生准备的课程</p><p><a href="https://abelay.github.io/6828seminar/schedule.html">MIT6.828</a></p><p>不过目前只能看PPT，并没有视频<a href="https://blog.csdn.net/u013577996/article/details/108679997">https://blog.csdn.net/u013577996/article/details/108679997</a>)</p><p>国内课程推荐：学堂在线中的清华大学的<a href="https://www.xuetangx.com/course/THU08091000267/7753473?channel=i.area.manual_search">操作系统</a>课程</p><p>相关的课后作业：<a href="https://chyyuu.gitbooks.io/ucore_os_docs/content/">8个lab实验</a> 、不过有<a href="https://www.lanqiao.cn/courses/221/learning/?id=709">在线的平台进行实验</a>，感觉用处不大，还是考虑自己本地搭建平台吧</p><p>相关的笔记：<a href="https://github.com/Kiprey/Skr_Learning/tree/master/week9-19/uCore">操作系统实验笔记</a></p><p><a href="https://github.com/chyyuu/os_course_info">https://github.com/chyyuu/os_course_info</a></p><h4 id="软件分析"><a href="#软件分析" class="headerlink" title="软件分析"></a>软件分析</h4><blockquote><p>程序分析是一门重要的课程，主要是讲解如何分析流程，比如soot、污点分析，数据流分析等等技术，可谓是目前安全静态代码审计的必经之路，目前很多半自动化或者自动化漏洞检测工具都是会基于软件分析。</p></blockquote><p>学习这门课程的前提是学过编译原理</p><ul><li><p>首先推荐的是南京大学新开设的课程《软件分析》</p><blockquote><p>课程是开放在B站上的，本课程是以java为基础，以soot为静态分析工具</p><p>视频课程：<a href="https://www.bilibili.com/medialist/play/2919428?from=space&business=space_series&business_id=1006553&desc=0&spm_id_from=333.999.0.0">软件分析</a></p><p>课件地址：<a href="https://pascal-group.bitbucket.io/teaching.html">PPT</a></p></blockquote></li></ul><ul><li><p>北京大学公开课程熊英飞老师《软件分析技术》</p><blockquote><p>这个课程和南京大学差不多，都是基于soot的分析，可以作为补充材料进行</p><p>视频：<a href="https://liveclass.org.cn/cloudCourse/#/courseDetail/8mI06L2eRqk8GcsW">软件分析技术</a></p><p>课件地址：<a href="https://xiongyingfei.github.io/SA/2019/main.htm#desc">PPT</a></p></blockquote></li></ul><p>课后作业：相关的笔记已经非常的多，课后作业在PPT中都有所提到，建议是看课程，跟着课程完成对应的课堂作业。</p><p>前面推荐的是国内优秀的两个课程，接下来是推荐国外的优秀软件分析课程</p><ul><li><p>UFMG大学的DCC888</p><blockquote><p>该课程的优势在于是基于C/C++来进行讲解的，LLVM作为分析器，相比较上面的两个课程而言更加的深入，并且课程的质量也是非常的不错，讲师开放了相关的PPT和课程</p><p>视频和PPT：<a href="https://homepages.dcc.ufmg.br/~fernando/classes/dcc888/ementa/">link</a></p><p>当然国内也有公司基于这个讲义<a href="https://space.bilibili.com/482245901/video">进行讲解</a></p></blockquote></li><li><p>SOLA program analysis</p><blockquote><p>总共涵盖了三个主题：静态分析、分析程序的源代码、动态分析，基于通用数据流分析框架为javascript实现污点分析。</p><p>可以配合南京大学的课程进行搭配学习。</p><p>课程地址：<a href="https://www.bilibili.com/video/BV1aL4y167vY?spm_id_from=333.1007.top_right_bar_window_history.content.click">程序分析</a></p><p>讲义以及课件：<a href="https://software-lab.org/teaching/winter2020/pa/">PPT</a></p></blockquote></li></ul><h4 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h4><p>这是麻省理工的网络安全的课程，可谓是非常的经典，并且课程内容都是非常的新，每年都有更新。</p><p><a href="https://security.cs.berkeley.edu/">Berkeley安全</a>课表</p><p><a href="https://sp21.cs161.org/">Berkeley CS161 计算机安全</a></p><blockquote><p>这个课程的春季课程是可以看到视频，并且内容和Mit6.857有重复性的，但是麻省理工的课程（<a href="http://courses.csail.mit.edu/6.857/2020/handouts">mit6.857</a>）并没有公开完全的PPT，所以可以优先看这个课程，来学习吧，不过密码学教程是有更加详细的教程。</p><p>除此之外，其秋季课程（<a href="https://cs161.org/">CS161 2021</a>）公开了PPT。</p></blockquote><p><a href="https://css.csail.mit.edu/6.858/2022/">MIT6.858：计算机系统安全</a></p><blockquote><p>这套课程可是非常棒，内容课网络安全非常的接近，涉及到Android、Linux、cpu等等方面的知识。并且还youtube上在存有课程，可以结合课程进行学习。</p></blockquote><p><a href="https://cs155.stanford.edu/syllabus.html">stanford CS155 计算机和网络安全</a></p><blockquote><p>内容和mit6.858相似，不过内容也会有所差异，可惜的是并未有开放视频教程，不过有ppt</p></blockquote><p>以上内容就是基础课程，学习完成这些基础内容，计算机能力可谓相当扎实。</p><h3 id="能力篇"><a href="#能力篇" class="headerlink" title="能力篇"></a>能力篇</h3><h4 id="基础漏洞学习"><a href="#基础漏洞学习" class="headerlink" title="基础漏洞学习"></a>基础漏洞学习</h4><blockquote><p>想要学习挖洞，那必然是需要熟悉基础漏洞原理，学习途径大致如下</p></blockquote><p>1、<a href="https://ctf-wiki.org/pwn/linux/user-mode/environment/">CTF-wiki</a> 或者看<a href="https://guyinatuxedo.github.io/index.html#nightmare">Nightmare</a></p><p>在CTF-wiki中包含了绝大多数漏洞类型，同时也是含有漏洞练习,同时可以训练写EXP</p><p>2、<a href="https://pwnable.tw/">pwnable.tw</a></p><blockquote><p>练习pwn题目还是要去做高质量的赛事的题目，很多滥竽充数的比赛的题目就是无限脑洞</p></blockquote><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/12733198/1638846793648-8bb13fa7-76fd-4303-bc9d-1844d5d0e21d.pdf">📎pwnable.tw-部分题目WP合集.pdf</a></p><p>3、<a href="https://pwnable.kr/">pwnable.kr</a></p><blockquote><p>与tw相似的网站</p></blockquote><p>4、首选推荐的是这个pwn.college上的<a href="https://dojo.pwn.college/challenges">Challenges</a></p><p>在该挑战中，不仅仅是做题目，其中还涉及很多pwn相关的视频教程，非常适合用来学习</p><p>5、<a href="https://tc.gts3.org/cs6265/2021/tut/tut00-intro.html">CS6265信息安全实验</a></p><p>课程资源：之前长亭科技开展了一场免费的PWN培训</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1_eS-irqHkEGd2WzQkuqwNQ">https://pan.baidu.com/s/1_eS-irqHkEGd2WzQkuqwNQ</a> 提取码: b6o1 </p><p>–来自百度网盘超级会员v5的分享</p></blockquote><p>快速学习pwn可以直接看上面的长亭公开课或者<a href="https://github.com/yuawn/NTU-Computer-Security">中国台湾大学开设的PWN课程</a>，涵盖了CTF-wiki中大部分知识。</p><p>同时在B站中有<a href="https://www.bilibili.com/video/BV1Uv411j7fr?spm_id_from=333.999.0.0">团队讲解PWN</a>，整体来看是一个不错的教程。</p><p>相关书籍推荐</p><blockquote><p>《程序员的自我修养：链接、装载和库》</p><p>《CTF竞赛权威指南：PWN》</p><p>《黑客之道 漏洞发掘的艺术》</p><p>《漏洞战争 软件漏洞分析精要》</p><p>《0Day安全：软件漏洞分析技术》</p><p>当然还有NULL和FlappyPig两个战队出的CTF指南</p></blockquote><h4 id="辅助技能学习"><a href="#辅助技能学习" class="headerlink" title="辅助技能学习"></a>辅助技能学习</h4><blockquote><p>这个部分就是学习一些辅助或者是提效的知识点</p></blockquote><h5 id="1、fuzz学习"><a href="#1、fuzz学习" class="headerlink" title="1、fuzz学习"></a><strong>1、fuzz学习</strong></h5><blockquote><p>fuzz的学习是一个很大的方向，很多方向的漏洞挖掘都可以使用fuzz来进行，学习fuzz不仅仅是学习这个工具，而是去学习这个思想，重点是掌握修改fuzz工具来挖掘自己的目标。</p></blockquote><p>学习和调试<a href="https://github.com/google/AFL">AFL fuzz</a>，几乎后期的很多fuzz工具都是基于这个来修改的。</p><p>相关资料：</p><blockquote><p>1、<a href="https://eternalsakura13.com/2020/08/23/afl/">sakuraのAFL源码全注释</a></p><p>2、<a href="https://paper.seebug.org/1732/">AFL二三事——源码分析</a>  当然在<a href="https://bbs.pediy.com/thread-269534.htm">看雪</a>和他自己的<a href="https://www.v4ler1an.com/categories/">博客</a>中有更多内容，深信服千里眼</p><p>3、<a href="http://rk700.github.io/2017/12/28/afl-internals/">AFL内部实现细节小记</a></p><p>4、<a href="http://rk700.github.io/2018/01/04/afl-mutations/">AFL文件变异一览</a></p></blockquote><p>当然还有很多关于AFL的文章，不过最终都是需要自己动手调试代码</p><p>作业：动态调试AFL代码完成笔记</p><p>视频教程</p><p>①、<a href="https://www.youtube.com/watch?v=6YLz9IGAGLw">Fuzzing with AFL - by Michael Macnair</a></p><blockquote><p>该教程时间比较长，3小时的讲解，但是对AFL的讲解是很细致的，是学习AFL的一门好教程。</p></blockquote><p>fuzz相关的月刊</p><p><a href="https://academy.fuzzinglabs.com/community/public">Fuzzing Labs Monthly Newsletter</a></p><blockquote><p>每个月初都会总结上个月出现的与fuzz相关的文章、工具、论文等等</p></blockquote><h5 id="2、fuzz实战分析"><a href="#2、fuzz实战分析" class="headerlink" title="2、fuzz实战分析"></a><strong>2、fuzz实战分析</strong></h5><blockquote><p>利用fuzz去进行漏洞挖掘，实际分析案例来增加对fuzz的原理的熟悉程度。</p></blockquote><p>①、</p><ul><li>实战首选是推荐使用<a href="https://github.com/antonio-morales/Fuzzing101">Fuzzing101</a>，总共含有10个真实的样本提供练习</li><li><a href="https://www.anquanke.com/post/id/254167">AFL-Training</a></li></ul><p>作业：依靠fuzz分析crash并分析漏洞，总结两个练习</p><p>②、如果在分析漏洞过程中觉得路径太过于陡峭，不妨先从下面这两个教程中来进行学习。</p><ul><li><a href="http://fuzzing.in/codelabs/fuzzing_opensource/index.html?index=../..index#0">Fuzzing open source softwares with AFL</a></li><li><a href="http://fuzzing.in/codelabs/fuzzing_linux/index.html?index=../..index#0">Fuzzing and finding vulnerabilities on Linux</a></li></ul><p>这两个内容是差不多的，可以当做是入门级别的教程，想比fuzzing101来讲并不是这么陡峭</p><p>作业：实现教程中的程序，总结相关的技术，写出同样的教程。</p><p>③、拓展课视频课程</p><p>来自youtube的专门讲解各种<a href="https://www.youtube.com/c/MrHardik05/playlists">fuzz的视频教程</a></p><blockquote><p>主讲人来自印度的，英语听起来很麻烦，也无法识别，好在有操作，可以看视频操作。</p><p>在其中涉及到很多fuzz工具的讲解</p><ul><li><p>fuzzing基础课</p></li><li><p>fuzzing with AFL\Hongfuzz\WinAFL\libfuzzer\radamsa\AFL++\libAFL\e9afl\Jackalope</p></li><li><p>其中还含有调试相关、patch相关的内容</p></li></ul></blockquote><p>除此之外，youtube上的<a href="https://www.youtube.com/playlist?list=PLa-iO6ehPFJiT0R0RtjUNUeGRqgU54TN_">fuzzing lab的课程</a>可以看看，不过缺点是不成体系，得加钱</p><p>作业：学习其中提到的各种优秀的fuzz工具</p><h5 id="3、Codeql实战"><a href="#3、Codeql实战" class="headerlink" title="3、Codeql实战"></a><strong>3、Codeql实战</strong></h5><p><a href="https://github.com/github/codeql">Codeql官方代码</a></p><blockquote><p>这个github与Semmle合并开源出来的产品，该工具的功能是非常强大的。</p><p>官方文档是学习这个工具最好的手册</p></blockquote><p>值的学习的Codeql资源库：<a href="https://github.com/ASTTeam/CodeQL#01-CodeQL%E8%B5%84%E6%BA%90">link</a></p><p>参考文章</p><p>1、<a href="https://lennysec.github.io/codql-and-cve-2019-3560/">CodeQL 若干问题思考及 CVE-2019-3560 审计详解</a></p><p>2、<a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/12733198/1638892159591-cd8a4572-5bd4-4859-a6a0-bcee5f5404f1.pdf">📎根据GitHub_Security_Lab上的例子学习CodeQL.pdf</a> <a href="https://lab.github.com/githubtraining/codeql-u-boot-challenge-(cc++)">github_Security_lab</a></p><p>3、<a href="https://jorgectf.gitlab.io/blog/post/practical-codeql-introduction/">CodeQL实用指南</a></p><p>视频教程</p><p>1、<a href="https://www.youtube.com/watch?v=XmAEgl8bVhg">CodeQL as an auditing oracle </a></p><p>2、<a href="https://www.youtube.com/watch?v=pYzfGaLTqC0">Finding security vulnerabilities in JavaScript with CodeQL</a></p><h3 id="实战篇"><a href="#实战篇" class="headerlink" title="实战篇"></a>实战篇</h3><h4 id="Android漏洞"><a href="#Android漏洞" class="headerlink" title="Android漏洞"></a>Android漏洞</h4><h5 id="1、Android应用层漏洞"><a href="#1、Android应用层漏洞" class="headerlink" title="1、Android应用层漏洞"></a><strong>1、Android应用层漏洞</strong></h5><blockquote><p>这里是学习应用层的漏洞，并不是深入到系统级别。</p></blockquote><p>基本的了解</p><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/12733198/1638857164558-9e80b5f4-a7fc-4743-b849-82d3ef154ee1.pdf">📎张波：安卓漏洞利用与技术实践.pdf</a></p><p>同时今年的byteCTF的<a href="https://shvu8e0g7u.feishu.cn/docs/doccndYygIwisrk0FGKnKvE0Jhg#">Android题目</a>还是可以拿来学习一下</p><blockquote><p>Android APP层的漏洞类型基本都是基于四大组件为攻击入口来进行。</p></blockquote><p>网上基本开源的和商用的自动化检测平台基本上都是这些漏洞类型</p><ul><li><p><a href="https://www.anquanke.com/post/id/241264">Android应用中常见漏洞总结</a></p></li><li><p><a href="https://ayesawyer.github.io/2019/08/21/Android-App%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/">Android APP常见安全漏洞</a></p></li><li><p>科恩APKpoker wiki</p></li></ul><blockquote><p> APP层的漏洞可能更多的是信息泄露或则其他组合漏洞类型进行越权访问，危害性基本上是跟随着业务的重要性来决定。</p></blockquote><p>学习教程</p><p><a href="https://github.com/Ralireza/Android-Security-Teryaagh">Android安全指南、路线图</a></p><p>练习教程</p><blockquote><p>练习Android APP的漏洞类型，还是需要去分析漏洞demo</p><p>下面这几个漏洞demo都是值得去练习</p><p><a href="https://github.com/B3nac/InjuredAndroid">https://github.com/B3nac/InjuredAndroid</a></p><p><a href="https://github.com/dineshshetty/Android-InsecureBankv2">https://github.com/dineshshetty/Android-InsecureBankv2</a></p><p><a href="https://github.com/RavikumarRamesh/hpAndro1337">https://github.com/RavikumarRamesh/hpAndro1337</a></p><p><a href="https://github.com/OWASP/MSTG-Hacking-Playground">https://github.com/OWASP/MSTG-Hacking-Playground</a></p><p><a href="https://github.com/OWASP/owasp-mstg/tree/master/Crackmes">https://github.com/OWASP/owasp-mstg/tree/master/Crackmes</a></p><p><a href="https://github.com/satishpatnayak/AndroGoat">https://github.com/satishpatnayak/AndroGoat</a></p><p><a href="https://github.com/rewanthtammana/Damn-Vulnerable-Bank">https://github.com/rewanthtammana/Damn-Vulnerable-Bank</a></p></blockquote><p>课后作业：总结练习的漏洞demo类型</p><p>参考文章：</p><blockquote><p>1、在该<a href="https://blog.oversecured.com/">博客</a>中含有最新的APP漏洞分析</p><ul><li><a href="https://blog.oversecured.com/Android-security-checklist-webview/">Android安全检查表：Webview</a></li><li>对三星设备的原装APP漏洞挖掘 <a href="https://blog.oversecured.com/Two-weeks-of-securing-Samsung-devices-Part-1/">part1</a> <a href="https://blog.oversecured.com/Two-weeks-of-securing-Samsung-devices-Part-2/">part2</a></li></ul><p>2、破解小米的应用程序 <a href="http://blog.takemyhand.xyz/2021/07/hacking-on-xiaomis-android-apps.html">part1</a></p><p>3、Android中的特殊攻击面 <a href="https://paper.seebug.org/1174/">邪恶的对话框</a> <a href="https://paper.seebug.org/1175/">危险的deeplink</a> <a href="https://paper.seebug.org/1269/">隐藏的call函数</a></p><p>4、<a href="https://dphoeniixx.medium.com/tiktok-for-android-1-click-rce-240266e78105">Android版本的TikTok组合漏洞分析</a></p></blockquote><h5 id="2、Android漏洞"><a href="#2、Android漏洞" class="headerlink" title="2、Android漏洞"></a><strong>2、Android漏洞</strong></h5><p><strong>这个部分的漏洞往往都是漏洞利用链，与Android系统相关的内容会比较多，难度也是比较大的，同时漏洞的危害也是相当大。</strong></p><p>基本的了解</p><ul><li>可以看Android安全团队的maddiestone Android Explort 101 <a href="https://www.youtube.com/watch?v=squuwVQiPgg">video</a>  <a href="https://docs.google.com/presentation/d/1StU5WdUD_qJiI_mUwU3dDRCsZUBDGxcf1C0lmzNSTPo/edit?resourcekey=0-O5HiPQO3EhH81rfBMHDHGw#slide=id.ged51bea2d0_0_147">PPT</a></li><li><a href="https://www.yuque.com/attachments/yuque/0/2021/pptx/12733198/1638716250138-babd972a-11a4-4446-8e06-b6ad435be97f.pptx">📎漏洞挖掘与利用-鹏城实验室交流.pptx</a></li></ul><p>这个主题是比较难并且分享也是比较少的，所以能够找到的教程也是非常少，很多学习基本上都是依靠自己来看相关安全会议的paper或者直接看漏洞公告分析补丁。</p><p><a href="https://fuzzing.science/page/rudroid-worlds-worst-android-emulator/">用Rust编写Android模拟器</a></p><p>针对Android的fuzz</p><ul><li><a href="https://alephsecurity.com/2021/11/16/fuzzing-qemu-android/">AFL++ on Android with QEMU support</a></li><li><a href="https://fuzzing.science/page/fuzzing-android-native-libraries-with-libfuzzer-qemu/">使用libFuzzer + QEMU 对Android原生库进行模糊测试</a></li></ul><p>参考文章</p><blockquote><p>参考文章收集的都是比较经典的教程或者会议的paper</p></blockquote><ul><li><p><a href="https://www.anquanke.com/post/id/202385">Android binder 越界访问漏洞 CVE-2020-0041</a></p></li><li><p><a href="https://bbs.pediy.com/thread-264616.htm">Android内核提权漏洞分析 CVE-2020-0423</a></p></li><li><p>Android内核提权漏洞 CVE-2019-2215 Binder UAF <a href="https://bbs.pediy.com/thread-264932.htm">paper1</a> <a href="https://bbs.pediy.com/thread-266198.htm">paper2</a></p></li><li><p><a href="https://vul.360.net/archives/144">Explorting the Promise.allsettled bug in V8</a></p></li><li><p>[Android Binder:The Bridge To Root](<a href="https://conference.hitb.org/hitbsecconf2019ams/materials/D2T2">https://conference.hitb.org/hitbsecconf2019ams/materials/D2T2</a> - Binder - The Bridge to Root - Hongli Han &amp; Mingjian Zhou.pdf)</p></li><li><p><a href="https://github.com/secmob/TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices">An Exploit Chain to Remotely Root Modern Android Devices</a></p></li><li><p><a href="https://github.com/marcinguy/CVE-2019-2107">Android RCE CVE-2019-2107</a></p></li><li><p><a href="https://github.com/ScottyBauer/Android_Kernel_CVE_POCs">Android Kernel CVE POCs</a></p></li><li><p><a href="https://github.com/jiayy/android_vuln_poc-exp">Android POC&amp;EXP</a></p></li></ul><blockquote><p>实际上这类漏洞都是与Linux kernel 或者 AOSP相关，甚至很多CVE是基于特定厂商的ROM才有的漏洞。</p></blockquote><h5 id="3、Android漏洞的自动化探索"><a href="#3、Android漏洞的自动化探索" class="headerlink" title="3、Android漏洞的自动化探索"></a><strong>3、Android漏洞的自动化探索</strong></h5><blockquote><p>这一小节就是来讲上面所学的漏洞类型进行抽象出来，探索自动化漏洞发掘方案。</p></blockquote><h4 id="Linux漏洞"><a href="#Linux漏洞" class="headerlink" title="Linux漏洞"></a>Linux漏洞</h4><blockquote><p>Linux漏洞应该算是各大平台的漏洞基础，很多平台都是基于Linux来进行开发的。</p></blockquote><p>想要学习这块内容，前面的基础操作系统是必不可少的，熟悉Linux内核，最好是实现一个基本的Linux kernel</p><p>最强的学习清单：<a href="https://github.com/xairy/linux-kernel-exploitation">Linux-kernel-explortation</a></p><p>学习教程：</p><ul><li>pwn.college中的<a href="https://dojo.pwn.college/challenges/kernel">kernel</a>部分，并含有大量的练习题目。</li><li><a href="https://github.com/yuawn/kernel-exploitation">台大的Linux kernel教程</a></li></ul><p>视频教程：<a href="https://www.youtube.com/watch?v=sCaVRsDEpko">latest Linux kernel CVE security vulnerabilities</a></p><p>系列教程：<a href="https://cc-sir.github.io/tags/Linux-kernel/">Linux kernel Explort 内核漏洞学习</a></p><p>教程文章</p><ul><li><p><a href="https://github.com/hac425xxx/heap-exploitation-in-real-world">heap exploitation in real world</a></p></li><li><p><a href="https://github.com/stong/how-to-exploit-a-double-free">how to explort a double free</a></p></li><li><p><a href="https://github.com/shellphish/how2heap">how2heap</a></p></li></ul><p>学习文章</p><ul><li><p><a href="https://wizardforcel.gitbooks.io/sploitfun-linux-x86-exp-tut/content/3.html">off-by-one漏洞</a></p></li><li><p><a href="https://www.anquanke.com/post/id/227283">CVE-2020-14364漏洞复现-QEMU逃逸</a></p></li><li><p><a href="https://bbs.pediy.com/thread-265501.htm">QEMU逃逸初探</a></p></li><li><p><a href="https://bbs.pediy.com/thread-265744.htm">Linux蓝牙模块拒绝服务漏洞分析 CVE-2020-12351</a></p></li><li><p><a href="https://bbs.pediy.com/thread-266822.htm">Fastbin attack之2017 0CTF</a></p></li><li><p><a href="https://docs.google.com/presentation/d/19JaXHFMT-R2le6x-vPKw5D1Cxlw2aLtxHEIDwWBNXCQ/edit#slide=id.gda44520c30_7_54">Fuzz the linux kernel</a></p></li><li><p>Linux pwn题目入门 <a href="https://www.anquanke.com/post/id/258874">paper1</a></p></li><li><p><a href="https://www.anquanke.com/post/id/260055">西湖论剑2021 easykernel</a></p></li><li><p><a href="https://www.anquanke.com/post/id/258146">TCTF/0CTF 2021-final 两道kernel pwn</a></p></li><li><p><a href="https://github.com/xairy/kernel-exploits">kernel-exploits</a></p></li><li><p>CVE-2021-43008 利用Linux 6pack驱动程序中存在的16年漏洞 <a href="https://syst3mfailure.io/sixpack-slab-out-of-bounds">paper</a> <a href="https://github.com/0xdevil/CVE-2021-42008">exploit</a></p></li></ul><h4 id="IOT-车联网漏洞"><a href="#IOT-车联网漏洞" class="headerlink" title="IOT/车联网漏洞"></a>IOT/车联网漏洞</h4><blockquote><p>IOT是一个比较热门的方向，目前来看难度也不是那么的顶，是学习漏洞挖掘可以考虑的路径。</p></blockquote><blockquote><p>由于这块是一个比较庞大的方向，又和前面的有一定的差异，因此这块内容规划有几个子模块。</p></blockquote><h5 id="基础篇-1"><a href="#基础篇-1" class="headerlink" title="基础篇"></a>基础篇</h5><p>基础学习参考书籍</p><blockquote><p>《家用路由器0day漏洞挖掘技术》</p><p>《物联网渗透测试》</p></blockquote><p>当然针对不同的设备有不同的会有不同的书籍</p><p>基本学习的视频</p><ul><li><p><a href="https://www.bilibili.com/video/BV16J411T7eG?from=search&seid=7772199384721547380&spm_id_from=333.337.0.0">家用路由器漏洞挖掘入门-h4l</a>o</p></li><li><p><a href="https://www.bilibili.com/video/BV1dJ411D7Tf?from=search&seid=10741663428101961474&spm_id_from=333.337.0.0">边界IOT漏洞挖掘精要</a></p></li><li><p>看完这两个视频，基本上对IOT有大致的了解。</p></li></ul><p>比较全的IOT指南:<a href="https://iot-security.wiki/">https://iot-security.wiki/</a></p><p>学习文章</p><ul><li><p><a href="https://xz.aliyun.com/t/3826">路由器漏洞挖掘环境搭建</a> <a href="https://xz.aliyun.com/t/6071">part2</a></p></li><li><p><a href="https://www.anquanke.com/post/id/151277">物联网设备的固件模拟环境搭建</a></p></li><li><p>路由器漏洞挖掘之栈溢出入门 <a href="https://www.anquanke.com/post/id/169689">paper1</a> <a href="https://www.anquanke.com/post/id/171918">paper2</a> <a href="https://www.anquanke.com/post/id/172126">paper3</a> <a href="https://www.anquanke.com/post/id/173362">paper4</a></p></li></ul><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="实战篇-1"><a href="#实战篇-1" class="headerlink" title="实战篇"></a>实战篇</h5><blockquote><p>IOT这块学习主要还是去直接复现固件，学习别人的分析思路，分析漏洞，因为IOT涉及到的知识是比较全面。</p></blockquote><p>参考文章</p><ul><li><p><a href="https://www.anquanke.com/post/id/179510">路由器漏洞挖掘之DIR-815栈溢出漏洞分析</a></p></li><li><p><a href="https://xz.aliyun.com/t/7394">CVE-2017-13089 wget栈溢出漏洞复现</a></p></li><li><p>三道与IOT相关的pwn题目 <a href="https://mp.weixin.qq.com/s/x19DiiitMeAm5VAupqzfdg">part1</a> <a href="https://www.anquanke.com/post/id/224972">part2</a></p></li><li><p><a href="https://www.anquanke.com/post/id/229323">CVE-2020-24581 D-Link DSL-2888A 远程命令执行漏洞分析</a></p></li><li><p><a href="https://www.anquanke.com/post/id/232845">IOT设备漏洞复现到固件后门植入</a></p></li><li><p><a href="https://www.anquanke.com/post/id/231445">CVE-2018-16333 Tenda路由器缓冲区溢出漏洞复现</a></p></li><li><p><a href="https://www.anquanke.com/post/id/233859">思科RV110W CVE-2020-3331漏洞调试与IOT靶场搭建</a></p></li><li><p><a href="https://www.anquanke.com/post/id/236133">D-Link路由器漏洞研究分享</a></p></li><li><p><a href="https://bbs.pediy.com/thread-266803.htm">一次嵌入式固件逆向实践</a></p></li><li><p>[家用路由器漏洞挖掘实例分析<a href="https://bbs.pediy.com/thread-268623.htm">图解D-LINK DIR-815多次溢出漏洞]</a></p></li><li><p><a href="https://bbs.pediy.com/thread-269063.htm">D-Link DIR-645路由器溢出分析</a></p></li><li><p><a href="https://paper.seebug.org/429/#d-link-dir-645-dir-815">D-Link系列路由器漏洞挖掘入门</a></p></li><li><p><a href="https://paper.seebug.org/879/">重现 TP-Link SR20 本地网络远程代码执行漏洞</a></p></li><li><p><a href="https://paper.seebug.org/1036/">D-Link DIR-816 A2路由器安全研究分享</a></p></li><li><p><a href="https://paper.seebug.org/1320/">海康萤石智能门锁的网关分析</a></p></li><li><p><a href="https://paper.seebug.org/1650/">D-Link DIR 3040 从信息泄露到 RCE</a></p></li><li><p><a href="https://paper.seebug.org/1651/">加密固件之依据老固件进行解密</a></p></li><li><p><a href="https://paper.seebug.org/1751/">天府杯华硕会战的围剿与反围剿</a></p></li></ul><h3 id="拓展篇"><a href="#拓展篇" class="headerlink" title="拓展篇"></a>拓展篇</h3><h4 id="前沿安全技术研究"><a href="#前沿安全技术研究" class="headerlink" title="前沿安全技术研究"></a>前沿安全技术研究</h4><blockquote><p>这块主要是去阅读Fuzz或者和安全相关的paper，ppt等材料，算是能力的推展篇，可能对漏洞挖掘不会有很大的增幅，但是可以掌握。</p></blockquote><p>既然是前沿安全技术研究，为了更加的凝聚，大致收集这几类的论文和演讲课题</p><ul><li><p>fuzzing 相关的论文以及课题</p></li><li><p>DL、ML应用于安全的论文以及课题</p></li><li><p>安全大杂烩——angr、新一代汇编工具、逆向思路</p></li><li><p>其他感兴趣的paper</p></li></ul><h5 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h5><p>李沐的<a href="https://www.bilibili.com/medialist/play/1567748478?from=space&business=space_collection&business_id=32744&desc=0">论文精读</a></p><p>在学习看论文或者是筛选论文之前，我想学习一下如何精读论文是一个非常好的开端。上面的教程就是教你如何选择合适的论文，如何去精读论文。</p><h5 id="fuzzing-相关"><a href="#fuzzing-相关" class="headerlink" title="fuzzing 相关"></a>fuzzing 相关</h5><blockquote><p>基于AFL、libfuzzer等优秀的工具进行改写得fuzz，很多研究生的课题就是去漏洞挖掘，那必然会去二次开发或者重构自己的fuzz工具，适用于不同的场景，不同的设备来挖掘漏洞。</p></blockquote><ul><li>推荐深圳大学博士生的 <a href="https://github.com/wcventure/FuzzingPaper">fuzz paper</a>项目，几乎涵盖了大部分与fuzz相关的论文和会议</li></ul><h5 id="DL、ML应用于安全的论文以及课题"><a href="#DL、ML应用于安全的论文以及课题" class="headerlink" title="DL、ML应用于安全的论文以及课题"></a>DL、ML应用于安全的论文以及课题</h5><blockquote><p>机器学习和深度学习这块应用于安全还并不会特别的普遍，不过这应该是前沿技术研究，科恩就在尝试AI+binary的研究</p></blockquote><p>有一个安全博主就在刚好写了一篇总结稿：<a href="https://github.com/404notf0und/AI-for-Security-Learning#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8">AI for security</a>，可以从中找到一点在安全方面的应用</p><p>《网络安全之机器学习》这本书也是一本讲解应用的书籍。</p><blockquote><p>在看论文中，发现大部分的DL、ML都是在恶意软件识别</p></blockquote><h5 id="安全大杂烩"><a href="#安全大杂烩" class="headerlink" title="安全大杂烩"></a>安全大杂烩</h5><ul><li><a href="https://github.com/aemmitt-ns/radius">使用rust写的一款符号执行和污点分析框架</a>，是基于radare2工具的插件</li><li><a href="https://www.4hou.com/posts/GzBr">使用污点分析批量挖掘路由器固件安全漏洞</a></li></ul><h4 id="IOS漏洞挖掘"><a href="#IOS漏洞挖掘" class="headerlink" title="IOS漏洞挖掘"></a>IOS漏洞挖掘</h4>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>漏洞挖掘</tag>
      
      <tag>IOT安全</tag>
      
      <tag>Android安全</tag>
      
      <tag>Fuzzing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习指南</title>
    <link href="/2021/12/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <url>/2021/12/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>最近又收集了蛮对这块的学习资料和教程，过段时间重构一下这个指南</p><p>（2022.03025）</p><p>现在可能并没有太多时间来专研这块，不过可以当做是自己的一个计划表吧，所以在这里做一个资料收集的目录，为以后学习铺一点路。该文案主要是收集以下内容：</p><blockquote><p>1、深度学习入门资料</p><p>2、图像识别</p><p>3、智能风控</p><p>4、AI算法</p><p>5、深度学习框架库的使用</p><p>6、人工智能/深度学习在安全方面的应用</p><p>7、机器学习</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习这一大类的知识，是需要一个数学功底和基础的编程知识，其中很多内容都是来源于统计学，实际上这也是这一类技术解决的问题，为大数据而生，需要使用数据来训练模型，才能后发挥出这项技术真正实力。</p><h3 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h3><p>比较喜欢天池平台上的一张图片</p><p><img src="https://s2.loli.net/2022/01/05/HDTk8dxaNuBloC5.png" alt="image-20220105201803858"></p><p>基本上涵盖了人工智能、机器学习和深度学习知识框架，当然在该平台上也含有挺多的课程，值得推荐。<a href="https://tianchi.aliyun.com/course">link</a></p><p>同时推荐国内最大的人工智能开源社区</p><p><a href="http://datawhale.club/latest">datawhale</a>，不过最丰富的还是其<a href="https://github.com/orgs/datawhalechina/repositories">github仓库</a>中，后面挺多的学习的资料都会引用其中的。</p><p>如果确实不太清楚怎么学，学习路径是什么，可以关注其<a href="https://github.com/datawhalechina/team-learning">组队学习</a>，几乎每个月都会组织组队学习。</p><h4 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h4><blockquote><p>基础学习当然是学习（复习）基本的数学知识，概率论、统计学、高等数学、线性代数等等知识。其次便是学习python语法和与数据处理相关的库。</p></blockquote><p>基础学习推荐教程:天池平台中的<a href="https://tianchi.aliyun.com/course/260">python语法</a>和<a href="https://tianchi.aliyun.com/course/277">Al数学基础</a>两门课程</p><blockquote><p>当然python语法学习和数学学习还有很对教程可以看，根据自己的实际情况学习</p></blockquote><p>相关库学习推荐：<a href="https://tianchi.aliyun.com/course/323">NumPy</a>、<a href="https://tianchi.aliyun.com/course/325">Pandas</a>、<a href="https://tianchi.aliyun.com/course/324">Matplotlib</a></p><blockquote><p>基本上这就是几个基本的python库，在后续的数据分析和挖掘过程中是使用最为频繁。</p></blockquote><p><strong>数据分析课程</strong></p><blockquote><p>我们的很对内容都是针对数据进行展开工作的，所以对数据分析、数据清洗是我们训练模型的前奏。</p></blockquote><p>推荐课程：<a href="https://github.com/datawhalechina/hands-on-data-analysis">hands on data analysis</a></p><blockquote><p>内容并不多，可以在学完基础的python和相关的库后进行学习</p></blockquote><p>视频课程：<a href="https://space.bilibili.com/621981283/channel/detail?cid=191222">数据分析</a></p><p><strong>机器学习教程</strong></p><ul><li>吴恩达的<a href="https://www.bilibili.com/video/BV164411b7dx?from=search&seid=7824767836373798333&spm_id_from=333.337.0.0">机器学习</a>系列课程</li></ul><blockquote><p>吴恩达的课程更多的是在学习机器学习的理论知识，同时也讲到了很对的机器学习算法，算是入门机器学习一个很经典的课程。</p></blockquote><p><a href="https://github.com/TheisTrue/MLofAndrew-Ng">机器学习讲义</a></p><p><a href="https://github.com/Ayatans/Machine-Learning-homework">相关的学习笔记</a></p><ul><li>台湾大学李宏毅<a href="https://www.bilibili.com/video/BV1Wv411h7kN?from=search&seid=7824767836373798333&spm_id_from=333.337.0.0">机器学习</a>课程</li></ul><blockquote><p>李宏毅讲过很多次机器学习课程，并且该课程在youtube上也是同步，同样也是学习机器学习非常经典的课程</p><p>官方博客地址：<a href="https://speech.ee.ntu.edu.tw/~hylee/ml/2021-spring.html">机器学习2021春季</a></p><p>学习笔记：<a href="https://github.com/datawhalechina/leeml-notes">李宏毅机器学习笔记</a> <a href="https://github.com/unclestrong/DeepLearning_LHY21_Notes">学习笔记2</a></p><p>课件及作业：<a href="https://github.com/Fafa-DL/Lhy_Machine_Learning">课件和作业</a></p></blockquote><ul><li>南京大学周志华《机器学习》+《机器学习公式详解》</li></ul><blockquote><p>这两本书算是非常经典的入门书籍，基本上都是用这两本书籍来入门学习。</p></blockquote><p><a href="https://www.bilibili.com/video/BV17J411C7zZ?from=search&seid=7824767836373798333&spm_id_from=333.337.0.0">西瓜书白话解读</a>，专门讲解西瓜书的。</p><p><a href="https://www.bilibili.com/video/BV1Mh411e7VU">南瓜书的讲解</a>，实际上南瓜书是对西瓜书的一个补充和延伸</p><ul><li>浙江大学胡浩基<a href="https://www.bilibili.com/video/BV1qf4y1x7kB?from=search&seid=7824767836373798333&spm_id_from=333.337.0.0">机器学习</a>课程</li></ul><blockquote><p>胡教授在讲授SVM支持向量机这块是非常的清晰的，优先推荐前面的三个课程来学习机器学习。</p></blockquote><p>上面的课程基本上学习完成，课后作业也是写过后，基本上在机器学习理论上是没有什么问题，至于机器学习算法，原理应该都是可以理解的，最好的就是来点实战的项目进行落地实现。</p><p>如果时间不够，可以直接看天池平台的课程</p><p><a href="https://tianchi.aliyun.com/course/278">机器学习原理和实战</a></p><p><strong>深度学习课程</strong></p><blockquote><p>深度学习在一定程度上会依靠机器学习相关的知识，知识解决的问题类型是不同的，深度学习更多的是偏向于图片识别、NLP、机器视觉等等问题。</p></blockquote><ul><li>李沐<a href="https://www.bilibili.com/medialist/play/1567748478?from=space&business=space_series&business_id=358497&desc=0&spm_id_from=333.999.0.0">动手学习深度学习-PyTorch版</a></li></ul><blockquote><p>这个课程是《动手学习深度学习》这本书的作者授课，内容是也是很不错的，作为深度学习入门PyTorch是很好的选择</p><p>课程网站：<a href="https://courses.d2l.ai/zh-v2/">https://courses.d2l.ai/zh-v2/</a></p></blockquote><ul><li>复旦大学邱锡鹏 <a href="https://www.bilibili.com/video/BV13b4y1177W">神经网络与深度学习</a></li></ul><blockquote><p>该课程在国内算是优秀的课程，并且在这个方向有挺大的影响力，基本上这个课程是深度学习基础课程，如果后期方向是CV、NLP，这个算是一个基础。</p></blockquote><p><a href="https://nndl.github.io/">课程教材和PPT</a></p><ul><li><p>stanford <a href="https://www.bilibili.com/video/BV18Y411p79k?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">CS244N NLP with deep learning 2021</a></p><blockquote><p><a href="http://web.stanford.edu/class/cs224n/">课件与课程链接</a></p><p>这个课程同样是非常的经典，侧重在NLP与深度学习</p></blockquote></li></ul><p>学完这个课程，不妨看看CS244U，自然语言理解，算是CS244N的进阶</p><blockquote><p>最新公布的课程 <a href="https://www.youtube.com/watch?v=rha64cQRLs8&list=PLoROMvodv4rPt5D0zs3YhbWSZA8Q_DyiJ">CS244U 2021</a></p><p>当然在bilibili上也存在一门课程 <a href="https://www.bilibili.com/video/BV1b34y1o7Wt?from=search&seid=16580261739784019688&spm_id_from=333.337.0.0">CS244U</a>，含有中文字幕</p><p>相关课表：<a href="https://web.stanford.edu/class/cs224u/">CS244U</a></p></blockquote><ul><li>吴恩达 <a href="https://www.deeplearning.ai/programs/">Deepleraning.in</a>实际上是可以推荐的，毕竟在AI教育行业，是顶端的课程。</li></ul><p><a href="https://www.deeplearning.ai/program/deep-learning-specialization/">深度学习专业</a>总共五门课程</p><blockquote><ul><li><p><a href="https://www.bilibili.com/video/av73508149">(吴恩达深度学习第一步)神经网络和深度学习</a></p></li><li><p><a href="https://www.bilibili.com/video/av73507314">(吴恩达深度学习第二步)改善深层神经网络：超参数调试、正则化以及优化</a></p></li><li><p><a href="https://www.bilibili.com/video/av73510602">(吴恩达深度学习第三步)结构化机器学习项目</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1e54y1b7uk?spm_id_from=333.999.0.0">(吴恩达深度学习第四步)卷积神经</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1Co4y1279R?spm_id_from=333.999.0.0">（吴恩达深度学习第五步）NLP序列模型</a></p></li></ul></blockquote><p>课程很多资源可以<a href="https://space.bilibili.com/46880349/channel/seriesdetail?sid=499489">B站</a>或者其<a href="https://www.deeplearning.ai/programs/">官方的网站</a>中看</p><h4 id="实战（进阶）篇"><a href="#实战（进阶）篇" class="headerlink" title="实战（进阶）篇"></a>实战（进阶）篇</h4><p><strong>数据挖掘实战</strong></p><blockquote><p><strong>①、数据挖掘实战，势必会用到机器学习算法来训练模型，解决问题，这里首先推荐的是几款难度并不是很大的实战项目</strong></p><ul><li><p><a href="https://github.com/datawhalechina/team-learning-data-mining/tree/master/RentForecast">数据挖掘实践（房租预测）</a></p></li><li><p><a href="https://github.com/datawhalechina/team-learning-data-mining/tree/master/AnomalyDetection">数据挖掘实战（异常检测）</a></p></li><li><p><a href="https://github.com/datawhalechina/team-learning-data-mining/tree/master/FinancialRiskControl">数据挖掘实践（金融风控）</a></p></li><li><p><a href="https://github.com/datawhalechina/team-learning-data-mining/tree/master/HeartbeatClassification">数据挖掘实践（心跳信号分类）</a></p></li><li><p><a href="https://github.com/datawhalechina/team-learning-data-mining/tree/master/WeatherOceanForecasts">数据挖掘实践（气象海洋预测）</a></p></li><li><p><a href="https://github.com/datawhalechina/team-learning-data-mining/tree/master/SecondHandCarPriceForecast">数据挖掘实践（二手车价格预测）</a></p></li><li><p><a href="https://github.com/datawhalechina/team-learning-data-mining/tree/master/CityManagement">数据挖掘实践（城市管理大数据）</a></p></li><li><p><a href="https://github.com/datawhalechina/team-learning-data-mining/tree/master/PurchaseAndRedemptionForecast">数据挖掘实践（资金流入流出预测）</a></p></li><li><p><a href="https://github.com/datawhalechina/team-learning-data-mining/tree/master/AcademicTrends">数据分析实践（学术前沿趋势分析）</a></p></li></ul></blockquote><blockquote><p>②、天池平台出版的《阿里云天池大赛赛题解析 机器学习篇》</p><p>在该本书中详细的讲解了四个经典的案例，用来实战学习机器学习，可以在天池平台实战</p></blockquote><p><strong>机器学习</strong></p><p>斯坦福<a href="https://space.bilibili.com/1567748478/channel/collectiondetail?sid=28144">实用机器学习</a>2021秋季课</p><blockquote><p>李沐大神在斯坦福开设的课程，不过在中国又开设了中文版本，非常值得学习</p><p>课程主页</p><p><a href="https://c.d2l.ai/stanford-cs329p/">https://c.d2l.ai/stanford-cs329p/</a></p></blockquote><p><strong>深度学习</strong></p><ul><li>李沐的<a href="https://space.bilibili.com/1567748478/channel/collectiondetail?sid=32744">深度学习论文精读</a></li></ul><p>这套课程的重点就是学习如何阅读论文，这些论文是精心挑选，基本上是深度学习必读的论文。</p><p>同时作者又一个<a href="https://github.com/mli/paper-reading">论文仓库</a>，值得我们学习</p><ul><li>stanford <a href="https://www.bilibili.com/video/BV1Cm4y197wx?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">CS224W Machine Learning with Graph 图机器学习</a></li></ul><h3 id="资料收集"><a href="#资料收集" class="headerlink" title="资料收集"></a>资料收集</h3><p>1、深度学习更好的检测命令混淆，有公开的代码</p><p><a href="https://medium.com/adobetech/using-deep-learning-to-better-detect-command-obfuscation-965b448973e0">https://medium.com/adobetech/using-deep-learning-to-better-detect-command-obfuscation-965b448973e0</a></p><p>2、一个专门做人工智能的博主</p><p>github上内容还是值得推荐，其中还有很不不错的学习指南</p><p><a href="https://github.com/dair-ai/ML-YouTube-Courses">https://github.com/dair-ai/ML-YouTube-Courses</a></p><p>3、transformers学习指南，是一个入门的好教程</p><p><a href="https://e2eml.school/transformers.html">https://e2eml.school/transformers.html</a></p><p>同时该博主的文章也是比较的成系列，可以关注一下</p><p><a href="https://e2eml.school/blog.html#201">https://e2eml.school/blog.html#201</a></p><p>4、用与语义搜索的自然语言处理（NPL)</p><p><a href="https://www.pinecone.io/learn/nlp">https://www.pinecone.io/learn/nlp</a></p><p>5、NUS的学生的博客，主要研究方向是graph deep learning</p><p><a href="https://rish16.notion.site/rish16/Rishabh-Anand-ceb23e08fecf4afb8732fe0f55039f90">blog</a></p><p>并且其中的文章也是值得学习和阅读</p><p><a href="https://rish16.notion.site/a8c6fcb0c29c4764afa1926ad33084f8?v=bb27bb0444574fbd85f0c9d7e43b9da8">文章</a></p><p>6、pytorch官方教程</p><p><a href="https://pytorch.org/tutorials/">https://pytorch.org/tutorials/</a></p><p>7、电商风控赛题分享</p><p><a href="https://mp.weixin.qq.com/s/jpJBvPihhHxREC6-FcXGyQ">https://mp.weixin.qq.com/s/jpJBvPihhHxREC6-FcXGyQ</a></p>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习指南</tag>
      
      <tag>机器学习</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
